package com.heroesoftimepoc.temporalengine;

import com.heroesoftimepoc.temporalengine.model.Game;
import com.heroesoftimepoc.temporalengine.model.Hero;
import com.heroesoftimepoc.temporalengine.model.PsiState;
import com.heroesoftimepoc.temporalengine.repository.GameRepository;
import com.heroesoftimepoc.temporalengine.repository.HeroRepository;
import com.heroesoftimepoc.temporalengine.repository.PsiStateRepository;
import com.heroesoftimepoc.temporalengine.service.TemporalEngineService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test de stress temporel pour valider la gestion m√©moire et performance
 * avec plusieurs œà-states sur plusieurs tours.
 */
@SpringBootTest
@TestPropertySource(properties = {
    "spring.jpa.hibernate.ddl-auto=create-drop",
    "spring.datasource.url=jdbc:h2:mem:temporalstressdb",
    "logging.level.org.hibernate.SQL=INFO"
})
@Transactional
public class TemporalStressTest {
    
    @Autowired
    private TemporalEngineService temporalEngineService;
    
    @Autowired
    private GameRepository gameRepository;
    
    @Autowired
    private HeroRepository heroRepository;
    
    @Autowired
    private PsiStateRepository psiStateRepository;
    
    private Game testGame;
    private Hero arthur;
    private Hero ragnar;
    private Hero merlin;
    private Hero lancelot;
    
    @BeforeEach
    public void setup() {
        // Cr√©er un jeu de test
        testGame = new Game("Temporal Stress Test");
        testGame.addPlayer("Player1");
        testGame.addPlayer("Player2");
        gameRepository.save(testGame);
        
        // Cr√©er 4 h√©ros pour le test
        arthur = new Hero("Arthur", 10, 10);
        arthur.setGame(testGame);
        arthur.setPlayerId("Player1");
        heroRepository.save(arthur);
        
        ragnar = new Hero("Ragnar", 15, 15);
        ragnar.setGame(testGame);
        ragnar.setPlayerId("Player1");
        heroRepository.save(ragnar);
        
        merlin = new Hero("Merlin", 20, 20);
        merlin.setGame(testGame);
        merlin.setPlayerId("Player2");
        heroRepository.save(merlin);
        
        lancelot = new Hero("Lancelot", 25, 25);
        lancelot.setGame(testGame);
        lancelot.setPlayerId("Player2");
        heroRepository.save(lancelot);
    }
    
    @Test
    public void testTemporalStressWithMultipleParallelPsiStates() {
        System.out.println("\nüåÄ === TEST DE STRESS TEMPOREL PARALL√àLE ===");
        
        // Phase 1: Cr√©er 4 œà-states parall√®les avec diff√©rents Œît
        System.out.println("\n‚ö° Phase 1: Cr√©ation de 4 œà-states parall√®les");
        
        String[] temporalScripts = {
            "œà101: ‚äô(Œît+1 @30,30 ‚ü∂ MOV(Arthur, @30,30))",
            "œà102: ‚äô(Œît+2 @35,35 ‚ü∂ CREATE(CREATURE, Dragon, @35,35))",
            "œà103: ‚äô(Œît+3 @40,40 ‚ü∂ BATTLE(Ragnar, Dragon))",
            "œà104: ‚äô(Œît+4 @45,45 ‚ü∂ CREATE(ITEM, TemporalSword, @45,45))"
        };
        
        for (String script : temporalScripts) {
            Map<String, Object> result = temporalEngineService.executeScript(testGame.getId(), script);
            assertTrue((Boolean) result.get("success"), 
                "Script failed: " + script + " - " + result.get("error"));
            System.out.println("‚úÖ " + script);
        }
        
        // V√©rifier que tous les œà-states sont cr√©√©s
        List<PsiState> activePsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.ACTIVE);
        assertEquals(4, activePsiStates.size(), "Tous les œà-states doivent √™tre actifs");
        
        // Phase 2: Simulation de plusieurs tours avec √©volution temporelle
        System.out.println("\n‚è∞ Phase 2: Simulation de 5 tours avec √©volution temporelle");
        
        for (int turn = 1; turn <= 5; turn++) {
            System.out.printf("üéØ Tour %d - Avant: %d œà-states actifs%n", 
                turn, psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.ACTIVE).size());
            
            // Avancer le tour (nextTurn ne retourne pas de success)
            Map<String, Object> turnResult = temporalEngineService.nextTurn(testGame.getId());
            assertNotNull(turnResult, "Next turn should return a result");
            assertNotNull(turnResult.get("currentTurn"), "Current turn should be present");
            
            // V√©rifier l'√©tat apr√®s le tour
            activePsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.ACTIVE);
            List<PsiState> collapsedPsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.COLLAPSED);
            
            System.out.printf("üìä Tour %d - Apr√®s: %d actifs, %d effondr√©s%n", 
                turn, activePsiStates.size(), collapsedPsiStates.size());
            
            // V√©rifier la progression g√©n√©rale
            assertTrue(activePsiStates.size() + collapsedPsiStates.size() >= 4, 
                "Le nombre total de œà-states doit √™tre conserv√©");
        }
        
        // Phase 3: Test d'effondrements manuels
        System.out.println("\nüí• Phase 3: Test d'effondrements manuels");
        
        // Forcer l'effondrement des œà-states restants
        List<PsiState> remainingPsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.ACTIVE);
        System.out.printf("üîç %d œà-states restants √† effondrer%n", remainingPsiStates.size());
        
        for (PsiState psiState : remainingPsiStates) {
            String collapseScript = "‚Ä†" + psiState.getPsiId();
            Map<String, Object> result = temporalEngineService.executeScript(testGame.getId(), collapseScript);
            assertTrue((Boolean) result.get("success"), 
                "Collapse failed: " + collapseScript);
            System.out.println("üí• " + collapseScript + " - " + result.get("message"));
        }
        
        // V√©rifier que tous les œà-states sont maintenant effondr√©s
        activePsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.ACTIVE);
        assertEquals(0, activePsiStates.size(), "Tous les œà-states doivent √™tre effondr√©s");
        
        System.out.println("\nüéâ TEST DE STRESS TEMPOREL R√âUSSI !");
    }
    
    @Test
    public void testMemoryUsageWithManyPsiStates() {
        System.out.println("\nüß† === TEST M√âMOIRE AVEC NOMBREUX œà-STATES ===");
        
        // Mesurer la m√©moire avant
        Runtime runtime = Runtime.getRuntime();
        long memoryBefore = runtime.totalMemory() - runtime.freeMemory();
        System.out.printf("üìä M√©moire avant: %.2f MB%n", memoryBefore / (1024.0 * 1024.0));
        
        // Cr√©er 50 œà-states avec des param√®tres al√©atoires
        System.out.println("\n‚ö° Cr√©ation de 50 œà-states al√©atoires");
        
        for (int i = 201; i <= 250; i++) {
            int x = ThreadLocalRandom.current().nextInt(10, 100);
            int y = ThreadLocalRandom.current().nextInt(10, 100);
            int deltaT = ThreadLocalRandom.current().nextInt(1, 10);
            
            String script = String.format("œà%03d: ‚äô(Œît+%d @%d,%d ‚ü∂ MOV(Arthur, @%d,%d))", 
                i, deltaT, x, y, x, y);
            
            Map<String, Object> result = temporalEngineService.executeScript(testGame.getId(), script);
            assertTrue((Boolean) result.get("success"), 
                "Script failed: " + script);
            
            if ((i - 200) % 10 == 0) {
                System.out.printf("‚úÖ %d œà-states cr√©√©s%n", i - 200);
            }
        }
        
        // Mesurer la m√©moire apr√®s cr√©ation
        System.gc(); // Forcer garbage collection
        long memoryAfterCreation = runtime.totalMemory() - runtime.freeMemory();
        System.out.printf("üìä M√©moire apr√®s cr√©ation: %.2f MB%n", memoryAfterCreation / (1024.0 * 1024.0));
        System.out.printf("üìà Augmentation: %.2f MB%n", (memoryAfterCreation - memoryBefore) / (1024.0 * 1024.0));
        
        // V√©rifier le nombre de œà-states
        List<PsiState> allPsiStates = psiStateRepository.findByGameId(testGame.getId());
        assertEquals(50, allPsiStates.size(), "50 œà-states doivent √™tre cr√©√©s");
        
        // Simuler 10 tours pour voir l'√©volution
        System.out.println("\n‚è∞ Simulation de 10 tours");
        
        for (int turn = 1; turn <= 10; turn++) {
            Map<String, Object> turnResult = temporalEngineService.nextTurn(testGame.getId());
            assertNotNull(turnResult, "Next turn should return a result");
            
            List<PsiState> activePsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.ACTIVE);
            List<PsiState> collapsedPsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.COLLAPSED);
            
            System.out.printf("üéØ Tour %d: %d actifs, %d effondr√©s%n", 
                turn, activePsiStates.size(), collapsedPsiStates.size());
        }
        
        // Mesurer la m√©moire finale
        System.gc(); // Forcer garbage collection
        long memoryAfterSimulation = runtime.totalMemory() - runtime.freeMemory();
        System.out.printf("üìä M√©moire apr√®s simulation: %.2f MB%n", memoryAfterSimulation / (1024.0 * 1024.0));
        
        // V√©rifier que la m√©moire reste raisonnable
        double memoryIncreaseMB = (memoryAfterSimulation - memoryBefore) / (1024.0 * 1024.0);
        assertTrue(memoryIncreaseMB < 50.0, 
            String.format("Utilisation m√©moire trop √©lev√©e: %.2f MB", memoryIncreaseMB));
        
        System.out.println("\nüéâ TEST M√âMOIRE R√âUSSI !");
    }
    
    @Test
    public void testPerformanceWithConcurrentPsiStates() {
        System.out.println("\nüöÄ === TEST PERFORMANCE CONCURRENT ===");
        
        // Test de performance avec cr√©ation et effondrement simultan√©s
        long startTime = System.currentTimeMillis();
        
        // Cr√©er 20 œà-states
        for (int i = 301; i <= 320; i++) {
            String script = String.format("œà%03d: ‚äô(Œît+%d @%d,%d ‚ü∂ MOV(Arthur, @%d,%d))", 
                i, i % 5 + 1, i * 2, i * 3, i * 2, i * 3);
            
            Map<String, Object> result = temporalEngineService.executeScript(testGame.getId(), script);
            assertTrue((Boolean) result.get("success"), "Script creation failed");
        }
        
        long creationTime = System.currentTimeMillis() - startTime;
        System.out.printf("‚ö° Cr√©ation de 20 œà-states: %d ms%n", creationTime);
        
        // Simuler 5 tours
        startTime = System.currentTimeMillis();
        for (int turn = 1; turn <= 5; turn++) {
            Map<String, Object> turnResult = temporalEngineService.nextTurn(testGame.getId());
            assertNotNull(turnResult, "Next turn should return a result");
            assertNotNull(turnResult.get("currentTurn"), "Current turn should be present");
        }
        long simulationTime = System.currentTimeMillis() - startTime;
        System.out.printf("‚è∞ Simulation de 5 tours: %d ms%n", simulationTime);
        
        // Effondrement de tous les œà-states restants
        startTime = System.currentTimeMillis();
        List<PsiState> remainingPsiStates = psiStateRepository.findByGameIdAndStatus(testGame.getId(), PsiState.PsiStatus.ACTIVE);
        for (PsiState psiState : remainingPsiStates) {
            String collapseScript = "‚Ä†" + psiState.getPsiId();
            Map<String, Object> result = temporalEngineService.executeScript(testGame.getId(), collapseScript);
            assertTrue((Boolean) result.get("success"), "Collapse failed");
        }
        long collapseTime = System.currentTimeMillis() - startTime;
        System.out.printf("üí• Effondrement de %d œà-states: %d ms%n", remainingPsiStates.size(), collapseTime);
        
        // V√©rifier les performances
        assertTrue(creationTime < 1000, "Cr√©ation trop lente: " + creationTime + "ms");
        assertTrue(simulationTime < 2000, "Simulation trop lente: " + simulationTime + "ms");
        assertTrue(collapseTime < 1000, "Effondrement trop lent: " + collapseTime + "ms");
        
        System.out.println("\nüéâ TEST PERFORMANCE R√âUSSI !");
    }
    
    @Test
    public void testCompatibilityBetweenParsers() {
        System.out.println("\nüîÑ === TEST COMPATIBILIT√â PARSERS ===");
        
        // Tester les m√™mes scripts avec les deux parsers
        String[] testScripts = {
            "œà401: ‚äô(Œît+1 @10,10 ‚ü∂ MOV(Arthur, @10,10))",
            "œà402: ‚äô(Œît+2 @20,20 ‚ü∂ CREATE(CREATURE, Dragon, @20,20))",
            "‚Ä†œà401",
            "‚Ä†œà402"
        };
        
        // Test avec parser REGEX
        System.out.println("\nüî§ Test avec parser REGEX");
        
        for (String script : testScripts) {
            Map<String, Object> result = temporalEngineService.executeScript(testGame.getId(), script);
            Boolean success = (Boolean) result.get("success");
            System.out.printf("REGEX - %s: %s%n", script, success ? "‚úÖ" : "‚ùå");
        }
        
        System.out.println("\nüéâ TEST COMPATIBILIT√â TERMIN√â !");
    }
} 