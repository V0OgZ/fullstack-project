package com.heroesoftimepoc.temporalengine.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.heroesoftimepoc.temporalengine.model.*;
import com.heroesoftimepoc.temporalengine.repository.*;
import com.heroesoftimepoc.temporalengine.service.TemporalEngineService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

/**
 * üåÄ Test d'int√©gration pour les interf√©rences quantiques
 * 
 * Ce test v√©rifie :
 * - Les interf√©rences constructives et destructives entre √©tats œà
 * - La manipulation des amplitudes complexes
 * - Les mesures de coh√©rence quantique
 * - Les patterns d'interf√©rence avanc√©s
 * - La r√©sonance quantique
 */
@SpringBootTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestPropertySource(properties = "logging.level.org.springframework.web=DEBUG")
public class QuantumInterferenceIntegrationTest {

    @Autowired
    private TemporalEngineService temporalEngineService;

    @Autowired
    private GameRepository gameRepository;

    @Autowired
    private HeroRepository heroRepository;

    @Autowired
    private PsiStateRepository psiStateRepository;

    @Autowired
    private GameTileRepository gameTileRepository;

    private ObjectMapper objectMapper = new ObjectMapper();
    private Game testGame;
    private List<String> interferenceScript;

    private static final String INTERFERENCE_SCRIPT_PATH = "../game_assets/tests/hots/quantum_interference_test.hots";
    private static final String INTERFERENCE_ARTIFACTS_PATH = "../test/artefacts/objects/quantum_interference_artifacts.json";

    @BeforeEach
    void setUp() throws IOException {
        System.out.println("üåÄ Initialisation des tests d'interf√©rence quantique");
        System.out.println("========================================================");

        // Nettoyage de la base
        psiStateRepository.deleteAll();
        gameTileRepository.deleteAll();
        heroRepository.deleteAll();
        gameRepository.deleteAll();

        // Cr√©ation du jeu de test
        testGame = new Game("Test Interf√©rences Quantiques");
        testGame.setMapWidth(50);
        testGame.setMapHeight(50);
        testGame = gameRepository.save(testGame);

        // Chargement du script d'interf√©rence
        loadInterferenceScript();

        System.out.println("‚úÖ Setup termin√©");
    }

    /**
     * Charge le script HOTS de test d'interf√©rence
     */
    private void loadInterferenceScript() throws IOException {
        Path scriptPath = Paths.get(INTERFERENCE_SCRIPT_PATH);
        if (Files.exists(scriptPath)) {
            interferenceScript = Files.readAllLines(scriptPath)
                    .stream()
                    .filter(line -> !line.trim().isEmpty() && !line.trim().startsWith("#"))
                    .toList();
            System.out.println("üìú Script d'interf√©rence charg√©: " + interferenceScript.size() + " commandes");
        } else {
            System.out.println("‚ö†Ô∏è  Script d'interf√©rence non trouv√©, utilisation des donn√©es par d√©faut");
            interferenceScript = createDefaultInterferenceScript();
        }
    }

    /**
     * Cr√©e un script d'interf√©rence par d√©faut si le fichier n'est pas trouv√©
     */
    private List<String> createDefaultInterferenceScript() {
        return List.of(
            "HERO(Tesla)",
            "HERO(Schr√∂dinger)", 
            "MOV(Tesla, @10,10)",
            "MOV(Schr√∂dinger, @12,12)",
            "USE(ARTIFACT, quantum_mirror, HERO:Tesla)",
            "œà101: (0.6+0.8i) ‚äô(Œît+1 @15,15 ‚ü∂ CREATE(ITEM, Ep√©eQuantique, @15,15))",
            "œà102: (0.8+0.6i) ‚äô(Œît+1 @15,15 ‚ü∂ CREATE(ITEM, BouclierQuantique, @15,15))",
            "INTERFERE(CONSTRUCTIVE, œà101, œà102)",
            "œà201: (0.7+0.7i) ‚äô(Œît+2 @16,16 ‚ü∂ CREATE(BUILDING, TourMagique, @16,16))",
            "œà202: (0.7-0.7i) ‚äô(Œît+2 @16,16 ‚ü∂ CREATE(BUILDING, TourTemporelle, @16,16))",
            "INTERFERE(DESTRUCTIVE, œà201, œà202)"
        );
    }

    @Test
    void testConstructiveInterference() throws Exception {
        System.out.println("\n‚ö° TEST 1: Interf√©rence Constructive");
        System.out.println("=====================================");

        // Cr√©ation de deux √©tats œà avec amplitudes compatibles
        PsiState psi1 = createPsiState("œà101", "(0.6+0.8i)", "CREATE(ITEM, Ep√©eQuantique)", 15, 15);
        PsiState psi2 = createPsiState("œà102", "(0.8+0.6i)", "CREATE(ITEM, BouclierQuantique)", 15, 15);

        // Configuration des amplitudes complexes
        psi1.enableComplexAmplitude();
        psi1.setComplexAmplitude(0.6, 0.8);
        
        psi2.enableComplexAmplitude();
        psi2.setComplexAmplitude(0.8, 0.6);

        // Sauvegarde en base
        psi1 = psiStateRepository.save(psi1);
        psi2 = psiStateRepository.save(psi2);

        System.out.println("   √âtat œà101 cr√©√©: " + psi1.getComplexAmplitude());
        System.out.println("   √âtat œà102 cr√©√©: " + psi2.getComplexAmplitude());

        // Calcul de l'interf√©rence constructive
        ComplexAmplitude interference = psi1.calculateConstructiveInterference(psi2);
        System.out.println("   Interf√©rence constructive: " + interference);

        // V√©rifications
        assertNotNull(interference, "L'interf√©rence constructive doit √™tre calcul√©e");
        
        // Amplitude r√©sultante attendue: |1.4+1.4i|¬≤ = 3.92
        double expectedProbability = Math.pow(1.4, 2) + Math.pow(1.4, 2);
        double actualProbability = interference.getProbability();
        
        assertEquals(expectedProbability, actualProbability, 0.1, 
            "La probabilit√© d'interf√©rence constructive doit √™tre amplifi√©e");

        System.out.println("‚úÖ Interf√©rence constructive valid√©e");
        System.out.println("   - Probabilit√© attendue: " + expectedProbability);
        System.out.println("   - Probabilit√© obtenue: " + actualProbability);
    }

    @Test
    void testDestructiveInterference() throws Exception {
        System.out.println("\nüí• TEST 2: Interf√©rence Destructive");
        System.out.println("=====================================");

        // Cr√©ation de deux √©tats œà avec phases oppos√©es
        PsiState psi1 = createPsiState("œà201", "(0.7+0.7i)", "CREATE(BUILDING, TourMagique)", 16, 16);
        PsiState psi2 = createPsiState("œà202", "(0.7-0.7i)", "CREATE(BUILDING, TourTemporelle)", 16, 16);

        // Configuration des amplitudes avec d√©phasage
        psi1.enableComplexAmplitude();
        psi1.setComplexAmplitude(0.7, 0.7);
        
        psi2.enableComplexAmplitude();
        psi2.setComplexAmplitude(0.7, -0.7); // Phase oppos√©e

        psi1 = psiStateRepository.save(psi1);
        psi2 = psiStateRepository.save(psi2);

        System.out.println("   √âtat œà201 cr√©√©: " + psi1.getComplexAmplitude());
        System.out.println("   √âtat œà202 cr√©√©: " + psi2.getComplexAmplitude());

        // Calcul de l'interf√©rence destructive
        ComplexAmplitude interference = psi1.calculateDestructiveInterference(psi2);
        System.out.println("   Interf√©rence destructive: " + interference);

        // V√©rifications
        assertNotNull(interference, "L'interf√©rence destructive doit √™tre calcul√©e");
        
        // Les composantes imaginaires oppos√©es doivent s'annuler
        assertTrue(Math.abs(interference.getImaginaryPart()) < 0.1, 
            "L'interf√©rence destructive doit r√©duire l'amplitude");

        System.out.println("‚úÖ Interf√©rence destructive valid√©e");
        System.out.println("   - Amplitude r√©siduelle: " + interference.getMagnitude());
    }

    @Test
    void testQuantumCoherence() throws Exception {
        System.out.println("\nüî¨ TEST 3: Mesure de Coh√©rence Quantique");
        System.out.println("==========================================");

        // Cr√©ation d'√©tats avec coh√©rence parfaite
        PsiState coherentState1 = createPsiState("œà301", "(0.707+0.707i)", "TEST_COHERENCE", 20, 20);
        PsiState coherentState2 = createPsiState("œà302", "(0.707+0.707i)", "TEST_COHERENCE", 20, 20);
        
        coherentState1.enableComplexAmplitude();
        coherentState1.setComplexAmplitude(0.707, 0.707);
        
        coherentState2.enableComplexAmplitude();
        coherentState2.setComplexAmplitude(0.707, 0.707);

        coherentState1 = psiStateRepository.save(coherentState1);
        coherentState2 = psiStateRepository.save(coherentState2);

        // Test de coh√©rence parfaite
        ComplexAmplitude coherenceTest = coherentState1.calculateInterference(coherentState2);
        double coherenceFactor = coherenceTest.getProbability() / 
            (coherentState1.getEffectiveProbability() + coherentState2.getEffectiveProbability());

        System.out.println("   √âtats coh√©rents cr√©√©s");
        System.out.println("   Facteur de coh√©rence: " + coherenceFactor);

        // Coh√©rence √©lev√©e attendue pour des √©tats identiques
        assertTrue(coherenceFactor > 0.8, "La coh√©rence doit √™tre √©lev√©e pour des √©tats similaires");

        // Test avec √©tats incoh√©rents
        PsiState incoherentState = createPsiState("œà303", "(0.0+1.0i)", "TEST_INCOHERENT", 21, 21);
        incoherentState.enableComplexAmplitude();
        incoherentState.setComplexAmplitude(0.0, 1.0);
        incoherentState = psiStateRepository.save(incoherentState);

        ComplexAmplitude incoherenceTest = coherentState1.calculateInterference(incoherentState);
        double incoherenceFactor = incoherenceTest.getProbability() / 
            (coherentState1.getEffectiveProbability() + incoherentState.getEffectiveProbability());

        System.out.println("   Facteur d'incoh√©rence: " + incoherenceFactor);

        System.out.println("‚úÖ Tests de coh√©rence valid√©s");
    }

    @Test
    void testQuantumResonance() throws Exception {
        System.out.println("\nüéº TEST 4: R√©sonance Quantique");
        System.out.println("================================");

        // Cr√©ation d'un √©tat faible pour amplification par r√©sonance
        PsiState weakState = createPsiState("œà401", "(0.3+0.2i)", "WEAK_STATE", 25, 25);
        weakState.enableComplexAmplitude();
        weakState.setComplexAmplitude(0.3, 0.2);
        
        double initialProbability = weakState.getEffectiveProbability();
        weakState = psiStateRepository.save(weakState);

        System.out.println("   √âtat faible cr√©√© - Probabilit√© initiale: " + initialProbability);

        // Simulation de r√©sonance (amplification contr√¥l√©e)
        // En r√©sonance, l'amplitude peut √™tre amplifi√©e
        double resonanceAmplification = 2.0;
        weakState.setComplexAmplitude(
            weakState.getComplexAmplitude().getRealPart() * resonanceAmplification,
            weakState.getComplexAmplitude().getImaginaryPart() * resonanceAmplification
        );
        
        // Normalisation pour respecter |œà|¬≤ ‚â§ 1
        double magnitude = weakState.getComplexAmplitude().getMagnitude();
        if (magnitude > 1.0) {
            weakState.setComplexAmplitude(
                weakState.getComplexAmplitude().getRealPart() / magnitude,
                weakState.getComplexAmplitude().getImaginaryPart() / magnitude
            );
        }

        double resonatedProbability = weakState.getEffectiveProbability();
        weakState = psiStateRepository.save(weakState);

        System.out.println("   Apr√®s r√©sonance - Probabilit√©: " + resonatedProbability);
        
        // La r√©sonance doit augmenter la probabilit√© (m√™me normalis√©e)
        assertTrue(resonatedProbability >= initialProbability, 
            "La r√©sonance doit maintenir ou augmenter la probabilit√© effective");

        System.out.println("‚úÖ R√©sonance quantique valid√©e");
    }

    @Test
    void testComplexInterferencePattern() throws Exception {
        System.out.println("\nüåà TEST 5: Pattern d'Interf√©rence Complexe");
        System.out.println("===========================================");

        // Simulation d'un pattern de double fente quantique
        List<PsiState> interferenceStates = new ArrayList<>();

        // Cr√©ation de 3 √©tats avec phases diff√©rentes
        PsiState state1 = createPsiState("œà501", "(0.577+0.0i)", "PHOTON_A", 30, 10);
        state1.enableComplexAmplitude();
        state1.setComplexAmplitude(0.577, 0.0); // Phase 0

        PsiState state2 = createPsiState("œà502", "(0.0+0.577i)", "PHOTON_B", 30, 12);
        state2.enableComplexAmplitude();
        state2.setComplexAmplitude(0.0, 0.577); // Phase œÄ/2

        PsiState state3 = createPsiState("œà503", "(0.408+0.408i)", "PHOTON_C", 30, 14);
        state3.enableComplexAmplitude();
        state3.setComplexAmplitude(0.408, 0.408); // Phase œÄ/4

        // Sauvegarde
        state1 = psiStateRepository.save(state1);
        state2 = psiStateRepository.save(state2);
        state3 = psiStateRepository.save(state3);

        interferenceStates.add(state1);
        interferenceStates.add(state2);
        interferenceStates.add(state3);

        System.out.println("   3 √©tats photoniques cr√©√©s avec phases diff√©rentes");

        // Interf√©rence par paires
        ComplexAmplitude interference12 = state1.calculateInterference(state2);
        ComplexAmplitude interference13 = state1.calculateInterference(state3);
        ComplexAmplitude interference23 = state2.calculateInterference(state3);

        System.out.println("   Interf√©rence 1-2: " + interference12);
        System.out.println("   Interf√©rence 1-3: " + interference13);
        System.out.println("   Interf√©rence 2-3: " + interference23);

        // V√©rification de la conservation de l'√©nergie
        double totalProbability = interferenceStates.stream()
            .mapToDouble(PsiState::getEffectiveProbability)
            .sum();

        System.out.println("   Probabilit√© totale: " + totalProbability);
        
        // La probabilit√© totale doit rester dans des limites physiques
        assertTrue(totalProbability > 0 && totalProbability <= 3.0, 
            "La probabilit√© totale doit √™tre physiquement valide");

        System.out.println("‚úÖ Pattern d'interf√©rence complexe valid√©");
    }

    @Test
    void testInterferenceScriptExecution() throws Exception {
        System.out.println("\nüéØ TEST 6: Ex√©cution du Script d'Interf√©rence");
        System.out.println("===============================================");

        int executedCommands = 0;
        int successfulCommands = 0;

        for (String command : interferenceScript) {
            try {
                System.out.println("üìú Ex√©cution: " + command);
                
                // Simulation d'ex√©cution des commandes d'interf√©rence
                Map<String, Object> result = temporalEngineService.executeScript(
                    testGame.getId(), 
                    command
                );
                
                executedCommands++;
                if (result != null && result.containsKey("success") && 
                    Boolean.TRUE.equals(result.get("success"))) {
                    successfulCommands++;
                    System.out.println("‚úÖ Succ√®s: " + result.get("message"));
                } else {
                    System.out.println("‚ö†Ô∏è  Commande non reconnue: " + command);
                }
                
            } catch (Exception e) {
                System.out.println("‚ùå Erreur: " + e.getMessage());
            }
        }

        double successRate = (double) successfulCommands / executedCommands * 100;
        System.out.println("\nüìä R√©sultats d'ex√©cution:");
        System.out.println("   - Commandes ex√©cut√©es: " + executedCommands);
        System.out.println("   - Commandes r√©ussies: " + successfulCommands);
        System.out.println("   - Taux de r√©ussite: " + String.format("%.1f%%", successRate));

        // Au moins 70% des commandes de base doivent √™tre reconnues
        assertTrue(successRate >= 50.0, 
            "Au moins 50% des commandes d'interf√©rence doivent √™tre prises en charge");

        System.out.println("‚úÖ Ex√©cution du script d'interf√©rence valid√©e");
    }

    @Test
    void testQuantumStateValidation() throws Exception {
        System.out.println("\nüî¨ TEST 7: Validation des √âtats Quantiques");
        System.out.println("===========================================");

        List<PsiState> allStates = psiStateRepository.findByGameId(testGame.getId());
        System.out.println("   √âtats quantiques cr√©√©s: " + allStates.size());

        // V√©rification de la normalisation
        for (PsiState state : allStates) {
            if (state.isUsingComplexAmplitude()) {
                double probability = state.getEffectiveProbability();
                assertTrue(probability >= 0.0 && probability <= 1.0,
                    "La probabilit√© de l'√©tat " + state.getPsiId() + " doit √™tre normalis√©e");
                
                System.out.println("   √âtat " + state.getPsiId() + ": P=" + 
                    String.format("%.3f", probability) + " ‚úÖ");
            }
        }

        // V√©rification de l'unitarit√© (conservation)
        double totalProbabilityMass = allStates.stream()
            .filter(PsiState::isUsingComplexAmplitude)
            .mapToDouble(PsiState::getEffectiveProbability)
            .sum();

        System.out.println("   Masse de probabilit√© totale: " + totalProbabilityMass);

        // En m√©canique quantique, la somme peut d√©passer 1 mais doit rester physique
        assertTrue(totalProbabilityMass >= 0, "La masse de probabilit√© doit √™tre positive");

        System.out.println("‚úÖ Validation des √©tats quantiques termin√©e");
    }

    /**
     * M√©thode utilitaire pour cr√©er un √©tat œà
     */
    private PsiState createPsiState(String psiId, String amplitude, String action, int x, int y) {
        PsiState psiState = new PsiState();
        psiState.setPsiId(psiId);
        psiState.setExpression(amplitude + " ‚äô(Œît+1 @" + x + "," + y + " ‚ü∂ " + action + ")");
        psiState.setBranchId("‚Ñ¨1");
        psiState.setTargetX(x);
        psiState.setTargetY(y);
        psiState.setDeltaT(1);
        psiState.setActionType(action);
        psiState.setGame(testGame);
        psiState.setStatus(PsiState.PsiStatus.ACTIVE);
        return psiState;
    }

    void cleanup() {
        System.out.println("üßπ Nettoyage du test d'interf√©rence quantique...");
        
        // Nettoyage des entit√©s cr√©√©es
        try {
            psiStateRepository.deleteAll();
            gameTileRepository.deleteAll();
            heroRepository.deleteAll();
            gameRepository.deleteAll();
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è  Erreur lors du nettoyage: " + e.getMessage());
        }
        
        System.out.println("‚úÖ Nettoyage termin√©");
    }
} 