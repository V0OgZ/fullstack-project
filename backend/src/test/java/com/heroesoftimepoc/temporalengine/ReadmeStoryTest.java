package com.heroesoftimepoc.temporalengine;

import com.heroesoftimepoc.temporalengine.model.*;
import com.heroesoftimepoc.temporalengine.repository.*;
import com.heroesoftimepoc.temporalengine.service.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test de l'histoire du README - L'≈íil de Wigner
 * V√©rifie que l'histoire √©pique racont√©e dans le README est bien impl√©ment√©e
 */
@SpringBootTest
@ActiveProfiles("test")
@Transactional
public class ReadmeStoryTest {
    
    @Autowired
    private GameRepository gameRepository;
    
    @Autowired
    private TemporalEngineService temporalEngine;
    
    private Game epicGame;
    
    @BeforeEach
    public void setUp() {
        // Cr√©er la partie √©pique
        epicGame = new Game();
        epicGame.setGameName("La Rencontre √âpique - ≈íil de Wigner");
        epicGame.setPlayers(java.util.Arrays.asList("Arthur", "Ennemi"));
        epicGame.setStatus(Game.GameStatus.ACTIVE);
        epicGame.setMapWidth(50);
        epicGame.setMapHeight(50);
        epicGame = gameRepository.save(epicGame);
    }
    
    @Test
    public void testActeI_MiseEnScene() {
        // "L'≈íil de Wigner scintille au sommet de la tour en ruines"
        
        // Cr√©er Arthur et Lysandrel
        Map<String, Object> result = temporalEngine.executeScript(epicGame.getId(), "HERO(Arthur)");
        assertTrue((Boolean) result.get("success"));
        
        result = temporalEngine.executeScript(epicGame.getId(), "HERO(Lysandrel)");
        assertTrue((Boolean) result.get("success"));
        
        // "Arthur s'approche prudemment"
        result = temporalEngine.executeScript(epicGame.getId(), "MOV(Arthur, @25,30)");
        assertTrue((Boolean) result.get("success"));
        
        // "Lysandrel crie depuis la vall√©e"
        result = temporalEngine.executeScript(epicGame.getId(), "MOV(Lysandrel, @25,10)");
        assertTrue((Boolean) result.get("success"));
        
        // Cr√©er l'≈íil de Wigner au sommet de la tour
        result = temporalEngine.executeScript(epicGame.getId(), "CREATE(ARTIFACT, wigner_eye, @25,35)");
        assertTrue((Boolean) result.get("success"));
        
        // V√©rifier les positions
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        Hero arthur = epicGame.getHeroByName("Arthur");
        Hero lysandrel = epicGame.getHeroByName("Lysandrel");
        
        assertEquals(25, arthur.getPositionX());
        assertEquals(30, arthur.getPositionY());
        assertEquals(25, lysandrel.getPositionX());
        assertEquals(10, lysandrel.getPositionY());
    }
    
    @Test
    public void testActeII_ArmeeEnnemie() {
        // "Mais Arthur voit l'arm√©e ennemie approcher"
        
        // Setup h√©ros
        temporalEngine.executeScript(epicGame.getId(), "HERO(Arthur)");
        temporalEngine.executeScript(epicGame.getId(), "HERO(Lysandrel)");
        
        // Cr√©er l'arm√©e ennemie
        temporalEngine.executeScript(epicGame.getId(), "HERO(Ragnar)");
        temporalEngine.executeScript(epicGame.getId(), "HERO(EnemySoldier1)");
        temporalEngine.executeScript(epicGame.getId(), "HERO(EnemySoldier2)");
        temporalEngine.executeScript(epicGame.getId(), "HERO(EnemySoldier3)");
        
        // Positionner l'arm√©e
        temporalEngine.executeScript(epicGame.getId(), "MOV(Ragnar, @20,5)");
        temporalEngine.executeScript(epicGame.getId(), "MOV(EnemySoldier1, @21,6)");
        temporalEngine.executeScript(epicGame.getId(), "MOV(EnemySoldier2, @22,7)");
        temporalEngine.executeScript(epicGame.getId(), "MOV(EnemySoldier3, @23,8)");
        
        // V√©rifier qu'on a bien 6 h√©ros (2 alli√©s + 4 ennemis)
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        assertEquals(6, epicGame.getHeroes().size());
        
        // V√©rifier que l'arm√©e ennemie est bien positionn√©e
        Hero ragnar = epicGame.getHeroByName("Ragnar");
        assertNotNull(ragnar);
        assertEquals(20, ragnar.getPositionX());
        assertEquals(5, ragnar.getPositionY());
    }
    
    @Test
    public void testActeIII_OptionsQuantiques() {
        // "Arthur contemple ses actions futures en superposition"
        
        temporalEngine.executeScript(epicGame.getId(), "HERO(Arthur)");
        
        // Option 1: Saisir l'≈íil (haute probabilit√©)
        Map<String, Object> result = temporalEngine.executeScript(epicGame.getId(), 
            "œà001: (0.8+0.2i) ‚äô(Œît+2 @25,35 ‚ü∂ USE(ARTIFACT, wigner_eye, HERO:Arthur))");
        assertTrue((Boolean) result.get("success"));
        
        // Option 2: Combattre (probabilit√© moyenne)
        result = temporalEngine.executeScript(epicGame.getId(), 
            "œà002: (0.6+0.4i) ‚äô(Œît+3 @22,8 ‚ü∂ BATTLE(Arthur, Ragnar))");
        assertTrue((Boolean) result.get("success"));
        
        // Option 3: Sort de protection (probabilit√© moyenne)
        result = temporalEngine.executeScript(epicGame.getId(), 
            "œà003: (0.7+0.3i) ‚äô(Œît+1 @25,15 ‚ü∂ CAST(SPELL, temporal_shield, HERO:Lysandrel))");
        assertTrue((Boolean) result.get("success"));
        
        // V√©rifier qu'on a bien 3 √©tats quantiques
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        List<PsiState> activeStates = epicGame.getActivePsiStates();
        assertEquals(3, activeStates.size());
        
        // V√©rifier les probabilit√©s
        PsiState psi001 = activeStates.stream()
            .filter(psi -> psi.getPsiId().equals("œà001"))
            .findFirst().orElseThrow();
        
        assertTrue(psi001.isUsingComplexAmplitude());
        assertEquals(0.8, psi001.getComplexAmplitude().getRealPart(), 0.01);
        assertEquals(0.2, psi001.getComplexAmplitude().getImaginaryPart(), 0.01);
        
        // |0.8+0.2i|¬≤ = 0.64 + 0.04 = 0.68
        assertEquals(0.68, psi001.getComplexAmplitude().getProbability(), 0.01);
    }
    
    @Test
    public void testActeIV_DecisionFatidique() {
        // "Il n'a qu'un choix : saisir l'≈íil et forcer le collapse causal"
        
        // Setup complet
        temporalEngine.executeScript(epicGame.getId(), "HERO(Arthur)");
        temporalEngine.executeScript(epicGame.getId(), "MOV(Arthur, @25,30)");
        
        // Arthur se d√©place vers l'≈íil
        Map<String, Object> result = temporalEngine.executeScript(epicGame.getId(), "MOV(Arthur, @25,35)");
        assertTrue((Boolean) result.get("success"));
        
        // Arthur prend l'≈íil de Wigner
        result = temporalEngine.executeScript(epicGame.getId(), "CREATE(ARTIFACT, wigner_eye, HERO:Arthur)");
        assertTrue((Boolean) result.get("success"));
        
        // V√©rifier qu'Arthur poss√®de l'≈íil
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        Hero arthur = epicGame.getHeroByName("Arthur");
        assertTrue(arthur.hasItem("wigner_eye"));
        assertEquals(25, arthur.getPositionX());
        assertEquals(35, arthur.getPositionY());
    }
    
    @Test
    public void testActeV_CollapseCausal() {
        // "üí• ARTHUR FORCE LE COLLAPSE CAUSAL ! üí•"
        
        // Setup avec √©tats quantiques
        temporalEngine.executeScript(epicGame.getId(), "HERO(Arthur)");
        temporalEngine.executeScript(epicGame.getId(), 
            "œà001: (0.8+0.2i) ‚äô(Œît+2 @25,35 ‚ü∂ USE(ARTIFACT, wigner_eye, HERO:Arthur))");
        temporalEngine.executeScript(epicGame.getId(), 
            "œà002: (0.6+0.4i) ‚äô(Œît+3 @22,8 ‚ü∂ BATTLE(Arthur, Ragnar))");
        
        // V√©rifier qu'on a des √©tats actifs
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        assertEquals(2, epicGame.getActivePsiStates().size());
        
        // Forcer le collapse avec le symbole ‚Ä†
        Map<String, Object> result = temporalEngine.executeScript(epicGame.getId(), "‚Ä†œà001");
        assertTrue((Boolean) result.get("success"));
        
        result = temporalEngine.executeScript(epicGame.getId(), "‚Ä†œà002");
        assertTrue((Boolean) result.get("success"));
        
        // V√©rifier que les √©tats sont effondr√©s
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        List<PsiState> collapsedStates = epicGame.getPsiStates().stream()
            .filter(psi -> psi.getStatus() == PsiState.PsiStatus.COLLAPSED)
            .toList();
        
        assertEquals(2, collapsedStates.size());
        assertEquals(0, epicGame.getActivePsiStates().size());
    }
    
    @Test
    public void testMecaniquesCompletes() {
        // Test complet de toutes les m√©caniques mentionn√©es dans le README
        
        // "üìú Advanced Script Language"
        // Unicode Symbols: œà, ‚Ä†, ‚äô
        Map<String, Object> result = temporalEngine.executeScript(epicGame.getId(), 
            "œàTEST: (0.5+0.5i) ‚äô(Œît+1 @10,10 ‚ü∂ CREATE(ITEM, test, @10,10))");
        assertTrue((Boolean) result.get("success"));
        
        result = temporalEngine.executeScript(epicGame.getId(), "‚Ä†œàTEST");
        assertTrue((Boolean) result.get("success"));
        
        // "5D Coordinates: Navigate space (x,y,z) and time (timeline, temporal layer)"
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        PsiState testState = epicGame.getPsiStates().stream()
            .filter(psi -> psi.getPsiId().equals("œàTEST"))
            .findFirst().orElseThrow();
        
        // V√©rifier les coordonn√©es spatiales
        assertEquals(10, testState.getTargetX());
        assertEquals(10, testState.getTargetY());
        
        // V√©rifier la couche temporelle (Œît)
        assertEquals(1, testState.getDeltaT());
        
        // "Probability System: Actions have success chances"
        assertTrue(testState.isUsingComplexAmplitude());
        double probability = testState.getComplexAmplitude().getProbability();
        assertTrue(probability > 0 && probability <= 1);
    }
    
    @Test
    public void testDeviseDuJeu() {
        // "Ma√Ætrisez le temps, dominez l'espace, conqu√©rez l'√©ternit√©"
        
        // MA√éTRISER LE TEMPS - Cr√©er des actions futures
        temporalEngine.executeScript(epicGame.getId(), "HERO(Arthur)");
        Map<String, Object> result = temporalEngine.executeScript(epicGame.getId(), 
            "œàFUTUR: (0.9+0.1i) ‚äô(Œît+5 @40,40 ‚ü∂ MOV(Arthur, @40,40))");
        assertTrue((Boolean) result.get("success"));
        
        // DOMINER L'ESPACE - Se d√©placer librement
        result = temporalEngine.executeScript(epicGame.getId(), "MOV(Arthur, @10,10)");
        assertTrue((Boolean) result.get("success"));
        
        result = temporalEngine.executeScript(epicGame.getId(), "MOV(Arthur, @45,45)");
        assertTrue((Boolean) result.get("success"));
        
        // CONQU√âRIR L'√âTERNIT√â - Manipuler les √©tats quantiques
        result = temporalEngine.executeScript(epicGame.getId(), "‚Ä†œàFUTUR");
        assertTrue((Boolean) result.get("success"));
        
        epicGame = gameRepository.findById(epicGame.getId()).orElseThrow();
        
        // Arthur a voyag√© dans l'espace
        Hero arthur = epicGame.getHeroByName("Arthur");
        assertNotNull(arthur);
        
        // Les √©tats quantiques ont √©t√© manipul√©s
        assertTrue(epicGame.getPsiStates().size() > 0);
        
        // Le temps a √©t√© ma√Ætris√© (√©tats avec Œît)
        boolean hasTemporalStates = epicGame.getPsiStates().stream()
            .anyMatch(psi -> psi.getDeltaT() != null && psi.getDeltaT() > 0);
        assertTrue(hasTemporalStates);
    }
} 