package com.example.demo.controller;

import com.example.demo.model.Scenario;
import com.example.demo.service.ScenarioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Optional;
import java.util.ArrayList;

/**
 * üéÆ SCENARIO CONTROLLER - SYST√àME UNIFI√â
 * =======================================
 * @deprecated Potentiellement non utilis√© par frontend actuel (port 8000)
 * 
 * Controller avec syst√®me i18n complet (EN/FR/RU) mais traductions hardcod√©es.
 * G√®re sc√©narios pr√©d√©finis et localisation compl√®te.
 * 
 * STATUS: SUSPECT - Pas d'utilisation d√©tect√©e dans frontend simple
 * UTILISATION: Frontend port 3000 React uniquement ?
 * POTENTIEL: Syst√®me de sc√©narios multilingue complet
 * LOCALISATION: Traductions hardcod√©es EN/FR/RU (400+ lignes)
 * 
 * JEAN: "V√âRIFIER SI UTILIS√â - SYST√àME I18N COMPLEXE MAIS PEUT-√äTRE INUTILE"
 */
@Deprecated
@RestController
@RequestMapping("/api/scenarios")
@CrossOrigin(origins = "http://localhost:3000")
public class ScenarioController {

    @Autowired
    private ScenarioService scenarioService;

    @PostMapping("/predefined/conquest-classic")
    public ResponseEntity<Scenario> getOrCreateConquestClassicScenario() {
        try {
            // D'abord essayer de r√©cup√©rer le sc√©nario existant
            Optional<Scenario> existing = scenarioService.getScenarioById("conquest-classic");
            if (existing.isPresent()) {
                System.out.println("‚úÖ Sc√©nario classique trouv√© en base");
                return ResponseEntity.ok(existing.get());
            }
            
            System.out.println("üî® Cr√©ation du sc√©nario classique...");
            // Si pas trouv√©, essayer de le cr√©er
            Scenario scenario = scenarioService.createConquestClassicScenario();
            return ResponseEntity.ok(scenario);
            
        } catch (DataIntegrityViolationException e) {
            System.out.println("‚ö†Ô∏è Contrainte d'unicit√© - sc√©nario existe d√©j√†, on le r√©cup√®re");
            // Si erreur de contrainte d'unicit√©, c'est que le sc√©nario existe d√©j√†
            Optional<Scenario> existing = scenarioService.getScenarioById("conquest-classic");
            if (existing.isPresent()) {
                return ResponseEntity.ok(existing.get());
            }
            
            // Si on ne le trouve toujours pas, il y a un probl√®me
            System.out.println("‚ùå Erreur: sc√©nario pas trouv√© malgr√© contrainte d'unicit√©");
            return ResponseEntity.status(500).build();
            
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la cr√©ation du sc√©nario classique: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }

    @PostMapping("/predefined/temporal-rift")
    public ResponseEntity<Scenario> getOrCreateTemporalRiftScenario() {
        try {
            // D'abord essayer de r√©cup√©rer le sc√©nario existant
            Optional<Scenario> existing = scenarioService.getScenarioById("temporal-rift");
            if (existing.isPresent()) {
                System.out.println("‚úÖ Sc√©nario temporel trouv√© en base");
                return ResponseEntity.ok(existing.get());
            }
            
            System.out.println("üî® Cr√©ation du sc√©nario temporel...");
            // Si pas trouv√©, essayer de le cr√©er
            Scenario scenario = scenarioService.createTemporalRiftScenario();
            return ResponseEntity.ok(scenario);
            
        } catch (DataIntegrityViolationException e) {
            System.out.println("‚ö†Ô∏è Contrainte d'unicit√© - sc√©nario existe d√©j√†, on le r√©cup√®re");
            // Si erreur de contrainte d'unicit√©, c'est que le sc√©nario existe d√©j√†
            Optional<Scenario> existing = scenarioService.getScenarioById("temporal-rift");
            if (existing.isPresent()) {
                return ResponseEntity.ok(existing.get());
            }
            
            // Si on ne le trouve toujours pas, il y a un probl√®me
            System.out.println("‚ùå Erreur: sc√©nario pas trouv√© malgr√© contrainte d'unicit√©");
            return ResponseEntity.status(500).build();
            
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la cr√©ation du sc√©nario temporel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }

    @PostMapping("/fix-multiplayer-fields")
    public ResponseEntity<String> fixMultiplayerFields() {
        try {
            scenarioService.fixAllMultiplayerFields();
            return ResponseEntity.ok("‚úÖ Fixed isMultiplayer fields for all scenarios");
        } catch (Exception e) {
            System.out.println("‚ùå Error fixing multiplayer fields: " + e.getMessage());
            return ResponseEntity.status(500).body("Error fixing multiplayer fields: " + e.getMessage());
        }
    }

    @PostMapping("/debug-multiplayer")
    public ResponseEntity<String> debugMultiplayerFields() {
        try {
            List<Scenario> scenarios = scenarioService.getAllScenarios();
            StringBuilder debug = new StringBuilder("üîç Debug info:\n");
            
            for (Scenario scenario : scenarios) {
                debug.append("- ").append(scenario.getScenarioId())
                     .append(": maxPlayers=").append(scenario.getMaxPlayers())
                     .append(", isMultiplayer=").append(scenario.getIsMultiplayer())
                     .append("\n");
                     
                // Force set isMultiplayer based on maxPlayers
                scenario.setIsMultiplayer(scenario.getMaxPlayers() > 1);
                scenarioService.updateScenario(scenario);
                
                debug.append("  ‚Üí Updated to: isMultiplayer=").append(scenario.getIsMultiplayer()).append("\n");
            }
            
            return ResponseEntity.ok(debug.toString());
        } catch (Exception e) {
            System.out.println("‚ùå Error debugging multiplayer fields: " + e.getMessage());
            return ResponseEntity.status(500).body("Error debugging: " + e.getMessage());
        }
    }

    @GetMapping("/languages")
    public ResponseEntity<?> getAvailableLanguages() {
        try {
            List<Scenario> scenarios = scenarioService.getAllScenarios();
            Map<String, Map<String, String>> translations = getTranslations();
            
            Map<String, Object> result = new HashMap<>();
            
            for (String language : translations.keySet()) {
                boolean allScenariosTranslated = true;
                List<String> missingScenarios = new ArrayList<>();
                
                for (Scenario scenario : scenarios) {
                    String nameKey = "scenarios." + scenario.getScenarioId() + ".name";
                    String descKey = "scenarios." + scenario.getScenarioId() + ".description";
                    
                    if (!translations.get(language).containsKey(nameKey) || 
                        !translations.get(language).containsKey(descKey)) {
                        allScenariosTranslated = false;
                        missingScenarios.add(scenario.getScenarioId());
                    }
                }
                
                Map<String, Object> langInfo = new HashMap<>();
                langInfo.put("available", allScenariosTranslated);
                langInfo.put("missingScenarios", missingScenarios);
                langInfo.put("totalScenarios", scenarios.size());
                langInfo.put("translatedScenarios", scenarios.size() - missingScenarios.size());
                
                result.put(language, langInfo);
            }
            
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            System.out.println("‚ùå Error checking available languages: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }

    @GetMapping("/all")
    public ResponseEntity<?> getAllScenarios(@RequestParam(value = "lang", defaultValue = "en") String language) {
        try {
            List<Scenario> scenarios = scenarioService.getAllScenarios();
            List<Map<String, Object>> localizedScenarios = scenarios.stream()
                .map(scenario -> localizeScenario(scenario, language))
                .collect(java.util.stream.Collectors.toList());
            
            return ResponseEntity.ok(localizedScenarios);
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la r√©cup√©ration des sc√©narios: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }

    private Map<String, Object> localizeScenario(Scenario scenario, String language) {
        Map<String, Object> localized = new HashMap<>();
        
        // Copy all basic properties
        localized.put("id", scenario.getId());
        localized.put("scenarioId", scenario.getScenarioId());
        localized.put("difficulty", scenario.getDifficulty());
        localized.put("maxPlayers", scenario.getMaxPlayers());
        localized.put("recommendedPlayers", scenario.getRecommendedPlayers());
        localized.put("mapSize", scenario.getMapSize());
        localized.put("mapWidth", scenario.getMapWidth());
        localized.put("mapHeight", scenario.getMapHeight());
        localized.put("turnLimit", scenario.getTurnLimit());
        localized.put("timeLimit", scenario.getTimeLimit());
        localized.put("victoryCondition", scenario.getVictoryCondition());
        localized.put("victoryRequirement", getLocalizedText("victory." + scenario.getScenarioId(), language));
        localized.put("defeatCondition", getLocalizedText("defeat." + scenario.getScenarioId(), language));
        localized.put("createdAt", scenario.getCreatedAt());
        localized.put("updatedAt", scenario.getUpdatedAt());
        localized.put("isActive", scenario.getIsActive());
        localized.put("isCampaign", scenario.getIsCampaign());
        localized.put("isMultiplayer", scenario.getIsMultiplayer());
        localized.put("campaignOrder", scenario.getCampaignOrder());
        localized.put("previousScenarioId", scenario.getPreviousScenarioId());
        localized.put("nextScenarioId", scenario.getNextScenarioId());
        
        // Localize name and description
        localized.put("name", getLocalizedText("scenarios." + scenario.getScenarioId() + ".name", language));
        localized.put("description", getLocalizedText("scenarios." + scenario.getScenarioId() + ".description", language));
        
        // Localize objectives
        List<Map<String, Object>> localizedObjectives = scenario.getObjectives().stream()
            .map(objective -> localizeObjective(objective, scenario.getScenarioId(), language))
            .collect(java.util.stream.Collectors.toList());
        localized.put("objectives", localizedObjectives);
        
        // Copy other properties as-is
        localized.put("startingPositions", scenario.getStartingPositions());
        
        // Localize events
        List<Map<String, Object>> localizedEvents = scenario.getEvents().stream()
            .map(event -> localizeEvent(event, language))
            .collect(java.util.stream.Collectors.toList());
        localized.put("events", localizedEvents);
        
        localized.put("terrainDistribution", scenario.getTerrainDistribution());
        localized.put("startingResources", scenario.getStartingResources());
        localized.put("neutralCreatures", scenario.getNeutralCreatures());
        localized.put("artifacts", scenario.getArtifacts());
        localized.put("specialBuildings", scenario.getSpecialBuildings());
        
        return localized;
    }

    private Map<String, Object> localizeObjective(Scenario.ScenarioObjective objective, String scenarioId, String language) {
        Map<String, Object> localized = new HashMap<>();
        
        localized.put("objectiveId", objective.getObjectiveId());
        localized.put("objectiveType", objective.getObjectiveType());
        localized.put("objectiveTitle", getLocalizedText("objectives." + scenarioId + "." + objective.getObjectiveId() + ".title", language));
        localized.put("objectiveDescription", getLocalizedText("objectives." + scenarioId + "." + objective.getObjectiveId() + ".description", language));
        localized.put("targetValue", objective.getTargetValue());
        localized.put("currentValue", objective.getCurrentValue());
        localized.put("isRequired", objective.getIsRequired());
        localized.put("isCompleted", objective.getIsCompleted());
        localized.put("completionReward", objective.getCompletionReward());
        
        return localized;
    }

    private Map<String, Object> localizeEvent(Scenario.ScenarioEvent event, String language) {
        Map<String, Object> localized = new HashMap<>();
        localized.put("eventId", event.getEventId());
        localized.put("eventType", event.getEventType());
        localized.put("triggerCondition", event.getTriggerCondition());
        localized.put("triggerTurn", event.getTriggerTurn());
        localized.put("eventTitle", getLocalizedText(event.getEventTitle(), language));
        localized.put("eventDescription", getLocalizedText(event.getEventDescription(), language));
        localized.put("eventEffect", event.getEventEffect());
        localized.put("isTriggered", event.getIsTriggered());
        localized.put("isRepeatable", event.getIsRepeatable());
        return localized;
    }

    private String getLocalizedText(String key, String language) {
        // This is a simple implementation - in a real app you'd use a proper i18n library
        Map<String, Map<String, String>> translations = getTranslations();
        
        // Try the requested language first
        if (translations.containsKey(language) && translations.get(language).containsKey(key)) {
            return translations.get(language).get(key);
        }
        
        // Fallback to English
        if (translations.containsKey("en") && translations.get("en").containsKey(key)) {
            return translations.get("en").get(key);
        }
        
        // If all else fails, return the key (for debugging)
        return key;
    }

    private Map<String, Map<String, String>> getTranslations() {
        Map<String, Map<String, String>> translations = new HashMap<>();
        
        // English translations
        Map<String, String> en = new HashMap<>();
        en.put("scenarios.conquest-classic.name", "Classic Conquest");
        en.put("scenarios.conquest-classic.description", "A traditional conquest scenario where players must eliminate all enemies or capture their main towns.");
        en.put("scenarios.temporal-rift.name", "The Temporal Rift");
        en.put("scenarios.temporal-rift.description", "A mysterious rift in time threatens to tear reality apart. Heroes must navigate through temporal zones to restore balance.");
        en.put("scenarios.multiplayer-arena.name", "Multiplayer Arena");
        en.put("scenarios.multiplayer-arena.description", "A fast-paced multiplayer battle where players compete in a smaller arena for quick matches.");
        
        // Victory/Defeat conditions
        en.put("victory.conquest-classic", "Eliminate all enemy players or capture all enemy towns");
        en.put("defeat.conquest-classic", "All towns are captured or all heroes are eliminated");
        en.put("victory.temporal-rift", "Control the Temporal Nexus and close 3 time rifts");
        en.put("defeat.temporal-rift", "All heroes are lost or time runs out");
        en.put("victory.multiplayer-arena", "Be the last player standing");
        en.put("defeat.multiplayer-arena", "All heroes eliminated");
        
        // Objectives
        en.put("objectives.conquest-classic.obj1.title", "Total Victory");
        en.put("objectives.conquest-classic.obj1.description", "Eliminate all enemy players");
        en.put("objectives.conquest-classic.obj2.title", "Capture All Towns");
        en.put("objectives.conquest-classic.obj2.description", "Capture all enemy towns");
        en.put("objectives.temporal-rift.obj1.title", "Control the Temporal Nexus");
        en.put("objectives.temporal-rift.obj1.description", "Capture and hold the central Temporal Nexus");
        en.put("objectives.temporal-rift.obj2.title", "Close Time Rifts");
        en.put("objectives.temporal-rift.obj2.description", "Find and close 3 unstable time rifts");
        en.put("objectives.temporal-rift.obj3.title", "Defeat the Temporal Guardian");
        en.put("objectives.temporal-rift.obj3.description", "Eliminate the powerful Temporal Guardian");
        en.put("objectives.multiplayer-arena.obj1.title", "Last Player Standing");
        en.put("objectives.multiplayer-arena.obj1.description", "Eliminate all other players");
        
        // Events
        en.put("events.temporal-rift.event1.title", "Temporal Storm");
        en.put("events.temporal-rift.event1.description", "A temporal storm sweeps across the land, affecting all units");
        en.put("events.temporal-rift.event2.title", "Ancient Artifact");
        en.put("events.temporal-rift.event2.description", "An ancient artifact appears in the center of the map");
        en.put("events.multiplayer-arena.event1.title", "Resource Boost");
        en.put("events.multiplayer-arena.event1.description", "All players receive bonus resources");
        
        // French translations
        Map<String, String> fr = new HashMap<>();
        fr.put("scenarios.conquest-classic.name", "Conqu√™te Classique");
        fr.put("scenarios.conquest-classic.description", "Un sc√©nario de conqu√™te traditionnel o√π les joueurs doivent √©liminer tous les ennemis ou capturer leurs villes principales.");
        fr.put("scenarios.temporal-rift.name", "La Faille Temporelle");
        fr.put("scenarios.temporal-rift.description", "Une faille myst√©rieuse dans le temps menace de d√©chirer la r√©alit√©. Les h√©ros doivent naviguer √† travers les zones temporelles pour r√©tablir l'√©quilibre.");
        fr.put("scenarios.multiplayer-arena.name", "Ar√®ne Multijoueur");
        fr.put("scenarios.multiplayer-arena.description", "Une bataille multijoueur rapide o√π les joueurs s'affrontent dans une ar√®ne plus petite pour des matchs rapides.");
        
        // Victory/Defeat conditions
        fr.put("victory.conquest-classic", "√âliminer tous les joueurs ennemis ou capturer toutes les villes ennemies");
        fr.put("defeat.conquest-classic", "Toutes les villes sont captur√©es ou tous les h√©ros sont √©limin√©s");
        fr.put("victory.temporal-rift", "Contr√¥ler le Nexus Temporel et fermer 3 failles temporelles");
        fr.put("defeat.temporal-rift", "Tous les h√©ros sont perdus ou le temps s'√©puise");
        fr.put("victory.multiplayer-arena", "√ätre le dernier joueur debout");
        fr.put("defeat.multiplayer-arena", "Tous les h√©ros √©limin√©s");
        
        // Objectives
        fr.put("objectives.conquest-classic.obj1.title", "Victoire Totale");
        fr.put("objectives.conquest-classic.obj1.description", "√âliminer tous les joueurs ennemis");
        fr.put("objectives.conquest-classic.obj2.title", "Capturer Toutes les Villes");
        fr.put("objectives.conquest-classic.obj2.description", "Capturer toutes les villes ennemies");
        fr.put("objectives.temporal-rift.obj1.title", "Contr√¥ler le Nexus Temporel");
        fr.put("objectives.temporal-rift.obj1.description", "Capturer et tenir le Nexus Temporel central");
        fr.put("objectives.temporal-rift.obj2.title", "Fermer les Failles Temporelles");
        fr.put("objectives.temporal-rift.obj2.description", "Trouver et fermer 3 failles temporelles instables");
        fr.put("objectives.temporal-rift.obj3.title", "Vaincre le Gardien Temporel");
        fr.put("objectives.temporal-rift.obj3.description", "√âliminer le puissant Gardien Temporel");
        fr.put("objectives.multiplayer-arena.obj1.title", "Dernier Joueur Debout");
        fr.put("objectives.multiplayer-arena.obj1.description", "√âliminer tous les autres joueurs");
        
        // Events
        fr.put("events.temporal-rift.event1.title", "Temp√™te Temporelle");
        fr.put("events.temporal-rift.event1.description", "Une temp√™te temporelle balaie la terre, affectant toutes les unit√©s");
        fr.put("events.temporal-rift.event2.title", "Artefact Ancien");
        fr.put("events.temporal-rift.event2.description", "Un artefact ancien appara√Æt au centre de la carte");
        fr.put("events.multiplayer-arena.event1.title", "Boost de Ressources");
        fr.put("events.multiplayer-arena.event1.description", "Tous les joueurs re√ßoivent des ressources bonus");
        
        // Russian translations
        Map<String, String> ru = new HashMap<>();
        ru.put("scenarios.conquest-classic.name", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –ó–∞–≤–æ–µ–≤–∞–Ω–∏–µ");
        ru.put("scenarios.conquest-classic.description", "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–æ–µ–≤–∞–Ω–∏—è, –≥–¥–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –∏–ª–∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∏—Ö –≥–ª–∞–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞.");
        ru.put("scenarios.temporal-rift.name", "–í—Ä–µ–º–µ–Ω–Ω–æ–π –†–∞–∑–ª–æ–º");
        ru.put("scenarios.temporal-rift.description", "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–ª–æ–º –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≥—Ä–æ–∂–∞–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. –ì–µ—Ä–æ–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ.");
        
        // Victory/Defeat conditions
        ru.put("victory.conquest-classic", "–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞");
        ru.put("defeat.conquest-classic", "–í—Å–µ –≥–æ—Ä–æ–¥–∞ –∑–∞—Ö–≤–∞—á–µ–Ω—ã –∏–ª–∏ –≤—Å–µ –≥–µ—Ä–æ–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã");
        ru.put("victory.temporal-rift", "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –í—Ä–µ–º–µ–Ω–Ω–æ–π –ù–µ–∫—Å—É—Å –∏ –∑–∞–∫—Ä—ã—Ç—å 3 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–∑–ª–æ–º–∞");
        ru.put("defeat.temporal-rift", "–í—Å–µ –≥–µ—Ä–æ–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ");
        
        // Objectives
        ru.put("objectives.conquest-classic.obj1.title", "–ü–æ–ª–Ω–∞—è –ü–æ–±–µ–¥–∞");
        ru.put("objectives.conquest-classic.obj1.description", "–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤");
        ru.put("objectives.conquest-classic.obj2.title", "–ó–∞—Ö–≤–∞—Ç–∏—Ç—å –í—Å–µ –ì–æ—Ä–æ–¥–∞");
        ru.put("objectives.conquest-classic.obj2.description", "–ó–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞");
        ru.put("objectives.temporal-rift.obj1.title", "–ö–æ–Ω—Ç—Ä–æ–ª—å –í—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ù–µ–∫—Å—É—Å–∞");
        ru.put("objectives.temporal-rift.obj1.description", "–ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∏ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –í—Ä–µ–º–µ–Ω–Ω–æ–π –ù–µ–∫—Å—É—Å");
        ru.put("objectives.temporal-rift.obj2.title", "–ó–∞–∫—Ä—ã—Ç—å –í—Ä–µ–º–µ–Ω–Ω—ã–µ –†–∞–∑–ª–æ–º—ã");
        ru.put("objectives.temporal-rift.obj2.description", "–ù–∞–π—Ç–∏ –∏ –∑–∞–∫—Ä—ã—Ç—å 3 –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–∑–ª–æ–º–∞");
        ru.put("objectives.temporal-rift.obj3.title", "–ü–æ–±–µ–¥–∏—Ç—å –í—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –°—Ç—Ä–∞–∂–∞");
        ru.put("objectives.temporal-rift.obj3.description", "–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –í—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –°—Ç—Ä–∞–∂–∞");
        
        // Events
        ru.put("events.temporal-rift.event1.title", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ë—É—Ä—è");
        ru.put("events.temporal-rift.event1.description", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –±—É—Ä—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∑–µ–º–ª—é, –≤–æ–∑–¥–µ–π—Å—Ç–≤—É—è –Ω–∞ –≤—Å–µ –æ—Ç—Ä—è–¥—ã");
        ru.put("events.temporal-rift.event2.title", "–î—Ä–µ–≤–Ω–∏–π –ê—Ä—Ç–µ—Ñ–∞–∫—Ç");
        ru.put("events.temporal-rift.event2.description", "–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã");
        
        translations.put("en", en);
        translations.put("fr", fr);
        translations.put("ru", ru);
        
        return translations;
    }

    @GetMapping("/{scenarioId}")
    public ResponseEntity<?> getScenario(@PathVariable String scenarioId) {
        try {
            Optional<Scenario> scenario = scenarioService.getScenarioById(scenarioId);
            if (scenario.isPresent()) {
                return ResponseEntity.ok(scenario.get());
            }
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la r√©cup√©ration du sc√©nario " + scenarioId + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }
} 