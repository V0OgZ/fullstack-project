package com.example.demo.controller;

import com.example.demo.model.Scenario;
import com.example.demo.service.ScenarioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/scenarios")
@CrossOrigin(origins = "http://localhost:3000")
public class ScenarioController {

    @Autowired
    private ScenarioService scenarioService;

    @PostMapping("/predefined/conquest-classic")
    public ResponseEntity<Scenario> getOrCreateConquestClassicScenario() {
        try {
            // D'abord essayer de r√©cup√©rer le sc√©nario existant
            Optional<Scenario> existing = scenarioService.getScenarioById("conquest-classic");
            if (existing.isPresent()) {
                System.out.println("‚úÖ Sc√©nario classique trouv√© en base");
                return ResponseEntity.ok(existing.get());
            }
            
            System.out.println("üî® Cr√©ation du sc√©nario classique...");
            // Si pas trouv√©, essayer de le cr√©er
            Scenario scenario = scenarioService.createConquestClassicScenario();
            return ResponseEntity.ok(scenario);
            
        } catch (DataIntegrityViolationException e) {
            System.out.println("‚ö†Ô∏è Contrainte d'unicit√© - sc√©nario existe d√©j√†, on le r√©cup√®re");
            // Si erreur de contrainte d'unicit√©, c'est que le sc√©nario existe d√©j√†
            Optional<Scenario> existing = scenarioService.getScenarioById("conquest-classic");
            if (existing.isPresent()) {
                return ResponseEntity.ok(existing.get());
            }
            
            // Si on ne le trouve toujours pas, il y a un probl√®me
            System.out.println("‚ùå Erreur: sc√©nario pas trouv√© malgr√© contrainte d'unicit√©");
            return ResponseEntity.status(500).build();
            
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la cr√©ation du sc√©nario classique: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }

    @PostMapping("/predefined/temporal-rift")
    public ResponseEntity<Scenario> getOrCreateTemporalRiftScenario() {
        try {
            // D'abord essayer de r√©cup√©rer le sc√©nario existant
            Optional<Scenario> existing = scenarioService.getScenarioById("temporal-rift");
            if (existing.isPresent()) {
                System.out.println("‚úÖ Sc√©nario temporel trouv√© en base");
                return ResponseEntity.ok(existing.get());
            }
            
            System.out.println("üî® Cr√©ation du sc√©nario temporel...");
            // Si pas trouv√©, essayer de le cr√©er
            Scenario scenario = scenarioService.createTemporalRiftScenario();
            return ResponseEntity.ok(scenario);
            
        } catch (DataIntegrityViolationException e) {
            System.out.println("‚ö†Ô∏è Contrainte d'unicit√© - sc√©nario existe d√©j√†, on le r√©cup√®re");
            // Si erreur de contrainte d'unicit√©, c'est que le sc√©nario existe d√©j√†
            Optional<Scenario> existing = scenarioService.getScenarioById("temporal-rift");
            if (existing.isPresent()) {
                return ResponseEntity.ok(existing.get());
            }
            
            // Si on ne le trouve toujours pas, il y a un probl√®me
            System.out.println("‚ùå Erreur: sc√©nario pas trouv√© malgr√© contrainte d'unicit√©");
            return ResponseEntity.status(500).build();
            
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la cr√©ation du sc√©nario temporel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }

    @GetMapping("/all")
    public ResponseEntity<?> getAllScenarios() {
        try {
            return ResponseEntity.ok(scenarioService.getAllScenarios());
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la r√©cup√©ration des sc√©narios: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }

    @GetMapping("/{scenarioId}")
    public ResponseEntity<?> getScenario(@PathVariable String scenarioId) {
        try {
            Optional<Scenario> scenario = scenarioService.getScenarioById(scenarioId);
            if (scenario.isPresent()) {
                return ResponseEntity.ok(scenario.get());
            }
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la r√©cup√©ration du sc√©nario " + scenarioId + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }
} 