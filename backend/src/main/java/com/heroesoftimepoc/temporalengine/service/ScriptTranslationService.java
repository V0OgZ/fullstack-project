package com.heroesoftimepoc.temporalengine.service;

import org.springframework.stereotype.Service;
import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@Service
public class ScriptTranslationService {

    // ===== MAPPINGS POUR TRADUCTION LITT√âRAIRE =====
    private static final Map<String, String> LITERARY_TRANSLATIONS = new HashMap<>();
    private static final Map<String, String> ICON_TRANSLATIONS = new HashMap<>();
    private static final Map<String, String> RUNE_TRANSLATIONS = new HashMap<>();
    
    // Mapping des IDs vers descriptions litt√©raires
    private static final Map<String, String> ID_TO_DESCRIPTION = new HashMap<>();
    
    // Descriptions uniques pour chaque h√©ros
    private static final Map<String, String> HERO_UNIQUE_DESCRIPTIONS = new HashMap<>();

    static {
        // === DESCRIPTIONS UNIQUES POUR CHAQUE H√âROS ===
        HERO_UNIQUE_DESCRIPTIONS.put("Arthur", "Arthur surgit dans un √©clat de lumi√®re dor√©e, l'√©p√©e au poing");
        HERO_UNIQUE_DESCRIPTIONS.put("Ragnar", "Ragnar appara√Æt dans un grondement de tonnerre, marteau lev√©");
        HERO_UNIQUE_DESCRIPTIONS.put("Merlin", "Merlin se mat√©rialise dans un tourbillon d'√©toiles scintillantes");
        HERO_UNIQUE_DESCRIPTIONS.put("Morgana", "Morgana √©merge des ombres myst√©rieuses, aura sombre");
        HERO_UNIQUE_DESCRIPTIONS.put("JeanGrofignon", "Jean-Grofignon se r√©v√®le dans une aura philosophique");
        HERO_UNIQUE_DESCRIPTIONS.put("Claudius", "Claudius appara√Æt dans une spirale temporelle majestueuse");
        HERO_UNIQUE_DESCRIPTIONS.put("Axis", "Axis traverse les dimensions dans un flash argent√©");
        HERO_UNIQUE_DESCRIPTIONS.put("Chlamydius", "Chlamydius √©merge des chroniques oubli√©es");
        HERO_UNIQUE_DESCRIPTIONS.put("Omega-Zero", "Omega-Z√©ro se manifeste dans un silence cosmique");
        HERO_UNIQUE_DESCRIPTIONS.put("Guinevere", "Gueni√®vre appara√Æt dans une lueur de gr√¢ce royale");
        HERO_UNIQUE_DESCRIPTIONS.put("Loki", "Loki surgit dans un rire malicieux et des flammes vertes");

        // === MAPPING ID -> DESCRIPTIONS LITT√âRAIRES AM√âLIOR√âES ===
        ID_TO_DESCRIPTION.put("grofi_omega", "l'Om√©ga de Grofi, catalyseur de destin√©es");
        ID_TO_DESCRIPTION.put("custom_mirror", "le Miroir des Possibles");
        ID_TO_DESCRIPTION.put("avant_world_blade", "la Lame de l'Avant-Monde");
        ID_TO_DESCRIPTION.put("reverse_clock", "l'Horloge du Dernier Instant");
        ID_TO_DESCRIPTION.put("ignorance_beacon", "la Balise d'Ignorance Temporelle");
        ID_TO_DESCRIPTION.put("anchor_tower", "la Tour de l'Ancrage");
        ID_TO_DESCRIPTION.put("temporal_echo", "l'√âcho Temporel");
        ID_TO_DESCRIPTION.put("wigner_eye", "l'≈íil de Wigner, perceur de voiles temporels");
        ID_TO_DESCRIPTION.put("chronos_shield", "le Bouclier de Chronos");
        ID_TO_DESCRIPTION.put("quantum_mirror", "le Miroir des R√©alit√©s Parall√®les");
        ID_TO_DESCRIPTION.put("temporal_compass", "la Boussole Temporelle");
        ID_TO_DESCRIPTION.put("causal_disruptor", "le Perturbateur Causal");
        
        // Artefacts du Codex Final
        ID_TO_DESCRIPTION.put("parchemin_sale", "le Parchemin Sale, manuscrit des v√©rit√©s interdites");
        ID_TO_DESCRIPTION.put("encre_vivante", "l'Encre Vivante, fluide des r√©alit√©s oubli√©es");
        ID_TO_DESCRIPTION.put("livre_vide_sans_nom", "le Livre Vide Sans Nom, grimoire de l'inexistence");
        ID_TO_DESCRIPTION.put("Excalibur", "Excalibur, l'√©p√©e de l√©gende");
        ID_TO_DESCRIPTION.put("Mjolnir", "Mjolnir, marteau du tonnerre");
        ID_TO_DESCRIPTION.put("StaffOfWisdom", "le B√¢ton de Sagesse");
        
        // Cr√©atures avec descriptions fantastiques (plus de "quantum")
        ID_TO_DESCRIPTION.put("quantum_phoenix", "le Ph√©nix de Renaissance");
        ID_TO_DESCRIPTION.put("quantum_wisp", "la Lueur √âth√©r√©e");
        ID_TO_DESCRIPTION.put("probability_spider", "l'Araign√©e Tisseuse de Sorts");
        ID_TO_DESCRIPTION.put("quantum_knight", "le Chevalier Spectral");
        ID_TO_DESCRIPTION.put("quantum_cat", "le Chat Changeur de Phase");
        ID_TO_DESCRIPTION.put("quantum_lich", "la Liche des √Çges Oubli√©s");
        ID_TO_DESCRIPTION.put("quantum_beetle", "le Scarab√©e Amplificateur");
        ID_TO_DESCRIPTION.put("probability_archon", "l'Archonte des Destin√©es");
        ID_TO_DESCRIPTION.put("Dragon", "le Dragon Rouge, gardien des tr√©sors");
        ID_TO_DESCRIPTION.put("Phoenix", "le Ph√©nix √âternel");
        
        // H√©ros avec descriptions litt√©raires
        ID_TO_DESCRIPTION.put("JeanGrofignon", "Jean-Grofignon, l'√âveill√© Ontologique");
        ID_TO_DESCRIPTION.put("Claudius", "Claudius, l'Architecte du Multivers");
        ID_TO_DESCRIPTION.put("Arthur", "Arthur, le Roi Temporel");
        ID_TO_DESCRIPTION.put("Ragnar", "Ragnar, le Berserker des L√©gendes");
        ID_TO_DESCRIPTION.put("Merlin", "Merlin, le Sage des Temps");
        ID_TO_DESCRIPTION.put("Morgana", "Morgana, la Tisseuse du Destin");
        ID_TO_DESCRIPTION.put("Axis", "Axis, le Voyageur Lin√©aire");
        ID_TO_DESCRIPTION.put("Chlamydius", "Chlamydius, le Scribe Non N√©");
        ID_TO_DESCRIPTION.put("Omega-Zero", "Omega-Z√©ro, l'Entit√© Ultime");

        // === TRADUCTIONS LITT√âRAIRES AM√âLIOR√âES (PLUS DE QUANTUM) ===
        LITERARY_TRANSLATIONS.put("HERO", "le h√©ros l√©gendaire");
        LITERARY_TRANSLATIONS.put("MOV", "s'√©lance vers sa destin√©e");
        LITERARY_TRANSLATIONS.put("CREATE", "invoque par un rituel ancien");
        LITERARY_TRANSLATIONS.put("USE", "active avec ma√Ætrise");
        LITERARY_TRANSLATIONS.put("CAST", "lib√®re un sortil√®ge puissant");
        LITERARY_TRANSLATIONS.put("œà", "un sort en pr√©paration");
        LITERARY_TRANSLATIONS.put("‚äô", "vision proph√©tique");
        LITERARY_TRANSLATIONS.put("‚Ä†", "se r√©alise soudainement");
        LITERARY_TRANSLATIONS.put("Œ†", "l'observation r√©v√©latrice");
        LITERARY_TRANSLATIONS.put("Œît", "voyage dans le temps");
        LITERARY_TRANSLATIONS.put("CONSTRUCTIVE", "synergie magique");
        LITERARY_TRANSLATIONS.put("DESTRUCTIVE", "annulation mystique");
        LITERARY_TRANSLATIONS.put("NEUTRAL", "√©quilibre des forces");
        LITERARY_TRANSLATIONS.put("COMPLEX", "magie complexe");
        LITERARY_TRANSLATIONS.put("CREATURE", "cr√©ature l√©gendaire");
        LITERARY_TRANSLATIONS.put("ITEM", "art√©fact de pouvoir");
        LITERARY_TRANSLATIONS.put("SPELL", "incantation arcanique");
        LITERARY_TRANSLATIONS.put("TARGET", "adversaire choisi");
        LITERARY_TRANSLATIONS.put("UNIT", "compagnon loyal");
        LITERARY_TRANSLATIONS.put("BATTLE", "livre une bataille √©pique contre");
        LITERARY_TRANSLATIONS.put("ABILITY", "d√©cha√Æne le pouvoir mystique de");
        LITERARY_TRANSLATIONS.put("ACTIVATE", "√©veille l'essence de");
        LITERARY_TRANSLATIONS.put("PHASE_SHIFT", "traverse les dimensions");

        // === TRADUCTIONS IC√îNES/EMOJIS ===
        ICON_TRANSLATIONS.put("HERO", "üßç");
        ICON_TRANSLATIONS.put("MOV", "‚û°Ô∏è");
        ICON_TRANSLATIONS.put("CREATE", "‚ú®");
        ICON_TRANSLATIONS.put("USE", "üßô‚Äç‚ôÇÔ∏è");
        ICON_TRANSLATIONS.put("CAST", "üîÆ");
        ICON_TRANSLATIONS.put("œà", "üß†");
        ICON_TRANSLATIONS.put("‚äô", "‚è≥");
        ICON_TRANSLATIONS.put("‚Ä†", "‚ùó");
        ICON_TRANSLATIONS.put("Œ†", "üëÅÔ∏è");
        ICON_TRANSLATIONS.put("Œît", "‚è∞");
        ICON_TRANSLATIONS.put("CONSTRUCTIVE", "‚ûï");
        ICON_TRANSLATIONS.put("DESTRUCTIVE", "‚ûñ");
        ICON_TRANSLATIONS.put("NEUTRAL", "‚öñÔ∏è");
        ICON_TRANSLATIONS.put("COMPLEX", "üåÄ");
        ICON_TRANSLATIONS.put("CREATURE", "üêâ");
        ICON_TRANSLATIONS.put("ITEM", "üíé");
        ICON_TRANSLATIONS.put("SPELL", "‚ú®");
        ICON_TRANSLATIONS.put("TARGET", "üéØ");
        ICON_TRANSLATIONS.put("UNIT", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("COORDINATES", "üó∫Ô∏è");
        ICON_TRANSLATIONS.put("ENERGY", "‚ö°");
        ICON_TRANSLATIONS.put("TIME", "‚åõ");
        ICON_TRANSLATIONS.put("BATTLE", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("ABILITY", "üîÆ");
        ICON_TRANSLATIONS.put("ACTIVATE", "‚ú®");
        ICON_TRANSLATIONS.put("PHASE_SHIFT", "üåÄ");
        ICON_TRANSLATIONS.put("quantum_wisp", "üßö‚Äç‚ôÄÔ∏è");
        ICON_TRANSLATIONS.put("probability_spider", "üï∑Ô∏è");
        ICON_TRANSLATIONS.put("quantum_knight", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("quantum_cat", "üê±");
        ICON_TRANSLATIONS.put("quantum_lich", "üíÄ");
        ICON_TRANSLATIONS.put("quantum_beetle", "ü™≤");
        ICON_TRANSLATIONS.put("quantum_phoenix", "üî•");
        ICON_TRANSLATIONS.put("probability_archon", "üëë");

        // === TRADUCTIONS RUNES MYSTIQUES ===
        RUNE_TRANSLATIONS.put("HERO", "·ö∫");
        RUNE_TRANSLATIONS.put("MOV", "·õó");
        RUNE_TRANSLATIONS.put("CREATE", "·ö≤");
        RUNE_TRANSLATIONS.put("USE", "·ö¢");
        RUNE_TRANSLATIONS.put("CAST", "·õä");
        RUNE_TRANSLATIONS.put("œà", "‚ò•");
        RUNE_TRANSLATIONS.put("‚äô", "‚ü°");
        RUNE_TRANSLATIONS.put("‚Ä†", "êçà");
        RUNE_TRANSLATIONS.put("Œ†", "‚òâ");
        RUNE_TRANSLATIONS.put("Œît", "‚è£");
        RUNE_TRANSLATIONS.put("CONSTRUCTIVE", "‚äï");
        RUNE_TRANSLATIONS.put("DESTRUCTIVE", "‚äñ");
        RUNE_TRANSLATIONS.put("NEUTRAL", "‚äó");
        RUNE_TRANSLATIONS.put("COMPLEX", "‚äò");
        RUNE_TRANSLATIONS.put("CREATURE", "·õû");
        RUNE_TRANSLATIONS.put("ITEM", "·õè");
        RUNE_TRANSLATIONS.put("SPELL", "·õã");
        RUNE_TRANSLATIONS.put("TARGET", "·õü");
        RUNE_TRANSLATIONS.put("UNIT", "·öπ");
        RUNE_TRANSLATIONS.put("BATTLE", "·õí");
        RUNE_TRANSLATIONS.put("ABILITY", "·ö®");
        RUNE_TRANSLATIONS.put("ACTIVATE", "·ö±");
        RUNE_TRANSLATIONS.put("PHASE_SHIFT", "·õá");
        RUNE_TRANSLATIONS.put("quantum_wisp", "·õú");
        RUNE_TRANSLATIONS.put("probability_spider", "·õù");
        RUNE_TRANSLATIONS.put("quantum_knight", "·õû");
        RUNE_TRANSLATIONS.put("quantum_cat", "·õü");
        RUNE_TRANSLATIONS.put("quantum_lich", "·õ†");
        RUNE_TRANSLATIONS.put("quantum_beetle", "·õ°");
        RUNE_TRANSLATIONS.put("quantum_phoenix", "·õ¢");
        RUNE_TRANSLATIONS.put("probability_archon", "·õ£");
    }

    // ===== M√âTHODES PRINCIPALES =====

    public Map<String, Object> translateScript(String script, String mode) {
        Map<String, Object> result = new HashMap<>();
        
        if (script == null || script.trim().isEmpty()) {
            result.put("original", "");
            result.put("translated", "");
            result.put("mode", mode);
            return result;
        }

        String translated = "";
        switch (mode.toLowerCase()) {
            case "literary":
                translated = translateToLiterary(script);
                break;
            case "icons":
                translated = translateToIcons(script);
                break;
            case "runes":
                translated = translateToRunes(script);
                break;
            default:
                translated = script;
        }

        result.put("original", script);
        result.put("translated", translated);
        result.put("mode", mode);
        
        return result;
    }

    // ===== TRADUCTION LITT√âRAIRE AM√âLIOR√âE =====

    private String translateToLiterary(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "Dans le silence de l'√©ternit√©, rien ne se manifeste.";
        }

        String translated = script;

        // Traduire les commandes de base avec descriptions uniques
        translated = translateBasicCommands(translated, LITERARY_TRANSLATIONS);
        
        // Remplacer les IDs par des descriptions litt√©raires
        translated = replaceIdsWithDescriptions(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulas(translated);
        
        // Traduire les √©tats temporels (plus de "quantum")
        translated = translateTemporalStates(translated);
        
        // Am√©liorer le style litt√©raire sans r√©p√©titions
        translated = addVariedLiteraryStyle(translated);

        return translated;
    }

    private String translateBasicCommands(String script, Map<String, String> translations) {
        String result = script;
        
        // Commandes HERO avec descriptions uniques
        for (Map.Entry<String, String> entry : HERO_UNIQUE_DESCRIPTIONS.entrySet()) {
            String heroName = entry.getKey();
            String description = entry.getValue();
            result = result.replaceAll("HERO\\(" + heroName + "\\)", description);
        }
        
        // Commandes HERO g√©n√©riques pour les h√©ros non mapp√©s
        result = result.replaceAll("HERO\\(([^)]+)\\)", "le h√©ros l√©gendaire $1 entre en sc√®ne");

        // Commandes MOV avec style √©pique
        result = result.replaceAll("MOV\\(([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "$1 s'√©lance vers sa destin√©e aux coordonn√©es mystiques ($2, $3)");

        // Commandes USE avec descriptions sp√©cifiques
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*HERO:([^)]+))?\\)", 
            "active avec ma√Ætrise $2" + (result.contains("HERO:") ? " par l'interm√©diaire de $3" : ""));
        
        // Commandes BATTLE √©piques
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "$1 livre une bataille √©pique contre $2 dans un duel de l√©gende");
        
        // Commandes ABILITY mystiques
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "$1 d√©cha√Æne le pouvoir mystique de $2");

        return result;
    }

    private String translateTemporalStates(String script) {
        String result = script;
        
        // √âtats temporels - Version fantaisiste (sans "quantum")
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "Un sort en pr√©paration se tisse dans les fils du destin : $2");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "Le sort se r√©alise soudainement, la magie se cristallise dans la r√©alit√©");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "L'observation r√©v√©latrice de $1 d√©clenche la r√©alisation du sort");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "dans $1 tours, quand les astres s'aligneront");
        
        // Nettoyer les coordonn√©es dans les √©tats temporels
        result = result.replaceAll("@(\\d+),(\\d+)", "aux coordonn√©es mystiques ($1, $2)");

        return result;
    }

    private String translateArtifactFormulas(String script) {
        String result = script;
        
        // Formules d'artefacts - Version magique
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "Une synergie magique entre $1 cr√©e une harmonie parfaite des pouvoirs");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "Une annulation mystique d√©chire $1, les forces s'opposent dans un chaos contr√¥l√©");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "Le pouvoir de $1 est d√©cupl√© par un facteur de $2, cr√©ant une r√©sonance magique");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "L'essence magique du h√©ros est modifi√©e de $2 unit√©s par la volont√© du destin");

        return result;
    }

    private String replaceIdsWithDescriptions(String script) {
        String result = script;
        
        // Remplacer les IDs par leurs descriptions litt√©raires
        for (Map.Entry<String, String> entry : ID_TO_DESCRIPTION.entrySet()) {
            String id = entry.getKey();
            String description = entry.getValue();
            
            // Remplacer dans les commandes USE
            result = result.replaceAll("USE\\([^,]+,\\s*" + id + "(?:,\\s*HERO:([^)]+))?\\)", 
                "active avec ma√Ætrise " + description + (result.contains("HERO:") ? " par l'interm√©diaire de $1" : ""));
            
            // Remplacer dans les commandes CREATE
            result = result.replaceAll("CREATE\\([^,]+,\\s*" + id + "(?:,\\s*@([^)]+))?\\)", 
                "invoque par un rituel ancien " + description + (result.contains("@") ? " aux coordonn√©es mystiques ($1)" : ""));
            
            // Remplacer les r√©f√©rences directes
            result = result.replaceAll("\\b" + id + "\\b", description);
        }
        
        // Nettoyer les duplications
        result = result.replaceAll("invoque par un rituel ancien par un rituel ancien", 
            "invoque par un rituel ancien");
        
        return result;
    }

    private String addVariedLiteraryStyle(String script) {
        String result = script;
        
        // √âliminer les r√©p√©titions "valiant valiant"
        result = result.replaceAll("valiant valiant", "l√©gendaire");
        
        // Remplacer les termes techniques restants
        result = result.replaceAll("quantum essence", "sort en pr√©paration");
        result = result.replaceAll("temporal projection", "vision proph√©tique");
        result = result.replaceAll("quantum uncertainty", "magie du possible");
        result = result.replaceAll("ethereal form dancing between threads of reality", "incantation qui se tisse dans les fils du destin");
        result = result.replaceAll("depths of forgotten memories", "brumes du temps");
        result = result.replaceAll("quantum combat", "bataille √©pique");
        result = result.replaceAll("probability amplified", "pouvoir d√©cupl√©");
        
        // Am√©liorer les coordonn√©es
        result = result.replaceAll("@(\\d+),(\\d+)", "aux coordonn√©es mystiques ($1, $2)");
        
        // Nettoyer les phrases trop longues
        result = result.replaceAll("\\s+", " ");
        result = result.trim();
        
        return result;
    }

    // ===== TRADUCTION IC√îNES/EMOJIS =====

    private String translateToIcons(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "üîÆ‚ú®";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommandsIcons(translated);
        
        // Traduire les √©tats temporels
        translated = translateTemporalStatesIcons(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulasIcons(translated);

        return translated;
    }

    private String translateBasicCommandsIcons(String script) {
        String result = script;
        
        // Commandes avec ic√¥nes
        result = result.replaceAll("HERO\\(([^)]+)\\)", "üßç($1)");
        result = result.replaceAll("MOV\\(([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "üßç‚û°Ô∏èüó∫Ô∏è($2,$3)");
        result = result.replaceAll("CREATE\\(([^,]+),\\s*([^)]+)(?:,\\s*@(\\d+),(\\d+))?\\)", 
            "‚ú®üêâ($2)" + (result.contains("@") ? "üó∫Ô∏è($3,$4)" : ""));
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*([^)]+))?\\)", 
            "üßô‚Äç‚ôÇÔ∏èüíé($2)" + (result.contains("HERO:") ? "üßç($3)" : ""));
        result = result.replaceAll("CAST\\(SPELL,\\s*([^,]+),\\s*TARGET:([^,]+),\\s*HERO:([^)]+)\\)", 
            "üîÆ‚ú®($1)üéØ($2)üßç($3)");
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öîÔ∏è($1)vs($2)");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "üîÆ($1)‚ú®($2)");
        result = result.replaceAll("ACTIVATE\\(([^)]+)\\)", 
            "‚ú®($1)");
        result = result.replaceAll("PHASE_SHIFT\\(([^,]+),\\s*([^)]+)\\)", 
            "üåÄ($1)‚è∞($2)");

        return result;
    }

    private String translateTemporalStatesIcons(String script) {
        String result = script;
        
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "üß†$1:‚è≥($2)");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "‚ùóüß†$1");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "üëÅÔ∏è($1)‚áí‚ùóüß†$2");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "‚è∞+$1");

        return result;
    }

    private String translateArtifactFormulasIcons(String script) {
        String result = script;
        
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "‚ûï($1)");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "‚ûñ($1)");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚ö°($1)√ó$2");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚ö°$2");

        return result;
    }

    // ===== TRADUCTION RUNES MYSTIQUES =====

    private String translateToRunes(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "‚ò•‚ü°êçà";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommandsRunes(translated);
        
        // Traduire les √©tats temporels
        translated = translateTemporalStatesRunes(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulasRunes(translated);

        return translated;
    }

    private String translateBasicCommandsRunes(String script) {
        String result = script;
        
        result = result.replaceAll("HERO\\(([^)]+)\\)", "·ö∫($1)");
        result = result.replaceAll("MOV\\(([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "·ö∫·õó‚åñ($2,$3)");
        result = result.replaceAll("CREATE\\(([^,]+),\\s*([^)]+)(?:,\\s*@(\\d+),(\\d+))?\\)", 
            "·ö≤·õû($2)" + (result.contains("@") ? "‚åñ($3,$4)" : ""));
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*([^)]+))?\\)", 
            "·ö¢·õÉ($2)" + (result.contains("HERO:") ? "·ö∫($3)" : ""));
        result = result.replaceAll("CAST\\(SPELL,\\s*([^,]+),\\s*TARGET:([^,]+),\\s*HERO:([^)]+)\\)", 
            "·õä·õè($1)·ö¶($2)·ö∫($3)");
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "·õí($1)vs($2)");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "·ö®($1)·ö´($2)");
        result = result.replaceAll("ACTIVATE\\(([^)]+)\\)", 
            "·ö´($1)");
        result = result.replaceAll("PHASE_SHIFT\\(([^,]+),\\s*([^)]+)\\)", 
            "·õü($1)‚è£($2)");

        return result;
    }

    private String translateTemporalStatesRunes(String script) {
        String result = script;
        
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "‚ò•$1:‚ü°($2)");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "êçà‚ò•$1");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "‚òâ($1)‚áíêçà‚ò•$2");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "‚è£+$1");

        return result;
    }

    private String translateArtifactFormulasRunes(String script) {
        String result = script;
        
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "‚äï($1)");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "‚äñ($1)");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öõ($1)√ó$2");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öõ$2");

        return result;
    }

    // ===== M√âTHODES UTILITAIRES =====

    public List<String> getAvailableModes() {
        return Arrays.asList("literary", "icons", "runes", "all");
    }

    public Map<String, String> getTranslationExamples() {
        Map<String, String> examples = new HashMap<>();
        examples.put("HERO(Arthur)", "Arthur surgit dans un √©clat de lumi√®re dor√©e, l'√©p√©e au poing | üßç(Arthur) | ·ö∫(Arthur)");
        examples.put("MOV(Arthur, @10,10)", 
            "Arthur s'√©lance vers sa destin√©e aux coordonn√©es mystiques (10, 10) | üßç‚û°Ô∏èüó∫Ô∏è(10,10) | ·ö∫·õó‚åñ(10,10)");
        examples.put("œà001: ‚äô(Œît+1 @10,10 ‚ü∂ MOV(Arthur, @10,10))", 
            "Un sort en pr√©paration se tisse dans les fils du destin : dans 1 tours aux coordonn√©es mystiques (10, 10) ‚ü∂ Arthur s'√©lance vers sa destin√©e | üß†001:‚è≥(‚è∞+1 @10,10 ‚ü∂ üßç‚û°Ô∏èüó∫Ô∏è(10,10)) | ‚ò•001:‚ü°(‚è£+1 @10,10 ‚ü∂ ·ö∫·õó‚åñ(10,10))");
        examples.put("CREATE(CREATURE, quantum_phoenix, @15,15)", 
            "invoque par un rituel ancien le Ph√©nix de Renaissance aux coordonn√©es mystiques (15, 15) | ‚ú®üêâ(quantum_phoenix)üó∫Ô∏è(15,15) | ·ö≤·õû(quantum_phoenix)‚åñ(15,15)");
        examples.put("BATTLE(Arthur, Ragnar)", 
            "Arthur livre une bataille √©pique contre Ragnar dans un duel de l√©gende | ‚öîÔ∏è(Arthur)vs(Ragnar) | ·õí(Arthur)vs(Ragnar)");
        examples.put("USE(ARTIFACT, grofi_omega, HERO:JeanGrofignon)", 
            "active avec ma√Ætrise l'Om√©ga de Grofi, catalyseur de destin√©es par l'interm√©diaire de Jean-Grofignon | üßô‚Äç‚ôÇÔ∏èüíé(grofi_omega)üßç(JeanGrofignon) | ·ö¢·õÉ(grofi_omega)·ö∫(JeanGrofignon)");
        
        return examples;
    }
} 