package com.heroesoftimepoc.temporalengine.service;

import org.springframework.stereotype.Service;
import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@Service
public class ScriptTranslationService {

    // ===== MAPPINGS POUR TRADUCTION LITT√âRAIRE =====
    private static final Map<String, String> LITERARY_TRANSLATIONS = new HashMap<>();
    private static final Map<String, String> ICON_TRANSLATIONS = new HashMap<>();
    private static final Map<String, String> RUNE_TRANSLATIONS = new HashMap<>();
    
    // Mapping des IDs vers descriptions litt√©raires
    private static final Map<String, String> ID_TO_DESCRIPTION = new HashMap<>();

    static {
        // === MAPPING ID -> DESCRIPTIONS LITT√âRAIRES ===
        ID_TO_DESCRIPTION.put("grofi_omega", "l'Art√©fact Ultime de Jean-Grofignon");
        ID_TO_DESCRIPTION.put("custom_mirror", "le Miroir des Possibilit√©s");
        ID_TO_DESCRIPTION.put("avant_world_blade", "la Lame de l'Avant-Monde");
        ID_TO_DESCRIPTION.put("reverse_clock", "l'Horloge du Dernier Instant");
        ID_TO_DESCRIPTION.put("ignorance_beacon", "la Balise d'Ignorance Temporelle");
        ID_TO_DESCRIPTION.put("anchor_tower", "la Tour de l'Ancrage");
        ID_TO_DESCRIPTION.put("temporal_echo", "l'√âcho Temporel");
        ID_TO_DESCRIPTION.put("wigner_eye", "l'≈íil de Wigner");
        ID_TO_DESCRIPTION.put("chronos_shield", "le Bouclier de Chronos");
        ID_TO_DESCRIPTION.put("quantum_mirror", "le Miroir Quantique");
        ID_TO_DESCRIPTION.put("temporal_compass", "la Boussole Temporelle");
        ID_TO_DESCRIPTION.put("causal_disruptor", "le Perturbateur Causal");
        
        // Artefacts du Codex Final
        ID_TO_DESCRIPTION.put("parchemin_sale", "le Parchemin Sale, manuscrit des v√©rit√©s interdites");
        ID_TO_DESCRIPTION.put("encre_vivante", "l'Encre Vivante, fluide des r√©alit√©s oubli√©es");
        ID_TO_DESCRIPTION.put("livre_vide_sans_nom", "le Livre Vide Sans Nom, grimoire de l'inexistence");
        ID_TO_DESCRIPTION.put("grofi_omega", "l'Om√©ga de Grofi, cet artefact ultime qui transcende les lois de la r√©alit√©");
        
        // Cr√©atures avec descriptions litt√©raires
        ID_TO_DESCRIPTION.put("quantum_phoenix", "le ph√©nix quantique l√©gendaire");
        ID_TO_DESCRIPTION.put("quantum_wisp", "la lueur quantique √©th√©r√©e");
        ID_TO_DESCRIPTION.put("probability_spider", "l'araign√©e tisseuse de probabilit√©s");
        ID_TO_DESCRIPTION.put("quantum_knight", "le chevalier en armure quantique");
        ID_TO_DESCRIPTION.put("quantum_cat", "le chat quantique changeur de phase");
        ID_TO_DESCRIPTION.put("quantum_lich", "le liche quantique superpos√© √† la mort");
        ID_TO_DESCRIPTION.put("quantum_beetle", "le scarab√©e amplificateur de r√©sonance");
        ID_TO_DESCRIPTION.put("probability_archon", "l'archonte gouvernant les probabilit√©s");
        
        // H√©ros avec descriptions litt√©raires
        ID_TO_DESCRIPTION.put("JeanGrofignon", "Jean-Grofignon, l'√âveill√© Ontologique");
        ID_TO_DESCRIPTION.put("Claudius", "Claudius, l'Architecte du Multivers");
        ID_TO_DESCRIPTION.put("Arthur", "Arthur, le Roi Temporel");
        ID_TO_DESCRIPTION.put("Ragnar", "Ragnar, le Berserker Quantique");
        ID_TO_DESCRIPTION.put("Merlin", "Merlin, le Sage des Temps");
        ID_TO_DESCRIPTION.put("Morgana", "Morgana, la Tisseuse du Destin");
        ID_TO_DESCRIPTION.put("Axis", "Axis, le Voyageur Lin√©aire");
        ID_TO_DESCRIPTION.put("Chlamydius", "Chlamydius, le Scribe Non N√©");
        ID_TO_DESCRIPTION.put("Omega-Zero", "Omega-Z√©ro, l'Entit√© Ultime");
        ID_TO_DESCRIPTION.put("Omega-Zero", "Omega-Z√©ro, l'Entit√© Ultime"); // Avec tiret

        // === TRADUCTIONS LITT√âRAIRES ANGLAISES ===
        LITERARY_TRANSLATIONS.put("HERO", "le h√©ros valeureux");
        LITERARY_TRANSLATIONS.put("MOV", "√©tend sa main dans le vide, projetant un √©cho miroir");
        LITERARY_TRANSLATIONS.put("CREATE", "invoque depuis les profondeurs de la possibilit√©");
        LITERARY_TRANSLATIONS.put("USE", "canalise l'ancien pouvoir de");
        LITERARY_TRANSLATIONS.put("CAST", "tisse les fils de la r√©alit√©, lib√©rant");
        LITERARY_TRANSLATIONS.put("œà", "l'essence quantique");
        LITERARY_TRANSLATIONS.put("‚äô", "la projection temporelle");
        LITERARY_TRANSLATIONS.put("‚Ä†", "l'effondrement de la probabilit√©");
        LITERARY_TRANSLATIONS.put("Œ†", "le regard de l'observateur");
        LITERARY_TRANSLATIONS.put("Œît", "le d√©placement temporel");
        LITERARY_TRANSLATIONS.put("CONSTRUCTIVE", "l'interf√©rence constructive");
        LITERARY_TRANSLATIONS.put("DESTRUCTIVE", "l'interf√©rence destructive");
        LITERARY_TRANSLATIONS.put("NEUTRAL", "l'interf√©rence neutre");
        LITERARY_TRANSLATIONS.put("COMPLEX", "l'interf√©rence complexe");
        LITERARY_TRANSLATIONS.put("CREATURE", "l'entit√© d'un autre monde");
        LITERARY_TRANSLATIONS.put("ITEM", "l'art√©fact de pouvoir");
        LITERARY_TRANSLATIONS.put("SPELL", "l'incantation arcanique");
        LITERARY_TRANSLATIONS.put("TARGET", "l'adversaire choisi");
        LITERARY_TRANSLATIONS.put("UNIT", "le compagnon loyal");
        LITERARY_TRANSLATIONS.put("BATTLE", "s'engage dans un combat quantique avec");
        LITERARY_TRANSLATIONS.put("ABILITY", "lib√®re le pouvoir mystique de");
        LITERARY_TRANSLATIONS.put("ACTIVATE", "√©veille l'essence quantique de");
        LITERARY_TRANSLATIONS.put("PHASE_SHIFT", "traverse les phases quantiques");


        // === TRADUCTIONS IC√îNES/EMOJIS ===
        ICON_TRANSLATIONS.put("HERO", "üßç");
        ICON_TRANSLATIONS.put("MOV", "‚û°Ô∏è");
        ICON_TRANSLATIONS.put("CREATE", "‚ú®");
        ICON_TRANSLATIONS.put("USE", "üßô‚Äç‚ôÇÔ∏è");
        ICON_TRANSLATIONS.put("CAST", "üîÆ");
        ICON_TRANSLATIONS.put("œà", "üß†");
        ICON_TRANSLATIONS.put("‚äô", "‚è≥");
        ICON_TRANSLATIONS.put("‚Ä†", "‚ùó");
        ICON_TRANSLATIONS.put("Œ†", "üëÅÔ∏è");
        ICON_TRANSLATIONS.put("Œît", "‚è∞");
        ICON_TRANSLATIONS.put("CONSTRUCTIVE", "‚ûï");
        ICON_TRANSLATIONS.put("DESTRUCTIVE", "‚ûñ");
        ICON_TRANSLATIONS.put("NEUTRAL", "‚öñÔ∏è");
        ICON_TRANSLATIONS.put("COMPLEX", "üåÄ");
        ICON_TRANSLATIONS.put("CREATURE", "üêâ");
        ICON_TRANSLATIONS.put("ITEM", "üíé");
        ICON_TRANSLATIONS.put("SPELL", "‚ú®");
        ICON_TRANSLATIONS.put("TARGET", "üéØ");
        ICON_TRANSLATIONS.put("UNIT", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("COORDINATES", "üó∫Ô∏è");
        ICON_TRANSLATIONS.put("ENERGY", "‚ö°");
        ICON_TRANSLATIONS.put("TIME", "‚åõ");
        ICON_TRANSLATIONS.put("BATTLE", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("ABILITY", "üîÆ");
        ICON_TRANSLATIONS.put("ACTIVATE", "‚ú®");
        ICON_TRANSLATIONS.put("PHASE_SHIFT", "üåÄ");
        ICON_TRANSLATIONS.put("quantum_wisp", "üßö‚Äç‚ôÄÔ∏è");
        ICON_TRANSLATIONS.put("probability_spider", "üï∑Ô∏è");
        ICON_TRANSLATIONS.put("quantum_knight", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("quantum_cat", "üê±");
        ICON_TRANSLATIONS.put("quantum_lich", "üíÄ");
        ICON_TRANSLATIONS.put("quantum_beetle", "ü™≤");
        ICON_TRANSLATIONS.put("quantum_phoenix", "üî•");
        ICON_TRANSLATIONS.put("probability_archon", "üëë");

        // === TRADUCTIONS RUNES MYSTIQUES ===
        RUNE_TRANSLATIONS.put("HERO", "·ö∫");
        RUNE_TRANSLATIONS.put("MOV", "·õó");
        RUNE_TRANSLATIONS.put("CREATE", "·ö≤");
        RUNE_TRANSLATIONS.put("USE", "·ö¢");
        RUNE_TRANSLATIONS.put("CAST", "·õä");
        RUNE_TRANSLATIONS.put("œà", "‚ò•");
        RUNE_TRANSLATIONS.put("‚äô", "‚ü°");
        RUNE_TRANSLATIONS.put("‚Ä†", "êçà");
        RUNE_TRANSLATIONS.put("Œ†", "‚òâ");
        RUNE_TRANSLATIONS.put("Œît", "‚è£");
        RUNE_TRANSLATIONS.put("CONSTRUCTIVE", "‚äï");
        RUNE_TRANSLATIONS.put("DESTRUCTIVE", "‚äñ");
        RUNE_TRANSLATIONS.put("NEUTRAL", "‚äó");
        RUNE_TRANSLATIONS.put("COMPLEX", "‚äò");
        RUNE_TRANSLATIONS.put("CREATURE", "·õû");
        RUNE_TRANSLATIONS.put("ITEM", "·õè");
        RUNE_TRANSLATIONS.put("SPELL", "·õã");
        RUNE_TRANSLATIONS.put("TARGET", "·õü");
        RUNE_TRANSLATIONS.put("UNIT", "·öπ");
        RUNE_TRANSLATIONS.put("BATTLE", "·õí");
        RUNE_TRANSLATIONS.put("ABILITY", "·ö®");
        RUNE_TRANSLATIONS.put("ACTIVATE", "·ö±");
        RUNE_TRANSLATIONS.put("PHASE_SHIFT", "·õá");
        RUNE_TRANSLATIONS.put("quantum_wisp", "·õú");
        RUNE_TRANSLATIONS.put("probability_spider", "·õù");
        RUNE_TRANSLATIONS.put("quantum_knight", "·õû");
        RUNE_TRANSLATIONS.put("quantum_cat", "·õü");
        RUNE_TRANSLATIONS.put("quantum_lich", "·õ†");
        RUNE_TRANSLATIONS.put("quantum_beetle", "·õ°");
        RUNE_TRANSLATIONS.put("quantum_phoenix", "·õ¢");
        RUNE_TRANSLATIONS.put("probability_archon", "·õ£");
    }

    // ===== M√âTHODES PRINCIPALES =====

    public Map<String, Object> translateScript(String script, String mode) {
        Map<String, Object> result = new HashMap<>();
        
        if (script == null || script.trim().isEmpty()) {
            result.put("original", "");
            result.put("translated", "");
            result.put("mode", mode);
            return result;
        }

        String translated = "";
        switch (mode.toLowerCase()) {
            case "literary":
                translated = translateToLiterary(script);
                break;
            case "icons":
                translated = translateToIcons(script);
                break;
            case "runes":
                translated = translateToRunes(script);
                break;
            default:
                translated = script;
        }

        result.put("original", script);
        result.put("translated", translated);
        result.put("mode", mode);
        
        return result;
    }

    // ===== TRADUCTION LITT√âRAIRE =====

    private String translateToLiterary(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "Dans le silence de l'√©ternit√©, rien ne se manifeste.";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommands(translated, LITERARY_TRANSLATIONS);
        
        // Remplacer les IDs par des descriptions litt√©raires
        translated = replaceIdsWithDescriptions(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulas(translated);
        
        // Traduire les √©tats quantiques (en dernier pour traiter les commandes √† l'int√©rieur)
        translated = translateQuantumStates(translated);
        
        // Am√©liorer le style litt√©raire
        translated = addLiteraryStyle(translated);

        return translated;
    }

    private String translateBasicCommands(String script, Map<String, String> translations) {
        String result = script;
        
        // Commandes de base avec style litt√©raire
        result = result.replaceAll("HERO\\(([^)]+)\\)", "le h√©ros valeureux $1 √©merge de l'√©ther");
                        result = result.replaceAll("MOV\\(([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "$1 √©tend sa main dans le vide, projetant un √©cho miroir vers les coordonn√©es mystiques ($2, $3)");

        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*HERO:([^)]+))?\\)", 
            "canalise l'ancien pouvoir de $2" + (result.contains("HERO:") ? " par l'interm√©diaire de $3" : ""));
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "$1 s'engage dans un combat quantique avec $2");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "$1 lib√®re le pouvoir mystique de $2");

        return result;
    }

    private String translateQuantumStates(String script) {
        String result = script;
        
        // √âtats quantiques - Version plus po√©tique (sans num√©ros)
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "l'essence quantique manifeste sa projection temporelle, sa forme √©th√©r√©e dansant entre les fils de la r√©alit√©: $2");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "l'effondrement de la probabilit√© brise l'essence quantique, alors que la r√©alit√© se solidifie depuis l'√©cume quantique des possibilit√©s");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "le regard de l'observateur sur $1 d√©clenche l'effondrement de l'essence quantique, alors que la conscience fa√ßonne le tissu de l'existence");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "le d√©placement temporel de $1 cycles, alors que le temps lui-m√™me se courbe sous la volont√© de l'incertitude quantique");
        
        // Traduire les commandes MOV √† l'int√©rieur des √©tats quantiques
        result = result.replaceAll("MOV\\(([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "$1 √©tend sa main dans le vide, projetant un √©cho miroir vers les coordonn√©es mystiques ($2, $3)");
        
        // Traduire les commandes MOV avec h√©ros d√©j√† traduits
        result = result.replaceAll("MOV\\(([^,]+),\\s*le Roi Temporel,\\s*@(\\d+),(\\d+)\\)", 
            "$1 √©tend sa main dans le vide, projetant un √©cho miroir vers les coordonn√©es mystiques ($2, $3)");

        return result;
    }

    private String translateArtifactFormulas(String script) {
        String result = script;
        
        // Formules d'artefacts - Version plus mystique
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "l'interf√©rence constructive entre $1 cr√©e une vague de probabilit√© amplifi√©e, o√π toutes les possibilit√©s existent en parfaite harmonie");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "l'interf√©rence destructive annihilant $1, alors que les forces oppos√©es d√©chirent le tr√®s tissu de la r√©alit√©");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "l'amplification de $1 par le facteur de $2, cr√©ant une r√©sonance qui √©branle les tr√®s fondations de l'existence");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "la modification de l'essence du h√©ros par $2 unit√©s, alors que le champ quantique r√©pond √† l'appel du destin");

        return result;
    }

    private String replaceIdsWithDescriptions(String script) {
        String result = script;
        
        // Remplacer les IDs par leurs descriptions litt√©raires
        for (Map.Entry<String, String> entry : ID_TO_DESCRIPTION.entrySet()) {
            String id = entry.getKey();
            String description = entry.getValue();
            
            // Remplacer dans les commandes USE
            result = result.replaceAll("USE\\([^,]+,\\s*" + id + "(?:,\\s*HERO:([^)]+))?\\)", 
                "canalise l'ancien pouvoir de " + description + (result.contains("HERO:") ? " par l'interm√©diaire de $1" : ""));
            
            // Remplacer dans les commandes CREATE
            result = result.replaceAll("CREATE\\([^,]+,\\s*" + id + "(?:,\\s*@([^)]+))?\\)", 
                "invoque depuis les profondeurs de la possibilit√© " + description + (result.contains("@") ? " aux coordonn√©es mystiques ($1)" : ""));
            
            // Remplacer les r√©f√©rences directes restantes
            result = result.replaceAll("\\b" + id + "\\b", description);
        }
        
        // Nettoyer les duplications
        result = result.replaceAll("invoque depuis les profondeurs de la possibilit√© depuis les profondeurs de la possibilit√©", 
            "invoque depuis les profondeurs de la possibilit√©");
        
        // Remplacer les commandes CREATE non trait√©es (√©viter les IDs d√©j√† trait√©s)
        for (String id : ID_TO_DESCRIPTION.keySet()) {
            result = result.replaceAll("CREATE\\(([^,]+),\\s*" + id + "(?:,\\s*@([^)]+))?\\)", 
                "invoque depuis les profondeurs de la possibilit√© " + ID_TO_DESCRIPTION.get(id) + (result.contains("@") ? " aux coordonn√©es mystiques ($2)" : ""));
        }
        
        return result;
    }

    private String addLiteraryStyle(String script) {
        // Ajouter des √©l√©ments litt√©raires
        String[] sentences = script.split("\\.");
        List<String> enhancedSentences = new ArrayList<>();
        
        for (String sentence : sentences) {
            if (sentence.trim().isEmpty()) continue;
            
            String enhanced = sentence.trim();
            
            // Am√©liorer les descriptions de h√©ros
            if (enhanced.contains("HERO:")) {
                enhanced = enhanced.replaceAll("HERO:([^,\\s]+)", "le h√©ros valeureux $1");
            }
            
            // Ajouter des adjectifs mystiques (√©viter les duplications)
            if (enhanced.contains("h√©ros") && !enhanced.contains("h√©ros valeureux")) {
                enhanced = enhanced.replace("h√©ros", "h√©ros valeureux");
            }
            if (enhanced.contains("√©tend")) {
                enhanced = enhanced.replace("√©tend", "glisse √† travers le tissu de la r√©alit√©");
            }
            if (enhanced.contains("invoque")) {
                enhanced = enhanced.replace("invoque", "invoque depuis les profondeurs de la possibilit√©");
            }
            
            enhancedSentences.add(enhanced);
        }
        
        return String.join(". ", enhancedSentences) + ".";
    }

    // ===== TRADUCTION IC√îNES/EMOJIS =====

    private String translateToIcons(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "üîÆ‚ú®";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommandsIcons(translated);
        
        // Traduire les √©tats quantiques
        translated = translateQuantumStatesIcons(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulasIcons(translated);

        return translated;
    }

    private String translateBasicCommandsIcons(String script) {
        String result = script;
        
        // Commandes avec ic√¥nes
        result = result.replaceAll("HERO\\(([^)]+)\\)", "üßç($1)");
        result = result.replaceAll("MOV\\(([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "üßç‚û°Ô∏èüó∫Ô∏è($2,$3)");
        result = result.replaceAll("CREATE\\(([^,]+),\\s*([^)]+)(?:,\\s*@(\\d+),(\\d+))?\\)", 
            "‚ú®üêâ($2)" + (result.contains("@") ? "üó∫Ô∏è($3,$4)" : ""));
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*([^)]+))?\\)", 
            "üßô‚Äç‚ôÇÔ∏èüíé($2)" + (result.contains("HERO:") ? "üßç($3)" : ""));
        result = result.replaceAll("CAST\\(SPELL,\\s*([^,]+),\\s*TARGET:([^,]+),\\s*HERO:([^)]+)\\)", 
            "üîÆ‚ú®($1)üéØ($2)üßç($3)");
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öîÔ∏è($1)vs($2)");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "üîÆ($1)‚ú®($2)");
        result = result.replaceAll("ACTIVATE\\(([^)]+)\\)", 
            "‚ú®($1)");
        result = result.replaceAll("PHASE_SHIFT\\(([^,]+),\\s*([^)]+)\\)", 
            "üåÄ($1)‚è∞($2)");

        return result;
    }

    private String translateQuantumStatesIcons(String script) {
        String result = script;
        
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "üß†$1:‚è≥($2)");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "‚ùóüß†$1");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "üëÅÔ∏è($1)‚áí‚ùóüß†$2");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "‚è∞+$1");

        return result;
    }

    private String translateArtifactFormulasIcons(String script) {
        String result = script;
        
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "‚ûï($1)");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "‚ûñ($1)");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚ö°($1)√ó$2");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚ö°$2");

        return result;
    }

    // ===== TRADUCTION RUNES MYSTIQUES =====

    private String translateToRunes(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "‚ò•‚ü°êçà";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommandsRunes(translated);
        
        // Traduire les √©tats quantiques
        translated = translateQuantumStatesRunes(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulasRunes(translated);

        return translated;
    }

    private String translateBasicCommandsRunes(String script) {
        String result = script;
        
        result = result.replaceAll("HERO\\(([^)]+)\\)", "·ö∫($1)");
        result = result.replaceAll("MOV\\(([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "·ö∫·õó‚åñ($2,$3)");
        result = result.replaceAll("CREATE\\(([^,]+),\\s*([^)]+)(?:,\\s*@(\\d+),(\\d+))?\\)", 
            "·ö≤·õû($2)" + (result.contains("@") ? "‚åñ($3,$4)" : ""));
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*([^)]+))?\\)", 
            "·ö¢·õÉ($2)" + (result.contains("HERO:") ? "·ö∫($3)" : ""));
        result = result.replaceAll("CAST\\(SPELL,\\s*([^,]+),\\s*TARGET:([^,]+),\\s*HERO:([^)]+)\\)", 
            "·õä·õè($1)·ö¶($2)·ö∫($3)");
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "·õí($1)vs($2)");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "·ö®($1)·ö´($2)");
        result = result.replaceAll("ACTIVATE\\(([^)]+)\\)", 
            "·ö´($1)");
        result = result.replaceAll("PHASE_SHIFT\\(([^,]+),\\s*([^)]+)\\)", 
            "·õü($1)‚è£($2)");

        return result;
    }

    private String translateQuantumStatesRunes(String script) {
        String result = script;
        
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "‚ò•$1:‚ü°($2)");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "êçà‚ò•$1");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "‚òâ($1)‚áíêçà‚ò•$2");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "‚è£+$1");

        return result;
    }

    private String translateArtifactFormulasRunes(String script) {
        String result = script;
        
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "‚äï($1)");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "‚äñ($1)");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öõ($1)√ó$2");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öõ$2");

        return result;
    }

    // ===== M√âTHODES UTILITAIRES =====

    public List<String> getAvailableModes() {
        return Arrays.asList("literary", "icons", "runes", "all");
    }

    public Map<String, String> getTranslationExamples() {
        Map<String, String> examples = new HashMap<>();
        examples.put("HERO(Arthur)", "le h√©ros valeureux Arthur | üßç(Arthur) | ·ö∫(Arthur)");
        examples.put("MOV(HERO, Arthur, @10,10)", 
            "le h√©ros Arthur √©tend sa main dans le vide, projetant un √©cho miroir vers les coordonn√©es mystiques (10, 10) | üßç‚û°Ô∏èüó∫Ô∏è(10,10) | ·ö∫·õó‚åñ(10,10)");
        examples.put("œà001: ‚äô(Œît+1 @10,10 ‚ü∂ MOV(HERO, Arthur, @10,10))", 
            "l'essence quantique 001 manifeste sa projection temporelle: le d√©placement temporel de 1 cycles @10,10 ‚ü∂ le h√©ros Arthur √©tend sa main dans le vide, projetant un √©cho miroir vers les coordonn√©es mystiques (10, 10) | üß†001:‚è≥(‚è∞+1 @10,10 ‚ü∂ üßç‚û°Ô∏èüó∫Ô∏è(10,10)) | ‚ò•001:‚ü°(‚è£+1 @10,10 ‚ü∂ ·ö∫·õó‚åñ(10,10))");
        examples.put("CREATE(CREATURE, quantum_phoenix, @15,15)", 
            "invoque depuis les profondeurs de la possibilit√© un CREATURE nomm√© quantum_phoenix aux coordonn√©es mystiques (15, 15) | ‚ú®üêâ(quantum_phoenix)üó∫Ô∏è(15,15) | ·ö≤·õû(quantum_phoenix)‚åñ(15,15)");
        examples.put("BATTLE(quantum_phoenix, quantum_lich)", 
            "s'engage dans un combat quantique avec le quantum_phoenix contre le quantum_lich | ‚öîÔ∏è(quantum_phoenix)vs(quantum_lich) | ·õí(quantum_phoenix)vs(quantum_lich)");
        examples.put("ABILITY(quantum_phoenix, quantum_rebirth)", 
            "lib√®re le pouvoir mystique de quantum_rebirth par l'essence quantique de quantum_phoenix | üîÆ(quantum_phoenix)‚ú®(quantum_rebirth) | ·ö®(quantum_phoenix)·ö´(quantum_rebirth)");
        
        return examples;
    }
} 