package com.heroesoftimepoc.temporalengine.service;

import org.springframework.stereotype.Service;
import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@Service
public class ScriptTranslationService {

    // ===== MAPPINGS POUR TRADUCTION LITT√âRAIRE =====
    private static final Map<String, String> LITERARY_TRANSLATIONS = new HashMap<>();
    private static final Map<String, String> ICON_TRANSLATIONS = new HashMap<>();
    private static final Map<String, String> RUNE_TRANSLATIONS = new HashMap<>();

    static {
        // === TRADUCTIONS LITT√âRAIRES ANGLAISES ===
        LITERARY_TRANSLATIONS.put("HERO", "the valiant hero");
        LITERARY_TRANSLATIONS.put("MOV", "extends his hand into the void, projecting a mirrored echo");
        LITERARY_TRANSLATIONS.put("CREATE", "summons from the depths of possibility");
        LITERARY_TRANSLATIONS.put("USE", "channels the ancient power of");
        LITERARY_TRANSLATIONS.put("CAST", "weaves the threads of reality, unleashing");
        LITERARY_TRANSLATIONS.put("œà", "quantum essence");
        LITERARY_TRANSLATIONS.put("‚äô", "temporal projection");
        LITERARY_TRANSLATIONS.put("‚Ä†", "collapse of probability");
        LITERARY_TRANSLATIONS.put("Œ†", "observer's gaze");
        LITERARY_TRANSLATIONS.put("Œît", "temporal displacement");
        LITERARY_TRANSLATIONS.put("CONSTRUCTIVE", "constructive interference");
        LITERARY_TRANSLATIONS.put("DESTRUCTIVE", "destructive interference");
        LITERARY_TRANSLATIONS.put("NEUTRAL", "neutral interference");
        LITERARY_TRANSLATIONS.put("COMPLEX", "complex interference");
        LITERARY_TRANSLATIONS.put("CREATURE", "otherworldly entity");
        LITERARY_TRANSLATIONS.put("ITEM", "artifact of power");
        LITERARY_TRANSLATIONS.put("SPELL", "arcane incantation");
        LITERARY_TRANSLATIONS.put("TARGET", "chosen adversary");
        LITERARY_TRANSLATIONS.put("UNIT", "loyal companion");
        LITERARY_TRANSLATIONS.put("BATTLE", "engages in quantum combat with");
        LITERARY_TRANSLATIONS.put("ABILITY", "unleashes the mystical power of");
        LITERARY_TRANSLATIONS.put("ACTIVATE", "awakens the quantum essence of");
        LITERARY_TRANSLATIONS.put("PHASE_SHIFT", "shifts through quantum phases");
        LITERARY_TRANSLATIONS.put("quantum_wisp", "ethereal quantum wisp");
        LITERARY_TRANSLATIONS.put("probability_spider", "probability-weaving spider");
        LITERARY_TRANSLATIONS.put("quantum_knight", "quantum-armored knight");
        LITERARY_TRANSLATIONS.put("quantum_cat", "phase-shifting quantum cat");
        LITERARY_TRANSLATIONS.put("quantum_lich", "death-superposed quantum lich");
        LITERARY_TRANSLATIONS.put("quantum_beetle", "resonance-amplifying beetle");
        LITERARY_TRANSLATIONS.put("quantum_phoenix", "legendary quantum phoenix");
        LITERARY_TRANSLATIONS.put("probability_archon", "probability-governing archon");

        // === TRADUCTIONS IC√îNES/EMOJIS ===
        ICON_TRANSLATIONS.put("HERO", "üßç");
        ICON_TRANSLATIONS.put("MOV", "‚û°Ô∏è");
        ICON_TRANSLATIONS.put("CREATE", "‚ú®");
        ICON_TRANSLATIONS.put("USE", "üßô‚Äç‚ôÇÔ∏è");
        ICON_TRANSLATIONS.put("CAST", "üîÆ");
        ICON_TRANSLATIONS.put("œà", "üß†");
        ICON_TRANSLATIONS.put("‚äô", "‚è≥");
        ICON_TRANSLATIONS.put("‚Ä†", "‚ùó");
        ICON_TRANSLATIONS.put("Œ†", "üëÅÔ∏è");
        ICON_TRANSLATIONS.put("Œît", "‚è∞");
        ICON_TRANSLATIONS.put("CONSTRUCTIVE", "‚ûï");
        ICON_TRANSLATIONS.put("DESTRUCTIVE", "‚ûñ");
        ICON_TRANSLATIONS.put("NEUTRAL", "‚öñÔ∏è");
        ICON_TRANSLATIONS.put("COMPLEX", "üåÄ");
        ICON_TRANSLATIONS.put("CREATURE", "üêâ");
        ICON_TRANSLATIONS.put("ITEM", "üíé");
        ICON_TRANSLATIONS.put("SPELL", "‚ú®");
        ICON_TRANSLATIONS.put("TARGET", "üéØ");
        ICON_TRANSLATIONS.put("UNIT", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("COORDINATES", "üó∫Ô∏è");
        ICON_TRANSLATIONS.put("ENERGY", "‚ö°");
        ICON_TRANSLATIONS.put("TIME", "‚åõ");
        ICON_TRANSLATIONS.put("BATTLE", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("ABILITY", "üîÆ");
        ICON_TRANSLATIONS.put("ACTIVATE", "‚ú®");
        ICON_TRANSLATIONS.put("PHASE_SHIFT", "üåÄ");
        ICON_TRANSLATIONS.put("quantum_wisp", "üßö‚Äç‚ôÄÔ∏è");
        ICON_TRANSLATIONS.put("probability_spider", "üï∑Ô∏è");
        ICON_TRANSLATIONS.put("quantum_knight", "‚öîÔ∏è");
        ICON_TRANSLATIONS.put("quantum_cat", "üê±");
        ICON_TRANSLATIONS.put("quantum_lich", "üíÄ");
        ICON_TRANSLATIONS.put("quantum_beetle", "ü™≤");
        ICON_TRANSLATIONS.put("quantum_phoenix", "üî•");
        ICON_TRANSLATIONS.put("probability_archon", "üëë");

        // === TRADUCTIONS RUNES MYSTIQUES ===
        RUNE_TRANSLATIONS.put("HERO", "·ö∫");
        RUNE_TRANSLATIONS.put("MOV", "·õó");
        RUNE_TRANSLATIONS.put("CREATE", "·ö≤");
        RUNE_TRANSLATIONS.put("USE", "·ö¢");
        RUNE_TRANSLATIONS.put("CAST", "·õä");
        RUNE_TRANSLATIONS.put("œà", "‚ò•");
        RUNE_TRANSLATIONS.put("‚äô", "‚ü°");
        RUNE_TRANSLATIONS.put("‚Ä†", "êçà");
        RUNE_TRANSLATIONS.put("Œ†", "‚òâ");
        RUNE_TRANSLATIONS.put("Œît", "‚è£");
        RUNE_TRANSLATIONS.put("CONSTRUCTIVE", "‚äï");
        RUNE_TRANSLATIONS.put("DESTRUCTIVE", "‚äñ");
        RUNE_TRANSLATIONS.put("NEUTRAL", "‚äó");
        RUNE_TRANSLATIONS.put("COMPLEX", "‚äò");
        RUNE_TRANSLATIONS.put("CREATURE", "·õû");
        RUNE_TRANSLATIONS.put("ITEM", "·õÉ");
        RUNE_TRANSLATIONS.put("SPELL", "·õè");
        RUNE_TRANSLATIONS.put("TARGET", "·ö¶");
        RUNE_TRANSLATIONS.put("UNIT", "·öπ");
        RUNE_TRANSLATIONS.put("COORDINATES", "‚åñ");
        RUNE_TRANSLATIONS.put("ENERGY", "‚öõ");
        RUNE_TRANSLATIONS.put("TIME", "‚èú");
        RUNE_TRANSLATIONS.put("BATTLE", "·õí");
        RUNE_TRANSLATIONS.put("ABILITY", "·ö®");
        RUNE_TRANSLATIONS.put("ACTIVATE", "·ö´");
        RUNE_TRANSLATIONS.put("PHASE_SHIFT", "·õü");
        RUNE_TRANSLATIONS.put("quantum_wisp", "·öπ");
        RUNE_TRANSLATIONS.put("probability_spider", "·õä");
        RUNE_TRANSLATIONS.put("quantum_knight", "·ö≤");
        RUNE_TRANSLATIONS.put("quantum_cat", "·ö≤·ö®·õè");
        RUNE_TRANSLATIONS.put("quantum_lich", "·õö");
        RUNE_TRANSLATIONS.put("quantum_beetle", "·õí");
        RUNE_TRANSLATIONS.put("quantum_phoenix", "·ö†");
        RUNE_TRANSLATIONS.put("probability_archon", "·ö®");
    }

    // ===== M√âTHODES PRINCIPALES =====

    public Map<String, Object> translateScript(String script, String mode) {
        Map<String, Object> result = new HashMap<>();
        result.put("original", script);
        result.put("mode", mode);

        switch (mode.toLowerCase()) {
            case "literary":
                result.put("translated", translateToLiterary(script));
                break;
            case "icons":
                result.put("translated", translateToIcons(script));
                break;
            case "runes":
                result.put("translated", translateToRunes(script));
                break;
            case "all":
                result.put("literary", translateToLiterary(script));
                result.put("icons", translateToIcons(script));
                result.put("runes", translateToRunes(script));
                break;
            default:
                result.put("error", "Mode de traduction non reconnu: " + mode);
        }

        return result;
    }

    // ===== TRADUCTION LITT√âRAIRE ANGLAISE =====

    private String translateToLiterary(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "The void whispers of forgotten possibilities...";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommands(translated, LITERARY_TRANSLATIONS);
        
        // Traduire les √©tats quantiques
        translated = translateQuantumStates(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulas(translated);
        
        // Ajouter du style litt√©raire
        translated = addLiteraryStyle(translated);

        return translated;
    }

    private String translateBasicCommands(String script, Map<String, String> translations) {
        String result = script;
        
        // Patterns pour les commandes - Version plus litt√©raire et po√©tique
        result = result.replaceAll("HERO\\(([^)]+)\\)", "the valiant hero $1 emerges from the depths of forgotten memories");
        result = result.replaceAll("MOV\\(([^,]+),\\s*([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "the valiant hero $2 glides through the fabric of reality, his essence flowing like liquid starlight across the quantum landscape");
        result = result.replaceAll("CREATE\\(([^,]+),\\s*([^,]+)(?:,\\s*@(\\d+),(\\d+))?\\)", 
            "summons from the depths of possibility a $1 named $2, its form shimmering with the essence of quantum uncertainty");
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*([^)]+))?\\)", 
            "channels the ancient power of the $1 $2" + 
            (result.contains("HERO:") ? " through the chosen vessel $3, absorbing the very essence of creation" : ""));
        result = result.replaceAll("CAST\\(SPELL,\\s*([^,]+),\\s*TARGET:([^,]+),\\s*HERO:([^)]+)\\)", 
            "weaves the threads of reality, unleashing the arcane incantation $1 upon the chosen adversary $2 through the mystical conduit $3");
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "engages in quantum combat with the $1 against the $2, their essences intertwining in a dance of probability and uncertainty");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "unleashes the mystical power of $2 through the quantum essence of $1, causing reality itself to shimmer and shift");
        result = result.replaceAll("ACTIVATE\\(([^)]+)\\)", 
            "awakens the quantum essence of the $1, its ancient power pulsing with the rhythm of creation");
        result = result.replaceAll("PHASE_SHIFT\\(([^,]+),\\s*([^)]+)\\)", 
            "shifts through quantum phases with the $1 by $2 radians, transcending the boundaries of conventional reality");

        return result;
    }

    private String translateQuantumStates(String script) {
        String result = script;
        
        // √âtats quantiques - Version plus po√©tique
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "quantum essence $1 manifests through temporal projection, its ethereal form dancing between the threads of reality: $2");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "the collapse of probability shatters quantum essence $1, as reality solidifies from the quantum foam of possibilities");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "the observer's gaze upon $1 triggers the collapse of quantum essence $2, as consciousness shapes the fabric of existence");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "temporal displacement of $1 cycles, as time itself bends to the will of quantum uncertainty");

        return result;
    }

    private String translateArtifactFormulas(String script) {
        String result = script;
        
        // Formules d'artefacts - Version plus mystique
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "constructive interference between $1 creates a wave of amplified probability, where all possibilities exist in perfect harmony");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "destructive interference annihilating $1, as opposing forces tear at the very fabric of reality");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "amplification of $1 by the factor of $2, creating a resonance that shakes the very foundations of existence");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "modification of the hero's essence by $2 units, as the quantum field responds to the call of destiny");

        return result;
    }

    private String addLiteraryStyle(String script) {
        // Ajouter des √©l√©ments litt√©raires
        String[] sentences = script.split("\\.");
        List<String> enhancedSentences = new ArrayList<>();
        
        for (String sentence : sentences) {
            if (sentence.trim().isEmpty()) continue;
            
            String enhanced = sentence.trim();
            
            // Ajouter des adjectifs mystiques
            if (enhanced.contains("hero")) {
                enhanced = enhanced.replace("hero", "valiant hero");
            }
            if (enhanced.contains("moves")) {
                enhanced = enhanced.replace("moves", "glides through the fabric of reality");
            }
            if (enhanced.contains("creates")) {
                enhanced = enhanced.replace("creates", "summons from the depths of possibility");
            }
            
            enhancedSentences.add(enhanced);
        }
        
        return String.join(". ", enhancedSentences) + ".";
    }

    // ===== TRADUCTION IC√îNES/EMOJIS =====

    private String translateToIcons(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "üîÆ‚ú®";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommandsIcons(translated);
        
        // Traduire les √©tats quantiques
        translated = translateQuantumStatesIcons(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulasIcons(translated);

        return translated;
    }

    private String translateBasicCommandsIcons(String script) {
        String result = script;
        
        // Commandes avec ic√¥nes
        result = result.replaceAll("HERO\\(([^)]+)\\)", "üßç($1)");
        result = result.replaceAll("MOV\\(([^,]+),\\s*([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "üßç‚û°Ô∏èüó∫Ô∏è($3,$4)");
        result = result.replaceAll("CREATE\\(([^,]+),\\s*([^,]+)(?:,\\s*@(\\d+),(\\d+))?\\)", 
            "‚ú®üêâ($2)" + (result.contains("@") ? "üó∫Ô∏è($3,$4)" : ""));
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*([^)]+))?\\)", 
            "üßô‚Äç‚ôÇÔ∏èüíé($2)" + (result.contains("HERO:") ? "üßç($3)" : ""));
        result = result.replaceAll("CAST\\(SPELL,\\s*([^,]+),\\s*TARGET:([^,]+),\\s*HERO:([^)]+)\\)", 
            "üîÆ‚ú®($1)üéØ($2)üßç($3)");
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öîÔ∏è($1)vs($2)");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "üîÆ($1)‚ú®($2)");
        result = result.replaceAll("ACTIVATE\\(([^)]+)\\)", 
            "‚ú®($1)");
        result = result.replaceAll("PHASE_SHIFT\\(([^,]+),\\s*([^)]+)\\)", 
            "üåÄ($1)‚è∞($2)");

        return result;
    }

    private String translateQuantumStatesIcons(String script) {
        String result = script;
        
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "üß†$1:‚è≥($2)");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "‚ùóüß†$1");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "üëÅÔ∏è($1)‚áí‚ùóüß†$2");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "‚è∞+$1");

        return result;
    }

    private String translateArtifactFormulasIcons(String script) {
        String result = script;
        
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "‚ûï($1)");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "‚ûñ($1)");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚ö°($1)√ó$2");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚ö°$2");

        return result;
    }

    // ===== TRADUCTION RUNES MYSTIQUES =====

    private String translateToRunes(String script) {
        if (script == null || script.trim().isEmpty()) {
            return "‚ò•‚ü°êçà";
        }

        String translated = script;

        // Traduire les commandes de base
        translated = translateBasicCommandsRunes(translated);
        
        // Traduire les √©tats quantiques
        translated = translateQuantumStatesRunes(translated);
        
        // Traduire les formules d'artefacts
        translated = translateArtifactFormulasRunes(translated);

        return translated;
    }

    private String translateBasicCommandsRunes(String script) {
        String result = script;
        
        result = result.replaceAll("HERO\\(([^)]+)\\)", "·ö∫($1)");
        result = result.replaceAll("MOV\\(([^,]+),\\s*([^,]+),\\s*@(\\d+),(\\d+)\\)", 
            "·ö∫·õó‚åñ($3,$4)");
        result = result.replaceAll("CREATE\\(([^,]+),\\s*([^,]+)(?:,\\s*@(\\d+),(\\d+))?\\)", 
            "·ö≤·õû($2)" + (result.contains("@") ? "‚åñ($3,$4)" : ""));
        result = result.replaceAll("USE\\(([^,]+),\\s*([^,]+)(?:,\\s*([^)]+))?\\)", 
            "·ö¢·õÉ($2)" + (result.contains("HERO:") ? "·ö∫($3)" : ""));
        result = result.replaceAll("CAST\\(SPELL,\\s*([^,]+),\\s*TARGET:([^,]+),\\s*HERO:([^)]+)\\)", 
            "·õä·õè($1)·ö¶($2)·ö∫($3)");
        result = result.replaceAll("BATTLE\\(([^,]+),\\s*([^)]+)\\)", 
            "·õí($1)vs($2)");
        result = result.replaceAll("ABILITY\\(([^,]+),\\s*([^)]+)\\)", 
            "·ö®($1)·ö´($2)");
        result = result.replaceAll("ACTIVATE\\(([^)]+)\\)", 
            "·ö´($1)");
        result = result.replaceAll("PHASE_SHIFT\\(([^,]+),\\s*([^)]+)\\)", 
            "·õü($1)‚è£($2)");

        return result;
    }

    private String translateQuantumStatesRunes(String script) {
        String result = script;
        
        result = result.replaceAll("œà(\\d+):\\s*‚äô\\((.*)\\)", 
            "‚ò•$1:‚ü°($2)");
        result = result.replaceAll("‚Ä†œà(\\d+)", 
            "êçà‚ò•$1");
        result = result.replaceAll("Œ†\\(([^)]+)\\)\\s*‚áí\\s*‚Ä†œà(\\d+)", 
            "‚òâ($1)‚áíêçà‚ò•$2");
        result = result.replaceAll("Œît\\+(\\d+)", 
            "‚è£+$1");

        return result;
    }

    private String translateArtifactFormulasRunes(String script) {
        String result = script;
        
        result = result.replaceAll("CONSTRUCTIVE\\(([^)]+)\\)", 
            "‚äï($1)");
        result = result.replaceAll("DESTRUCTIVE\\(([^)]+)\\)", 
            "‚äñ($1)");
        result = result.replaceAll("AMPLIFY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öõ($1)√ó$2");
        result = result.replaceAll("MODIFY_ENERGY\\(([^,]+),\\s*([^)]+)\\)", 
            "‚öõ$2");

        return result;
    }

    // ===== M√âTHODES UTILITAIRES =====

    public List<String> getAvailableModes() {
        return Arrays.asList("literary", "icons", "runes", "all");
    }

    public Map<String, String> getTranslationExamples() {
        Map<String, String> examples = new HashMap<>();
        examples.put("HERO(Arthur)", "the valiant hero Arthur | üßç(Arthur) | ·ö∫(Arthur)");
        examples.put("MOV(HERO, Arthur, @10,10)", 
            "the hero Arthur extends his hand into the void, projecting a mirrored echo to the coordinates (10, 10) | üßç‚û°Ô∏èüó∫Ô∏è(10,10) | ·ö∫·õó‚åñ(10,10)");
        examples.put("œà001: ‚äô(Œît+1 @10,10 ‚ü∂ MOV(HERO, Arthur, @10,10))", 
            "quantum essence 001 manifests through temporal projection: temporal displacement of 1 cycles @10,10 ‚ü∂ the hero Arthur extends his hand into the void, projecting a mirrored echo to the coordinates (10, 10) | üß†001:‚è≥(‚è∞+1 @10,10 ‚ü∂ üßç‚û°Ô∏èüó∫Ô∏è(10,10)) | ‚ò•001:‚ü°(‚è£+1 @10,10 ‚ü∂ ·ö∫·õó‚åñ(10,10))");
        examples.put("CREATE(CREATURE, quantum_phoenix, @15,15)", 
            "summons from the depths of possibility a CREATURE named quantum_phoenix at the mystical coordinates (15, 15) | ‚ú®üêâ(quantum_phoenix)üó∫Ô∏è(15,15) | ·ö≤·õû(quantum_phoenix)‚åñ(15,15)");
        examples.put("BATTLE(quantum_phoenix, quantum_lich)", 
            "engages in quantum combat with the quantum_phoenix against the quantum_lich | ‚öîÔ∏è(quantum_phoenix)vs(quantum_lich) | ·õí(quantum_phoenix)vs(quantum_lich)");
        examples.put("ABILITY(quantum_phoenix, quantum_rebirth)", 
            "unleashes the mystical power of quantum_rebirth through the quantum essence of quantum_phoenix | üîÆ(quantum_phoenix)‚ú®(quantum_rebirth) | ·ö®(quantum_phoenix)·ö´(quantum_rebirth)");
        
        return examples;
    }
} 