#!/bin/bash

# üéõÔ∏è TEST SC√âNARIO PANOPTICŒ©N - Version JSON
# ==========================================
# Charge et ex√©cute le sc√©nario JSON panopticon_axis_test.json

echo "üéõÔ∏è TEST SC√âNARIO PANOPTICŒ©N - JSON VERSION"
echo "==========================================="
echo "üìã Chargement du sc√©nario JSON complet..."

# Configuration
HOST="localhost:8080"
SCENARIO_JSON="game_assets/scenarios/visualizer/panopticon_axis_test.json"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# Fonction pour logger avec timestamp
log_with_time() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')]${NC} $1"
}

# V√©rifier que le fichier JSON existe
if [ ! -f "$SCENARIO_JSON" ]; then
    echo -e "${RED}‚ùå Fichier sc√©nario non trouv√©: $SCENARIO_JSON${NC}"
    exit 1
fi

log_with_time "üìÑ Fichier sc√©nario trouv√©: $(basename $SCENARIO_JSON)"

# Fonction pour tester la connexion backend
test_backend() {
    echo -e "\n${BLUE}üîç V√©rification du backend...${NC}"
    if curl -s "$HOST/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend accessible sur $HOST${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Backend non accessible sur $HOST${NC}"
        echo -e "${YELLOW}üí° Assurez-vous que le backend est d√©marr√©${NC}"
        return 1
    fi
}

# Fonction pour cr√©er un nouveau jeu
create_game() {
    echo -e "\n${BLUE}üéÆ Cr√©ation d'un nouveau jeu...${NC}"
    
    response=$(curl -s -X POST "http://$HOST/api/temporal/games" \
        -H "Content-Type: application/json" \
        -d '{"gameName": "PANOPTICON Test", "playerCount": 2}')
    
    # Extraire l'ID du jeu
    GAME_ID=$(echo "$response" | jq -r '.gameId // empty')
    
    if [ -n "$GAME_ID" ]; then
        echo -e "${GREEN}‚úÖ Jeu cr√©√© avec ID: $GAME_ID${NC}"
        return 0
    else
        echo -e "${RED}‚ùå √âchec de cr√©ation du jeu${NC}"
        echo "$response"
        return 1
    fi
}

# Fonction pour charger le sc√©nario JSON complet
load_json_scenario() {
    echo -e "\n${PURPLE}üìã Chargement du sc√©nario JSON...${NC}"
    
    # Lire le fichier JSON
    if ! scenario_data=$(cat "$SCENARIO_JSON"); then
        echo -e "${RED}‚ùå Impossible de lire le fichier JSON${NC}"
        return 1
    fi
    
    # Valider le JSON
    if ! echo "$scenario_data" | jq . > /dev/null 2>&1; then
        echo -e "${RED}‚ùå JSON invalide${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Sc√©nario JSON charg√© et valid√©${NC}"
    
    # Extraire les informations du sc√©nario
    scenario_name=$(echo "$scenario_data" | jq -r '.scenario.name')
    scenario_desc=$(echo "$scenario_data" | jq -r '.scenario.description')
    heroes_count=$(echo "$scenario_data" | jq '.heroes | length')
    psi_states_count=$(echo "$scenario_data" | jq '.psi_states | length')
    
    echo -e "${CYAN}üìñ Nom: $scenario_name${NC}"
    echo -e "${CYAN}üìù Description: $scenario_desc${NC}"
    echo -e "${CYAN}ü¶∏ H√©ros: $heroes_count${NC}"
    echo -e "${CYAN}‚ö° œà-States: $psi_states_count${NC}"
    
    return 0
}

# Fonction pour envoyer le sc√©nario JSON au backend
send_json_scenario() {
    echo -e "\n${BLUE}üöÄ Envoi du sc√©nario au backend...${NC}"
    
    # Envoyer le sc√©nario complet
    response=$(curl -s -X POST "http://$HOST/api/scenarios/load" \
        -H "Content-Type: application/json" \
        -d @"$SCENARIO_JSON")
    
    # V√©rifier le succ√®s
    success=$(echo "$response" | jq -r '.success // false')
    if [ "$success" = "true" ]; then
        echo -e "${GREEN}‚úÖ Sc√©nario charg√© avec succ√®s${NC}"
        
        # Afficher les d√©tails de la r√©ponse
        if echo "$response" | jq -e '.gameId' > /dev/null; then
            game_id=$(echo "$response" | jq -r '.gameId')
            echo -e "${CYAN}üéÆ ID du jeu: $game_id${NC}"
        fi
        
        if echo "$response" | jq -e '.message' > /dev/null; then
            message=$(echo "$response" | jq -r '.message')
            echo -e "${CYAN}üí¨ Message: $message${NC}"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå √âchec du chargement du sc√©nario${NC}"
        echo "$response" | jq '.'
        return 1
    fi
}

# Fonction pour ex√©cuter les actions du sc√©nario
execute_scenario_actions() {
    echo -e "\n${PURPLE}‚ö° Ex√©cution des œà-states du sc√©nario...${NC}"
    
    # Lire les œà-states depuis le JSON
    psi_states=$(cat "$SCENARIO_JSON" | jq -c '.psi_states[]')
    
    while IFS= read -r psi_state; do
        psi_id=$(echo "$psi_state" | jq -r '.id')
        action=$(echo "$psi_state" | jq -r '.action')
        description=$(echo "$psi_state" | jq -r '.description // "Action œà-state"')
        
        echo -e "\n${BLUE}‚Üí Ex√©cution $psi_id: ${NC}$action"
        echo -e "${YELLOW}  üìù $description${NC}"
        
        # Envoyer l'action au backend
        response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
            -H "Content-Type: application/json" \
            -d "{\"script\":\"$action\"}")
        
        # V√©rifier le succ√®s
        success=$(echo "$response" | jq -r '.success // false')
        if [ "$success" = "true" ]; then
            echo -e "${GREEN}  ‚úÖ $psi_id ex√©cut√©${NC}"
        else
            echo -e "${RED}  ‚ùå Erreur $psi_id${NC}"
            echo "$response" | jq '.'
        fi
        
        # Petite pause entre les actions
        sleep 1
        
    done <<< "$psi_states"
}

# Fonction pour v√©rifier les r√©sultats attendus
check_expected_results() {
    echo -e "\n${PURPLE}üîç V√©rification des r√©sultats attendus...${NC}"
    
    expected_results=$(cat "$SCENARIO_JSON" | jq -r '.expected_results // empty')
    
    if [ -n "$expected_results" ]; then
        echo "$expected_results" | jq -r 'to_entries[] | "  \(.key): \(.value)"' | while read -r result; do
            echo -e "${CYAN}  üìã $result${NC}"
        done
    else
        echo -e "${YELLOW}  ‚ÑπÔ∏è Aucun r√©sultat attendu sp√©cifi√©${NC}"
    fi
}

# Fonction pour afficher le r√©sum√© final
show_summary() {
    echo -e "\n${PURPLE}üìä R√âSUM√â DU TEST${NC}"
    echo "===================="
    
    # Obtenir l'√©tat du jeu
    if [ -n "$GAME_ID" ]; then
        game_state=$(curl -s "http://$HOST/api/games/$GAME_ID/state" | jq '.')
        
        if [ "$game_state" != "null" ]; then
            echo -e "${CYAN}üéÆ √âtat du jeu:${NC}"
            echo "$game_state" | jq '.'
        fi
    fi
    
    echo -e "\n${GREEN}‚úÖ Test du sc√©nario PANOPTICON termin√©${NC}"
}

# EX√âCUTION PRINCIPALE
main() {
    log_with_time "üöÄ D√©marrage du test PANOPTICON JSON"
    
    # √âtape 1: V√©rifier le backend
    if ! test_backend; then
        exit 1
    fi
    
    # √âtape 2: Charger et valider le JSON
    if ! load_json_scenario; then
        exit 1
    fi
    
    # √âtape 3: Cr√©er un jeu
    if ! create_game; then
        exit 1
    fi
    
    # √âtape 4: Envoyer le sc√©nario (si l'endpoint existe)
    echo -e "\n${YELLOW}‚ö†Ô∏è Note: L'endpoint /api/scenarios/load n'existe peut-√™tre pas encore${NC}"
    echo -e "${YELLOW}   Continuons avec l'ex√©cution manuelle des actions...${NC}"
    
    # √âtape 5: Ex√©cuter les actions du sc√©nario
    execute_scenario_actions
    
    # √âtape 6: V√©rifier les r√©sultats
    check_expected_results
    
    # √âtape 7: R√©sum√©
    show_summary
    
    log_with_time "üèÅ Test termin√©"
}

# Gestion des erreurs
set -e
trap 'echo -e "\n${RED}‚ùå Erreur d√©tect√©e, arr√™t du script${NC}"; exit 1' ERR

# Lancer le test
main "$@"