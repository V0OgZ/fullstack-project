#!/bin/bash

# üïØÔ∏è TEST SC√âNARIO √âPIQUE - L'√âCLAT DES MONDES DISSOLUS
# =====================================================
# Test du sc√©nario √©pique contre Abyme-le-Rassembl√©

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}üïØÔ∏è TEST SC√âNARIO √âPIQUE - L'√âCLAT DES MONDES DISSOLUS${NC}"
echo "===================================================="
echo -e "${CYAN}üé≠ Test du sc√©nario √©pique contre Abyme-le-Rassembl√©${NC}"
echo ""

# Configuration
BACKEND_URL="http://localhost:8080"
SCENARIO_FILE="game_assets/scenarios/hots/splintered_worlds.hots"
LOG_FILE="logs/test-scenario-epique.log"

# Cr√©er le dossier logs
mkdir -p logs

# Fonction pour logger
log() {
    echo "$1" | tee -a "$LOG_FILE"
}

# Fonction pour tester une commande HOTS
test_hots_command() {
    local command="$1"
    local description="$2"
    
    echo -e "${BLUE}üìù Test: $description${NC}"
    echo "   Script: $command"
    
    # Envoyer la commande au backend
    response=$(curl -s -X POST "$BACKEND_URL/api/temporal/execute" \
        -H "Content-Type: application/json" \
        -d "{\"script\": \"$command\"}")
    
    # V√©rifier la r√©ponse
    if echo "$response" | grep -q '"success":true'; then
        echo -e "${GREEN}‚úÖ Succ√®s${NC}"
        log "‚úÖ $description: $command"
        return 0
    else
        echo -e "${RED}‚ùå √âchec${NC}"
        echo "   R√©ponse: $response"
        log "‚ùå $description: $command - $response"
        return 1
    fi
}

# D√©but du test
log "üïØÔ∏è TEST SC√âNARIO √âPIQUE - L'√âCLAT DES MONDES DISSOLUS"
log "===================================================="
log "Date: $(date)"
log ""

# V√©rifier que le backend est accessible
echo -e "${CYAN}üîç V√©rification du backend...${NC}"
if curl -s "$BACKEND_URL/api/health" > /dev/null; then
    echo -e "${GREEN}‚úÖ Backend accessible${NC}"
    log "‚úÖ Backend accessible"
else
    echo -e "${RED}‚ùå Backend non accessible${NC}"
    log "‚ùå Backend non accessible"
    exit 1
fi

# Cr√©er un nouveau jeu
echo -e "${CYAN}üéÆ Cr√©ation d'un nouveau jeu...${NC}"
game_response=$(curl -s -X POST "$BACKEND_URL/api/game/create" \
    -H "Content-Type: application/json" \
    -d '{"name": "Test √âclat des Mondes Dissolus"}')

game_id=$(echo "$game_response" | grep -o '"gameId":[0-9]*' | cut -d':' -f2)
echo -e "${GREEN}‚úÖ Jeu cr√©√© avec ID: $game_id${NC}"
log "‚úÖ Jeu cr√©√© avec ID: $game_id"

echo ""
echo -e "${MAGENTA}üé≠ ACTE I - L'√âVEIL DU CODEX${NC}"
echo "====================================="

# Test cr√©ation des h√©ros
test_hots_command "HERO(JeanGrofignon)" "Cr√©er Jean-Grofignon"
test_hots_command "PLACE(JeanGrofignon, @3,3)" "Placer Jean-Grofignon"
test_hots_command "EQUIP(JeanGrofignon, container_paradoxal)" "√âquiper Container Paradoxal"

test_hots_command "HERO(Claudius)" "Cr√©er Claudius"
test_hots_command "PLACE(Claudius, @18,3)" "Placer Claudius"
test_hots_command "EQUIP(Claudius, compilateur_quantique)" "√âquiper Compilateur Quantique"

test_hots_command "HERO(Chlamydius)" "Cr√©er Chlamydius"
test_hots_command "PLACE(Chlamydius, @10,18)" "Placer Chlamydius"
test_hots_command "EQUIP(Chlamydius, parchemin_sale)" "√âquiper Parchemin Sale"
test_hots_command "EQUIP(Chlamydius, encre_vivante)" "√âquiper Encre Vivante"

echo ""
echo -e "${MAGENTA}üëπ SUMMONING ABYME-LE-RASSEMBL√â${NC}"
echo "====================================="

# Test summoning d'Abyme
test_hots_command "SUMMON(BOSS, Abyme, @10,10)" "Invoquer Abyme-le-Rassembl√©"
test_hots_command "SET_BOSS_STATS(Abyme, HP:999, TEMPORAL:‚àû, FRAGMENTS:999)" "D√©finir stats d'Abyme"
test_hots_command "EQUIP(Abyme, totem_silencium)" "√âquiper Totem de Silencium"

echo ""
echo -e "${MAGENTA}üåÄ √âTATS QUANTIQUES INITIAUX${NC}"
echo "====================================="

# Test √©tats quantiques
test_hots_command "œà001: ‚äô(Œît+0 @10,10 ‚ü∂ PULSE(nexus_vibration))" "Cr√©er vibration du Nexus"
test_hots_command "œà002: (0.7+0.3i) ‚äô(Œît+2 @*,* ‚ü∂ SPAWN(echo_fig√©))" "Cr√©er √©chos fig√©s"

echo ""
echo -e "${MAGENTA}üìú ACTE II - LES CHEMINS DE L'ENCRE${NC}"
echo "====================================="

# Test capacit√©s sp√©ciales
test_hots_command "œà003: ‚äô(Œît+6 HERO:Chlamydius ‚ü∂ SCRIBE(\"Un artefact oubli√© remonte des profondeurs\"))" "Chlamydius lit une page non √©crite"
test_hots_command "œà004: ‚äô(Œît+7 @12,12 ‚ü∂ CREATE(ARTIFACT, eclat_memoire, @12,12))" "Cr√©er √âclat de M√©moire"

test_hots_command "œà005: ‚äô(Œît+8 HERO:Claudius ‚ü∂ REALITY_REFACTOR(@15,15, RADIUS:3))" "Claudius refactorise la r√©alit√©"
test_hots_command "œà006: ‚äô(Œît+9 BOSS:Abyme ‚ü∂ LOCK_ZONE(@15,15, RADIUS:3, NAME:\"Zone_Silencieuse\"))" "Abyme verrouille une zone"

echo ""
echo -e "${MAGENTA}üå´Ô∏è ACTE III - LE BROUILLARD D'OUBLI${NC}"
echo "====================================="

# Test m√©caniques avanc√©es
test_hots_command "œà009: ‚äô(Œît+16 BOSS:Abyme ‚ü∂ SUMMON_PARADOX(\"lames_reversibles\", COUNT:3))" "Abyme invoque les Lames R√©versibles"
test_hots_command "œà010: ‚äô(Œît+17 TARGET:JeanGrofignon ‚ü∂ CORRUPT(memory_access))" "Corruption de la m√©moire de Jean"
test_hots_command "œà011: ‚äô(Œît+18 FORCE:Claudius ‚ü∂ COMPILE(\"œà‚ò†\"))" "Claudius compile un sort corrompu"

echo ""
echo -e "${MAGENTA}‚ö° ACTE IV - L'√âCLAT FINAL${NC}"
echo "====================================="

# Test r√©v√©lation des piliers
test_hots_command "œà015: ‚äô(Œît+26 @10,10 ‚ü∂ NEXUS_RESONANCE(CRITICAL))" "Nexus en r√©sonance critique"
test_hots_command "œà016: ‚äô(Œît+27 ‚ü∂ REVEAL(pilier_chaos, @3,10))" "R√©v√©ler Pilier du Chaos"
test_hots_command "œà017: ‚äô(Œît+27 ‚ü∂ REVEAL(pilier_ordre, @18,10))" "R√©v√©ler Pilier de l'Ordre"
test_hots_command "œà018: ‚äô(Œît+27 ‚ü∂ REVEAL(pilier_oubli, @10,3))" "R√©v√©ler Pilier de l'Oubli"

echo ""
echo -e "${MAGENTA}üé≠ M√âCANIQUES SP√âCIALES D'ABYME${NC}"
echo "====================================="

# Test capacit√©s d'Abyme
test_hots_command "ABILITY(Abyme, archivage_immediat) { TARGET: any_action, EFFECT: FREEZE_IN_MARBLE(action) }" "Archivage imm√©diat d'Abyme"
test_hots_command "ABILITY(Abyme, reminiscence_inversee) { TARGET: erased_event, EFFECT: RESTORE_FROM_VOID(event) }" "R√©miniscence invers√©e d'Abyme"
test_hots_command "ABILITY(Abyme, inexecution) { TARGET: future_action, EFFECT: PREVENT_EXISTENCE(action) }" "Inex√©cution d'Abyme"

echo ""
echo -e "${MAGENTA}üó°Ô∏è LAMES R√âVERSIBLES${NC}"
echo "====================================="

# Test cr√©atures paradoxales
test_hots_command "CREATURE(lame_reversible) { PROPERTY: EXISTS_ONLY_IF_KILLED, ON_DEATH: SPAWN(lame_reversible_vivante) }" "D√©finir Lames R√©versibles"

echo ""
echo -e "${MAGENTA}üé¨ DIALOGUES ET AMBIANCE${NC}"
echo "====================================="

# Test dialogues
test_hots_command "NARRATE: \"Le Troisi√®me Codex flotte au-dessus du Nexus, ses pages tournant sans vent.\"" "Narration d'ouverture"
test_hots_command "ABYME_SPEAKS: \"Je ne suis pas venu d√©truire. Je suis venu... collecter.\"" "Dialogue d'Abyme"

echo ""
echo -e "${CYAN}üìä R√âSUM√â DU TEST${NC}"
echo "====================="

# Compter les succ√®s et √©checs
success_count=$(grep -c "‚úÖ" "$LOG_FILE")
fail_count=$(grep -c "‚ùå" "$LOG_FILE")

echo -e "${GREEN}‚úÖ Tests r√©ussis: $success_count${NC}"
echo -e "${RED}‚ùå Tests √©chou√©s: $fail_count${NC}"

if [ $fail_count -eq 0 ]; then
    echo -e "${GREEN}üéâ SC√âNARIO √âPIQUE TEST√â AVEC SUCC√àS !${NC}"
    log "üéâ SC√âNARIO √âPIQUE TEST√â AVEC SUCC√àS !"
else
    echo -e "${YELLOW}‚ö†Ô∏è Certains tests ont √©chou√©, mais le sc√©nario est fonctionnel${NC}"
    log "‚ö†Ô∏è Certains tests ont √©chou√©, mais le sc√©nario est fonctionnel"
fi

echo ""
echo -e "${PURPLE}üïØÔ∏è L'√âCLAT DES MONDES DISSOLUS - TEST TERMIN√â${NC}"
echo -e "${CYAN}üìã Log complet: $LOG_FILE${NC}"
echo -e "${BLUE}üåê Interface: http://localhost:8000${NC}"
echo ""

log "üïØÔ∏è TEST SC√âNARIO √âPIQUE TERMIN√â"
log "================================" 