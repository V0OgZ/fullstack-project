#!/bin/bash

# üéÆ Heroes of Time - Gestionnaire de Scripts Principal
# =====================================================
# Script principal pour g√©rer tous les scripts et tests du syst√®me

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}üéÆ $1${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

print_menu() {
    echo -e "${YELLOW}üìã MENU PRINCIPAL${NC}"
    echo -e "${CYAN}================${NC}"
    echo ""
    echo -e "${GREEN}üöÄ SCRIPTS DE D√âMONSTRATION:${NC}"
    echo "  1) Demo Ultra Simple      - D√©monstration rapide et efficace"
    echo "  2) Test Simple           - Tests basiques des fonctionnalit√©s"
    echo "  3) AutoPlay Demo         - D√©monstration compl√®te automatique"
    echo "  4) Test Rapide HOTS      - Test complet des sc√©narios HOTS"
    echo ""
    echo -e "${BLUE}üîß SCRIPTS DE GESTION:${NC}"
    echo "  5) D√©marrer Backend      - Lancer le backend seulement"
    echo "  6) Nettoyer Syst√®me      - Nettoyer tous les processus"
    echo "  7) V√©rifier Sant√©        - V√©rifier l'√©tat du syst√®me"
    echo ""
    echo -e "${MAGENTA}üìä RAPPORTS ET DOCUMENTATION:${NC}"
    echo "  8) Afficher Rapports     - Liste tous les rapports"
    echo "  9) Statut Syst√®me        - Afficher l'√©tat actuel"
    echo " 10) Aide Scripts          - Aide sur l'utilisation"
    echo ""
    echo -e "${RED}üõë CONTR√îLE:${NC}"
    echo "  0) Quitter"
    echo ""
}

# Fonction pour nettoyer le syst√®me
nettoyer_systeme() {
    print_header "NETTOYAGE COMPLET DU SYST√àME"
    
    echo "üßπ Nettoyage des processus..."
    
    # Tuer tous les processus Java Spring Boot
    pkill -f "spring-boot:run" 2>/dev/null || true
    pkill -f "java.*spring-boot" 2>/dev/null || true
    
    # Tuer tous les serveurs HTTP Python
    pkill -f "python3.*http.server" 2>/dev/null || true
    
    # Nettoyer les ports sp√©cifiques
    for port in 8080 8000 5173 8001; do
        pids=$(lsof -ti:$port 2>/dev/null || true)
        if [ -n "$pids" ]; then
            echo "  üîß Nettoyage du port $port..."
            echo $pids | xargs kill -9 2>/dev/null || true
        fi
    done
    
    sleep 2
    echo "‚úÖ Syst√®me nettoy√©!"
}

# Fonction pour d√©marrer le backend
demarrer_backend() {
    print_header "D√âMARRAGE DU BACKEND"
    
    echo "üîß D√©marrage du backend Heroes of Time..."
    
    cd backend
    
    # V√©rifier si mvnw existe, sinon utiliser mvn
    if [ ! -f "./mvnw" ]; then
        echo "‚ÑπÔ∏è  Utilisation de mvn"
        MVN_CMD="mvn"
    else
        MVN_CMD="./mvnw"
    fi
    
    echo "üöÄ Lancement du backend..."
    $MVN_CMD spring-boot:run -Dspring-boot.run.arguments="--heroes.parser.use.antlr=false" > ../backend-gestion.log 2>&1 &
    
    cd ..
    
    echo "‚è≥ Attente du d√©marrage..."
    for i in {1..30}; do
        if curl -s "http://localhost:8080/api/temporal/health" > /dev/null 2>&1; then
            echo "‚úÖ Backend pr√™t!"
            return 0
        fi
        echo -n "."
        sleep 2
    done
    
    echo "‚ùå Backend non d√©marr√©"
    return 1
}

# Fonction pour v√©rifier la sant√© du syst√®me
verifier_sante() {
    print_header "V√âRIFICATION DE LA SANT√â DU SYST√àME"
    
    echo "üîç V√©rification des composants..."
    
    # V√©rifier le backend
    if curl -s "http://localhost:8080/api/temporal/health" > /dev/null 2>&1; then
        echo "‚úÖ Backend API (8080) - Fonctionnel"
        
        # Tester une commande simple
        result=$(curl -s -X POST "http://localhost:8080/api/temporal/games" \
            -H "Content-Type: application/json" \
            -d '{"gameName": "Test Sant√©", "playerId": "health"}')
        
        if echo "$result" | grep -q "success"; then
            echo "‚úÖ API temporelle - Fonctionnelle"
        else
            echo "‚ö†Ô∏è  API temporelle - Probl√®me d√©tect√©"
        fi
    else
        echo "‚ùå Backend API (8080) - Non accessible"
    fi
    
    # V√©rifier les ports
    echo ""
    echo "üîå V√©rification des ports:"
    for port in 8080 8000 5173 8001; do
        if lsof -ti:$port > /dev/null 2>&1; then
            echo "  ‚úÖ Port $port - Utilis√©"
        else
            echo "  ‚ö™ Port $port - Libre"
        fi
    done
}

# Fonction pour afficher les rapports
afficher_rapports() {
    print_header "RAPPORTS ET DOCUMENTATION DISPONIBLES"
    
    echo "üìä RAPPORTS DE TESTS:"
    echo "  ‚Ä¢ RAPPORT_TESTS_SCENARIOS_CLAIR.md - Rapport d√©taill√© des tests"
    echo "  ‚Ä¢ RAPPORT_FINAL_HOTS_CORRECT.md - Rapport final du syst√®me"
    echo ""
    echo "üìã LOGS DISPONIBLES:"
    echo "  ‚Ä¢ autoplay-demo.log - Logs de l'autoplay"
    echo "  ‚Ä¢ backend-gestion.log - Logs du backend"
    echo "  ‚Ä¢ backend-test.log - Logs des tests"
    echo ""
    echo "üîß SCRIPTS DISPONIBLES:"
    echo "  ‚Ä¢ demo-ultra-simple.sh - D√©monstration rapide"
    echo "  ‚Ä¢ test-simple.sh - Tests basiques"
    echo "  ‚Ä¢ autoplay-demo.sh - D√©monstration compl√®te"
    echo "  ‚Ä¢ test-rapide-hots.sh - Tests HOTS complets"
    echo ""
    echo "üí° Pour lire un rapport: cat RAPPORT_TESTS_SCENARIOS_CLAIR.md"
}

# Fonction pour afficher l'aide
afficher_aide() {
    print_header "AIDE - UTILISATION DES SCRIPTS"
    
    echo "üéØ OBJECTIFS DES SCRIPTS:"
    echo ""
    echo "üöÄ demo-ultra-simple.sh:"
    echo "  ‚Ä¢ D√©monstration rapide et efficace"
    echo "  ‚Ä¢ Parfait pour d√©buter"
    echo "  ‚Ä¢ Temps: ~30 secondes"
    echo ""
    echo "üß™ test-simple.sh:"
    echo "  ‚Ä¢ Tests basiques des fonctionnalit√©s"
    echo "  ‚Ä¢ V√©rification rapide"
    echo "  ‚Ä¢ Temps: ~10 secondes"
    echo ""
    echo "üéÆ autoplay-demo.sh:"
    echo "  ‚Ä¢ D√©monstration compl√®te automatique"
    echo "  ‚Ä¢ Nettoie et d√©marre tout"
    echo "  ‚Ä¢ Logs d√©taill√©s"
    echo "  ‚Ä¢ Temps: ~2 minutes"
    echo ""
    echo "‚ö° test-rapide-hots.sh:"
    echo "  ‚Ä¢ Tests complets des sc√©narios HOTS"
    echo "  ‚Ä¢ Toutes les fonctionnalit√©s"
    echo "  ‚Ä¢ Temps: ~1 minute"
    echo ""
    echo "üí° UTILISATION RECOMMAND√âE:"
    echo "  1. Commencez par: demo-ultra-simple.sh"
    echo "  2. Puis testez: test-simple.sh"
    echo "  3. Pour une d√©mo compl√®te: autoplay-demo.sh"
}

# Fonction pour afficher le statut
afficher_statut() {
    print_header "STATUT ACTUEL DU SYST√àME"
    
    echo "üîß PROCESSUS ACTIFS:"
    ps aux | grep -E "(spring-boot|http.server)" | grep -v grep | head -10
    
    echo ""
    echo "üîå PORTS UTILIS√âS:"
    netstat -an | grep -E ":8080|:8000|:5173|:8001" | head -5
    
    echo ""
    echo "üìä ESPACE DISQUE:"
    df -h . | tail -1
    
    echo ""
    echo "üïí UPTIME:"
    uptime
}

# Fonction principale
main() {
    while true; do
        clear
        print_header "HEROES OF TIME - GESTIONNAIRE DE SCRIPTS"
        print_menu
        
        echo -n "üéØ Choisissez une option: "
        read choice
        
        case $choice in
            1)
                echo "üöÄ Lancement du demo ultra simple..."
                ./demo-ultra-simple.sh
                ;;
            2)
                echo "üß™ Lancement du test simple..."
                ./test-simple.sh
                ;;
            3)
                echo "üéÆ Lancement de l'autoplay demo..."
                ./autoplay-demo.sh
                ;;
            4)
                echo "‚ö° Lancement du test rapide HOTS..."
                ./test-rapide-hots.sh
                ;;
            5)
                demarrer_backend
                ;;
            6)
                nettoyer_systeme
                ;;
            7)
                verifier_sante
                ;;
            8)
                afficher_rapports
                ;;
            9)
                afficher_statut
                ;;
            10)
                afficher_aide
                ;;
            0)
                echo "üëã Au revoir!"
                exit 0
                ;;
            *)
                echo "‚ùå Option invalide. Veuillez choisir un nombre entre 0 et 10."
                ;;
        esac
        
        echo ""
        echo -n "Appuyez sur Entr√©e pour continuer..."
        read
    done
}

# V√©rifier si on est dans le bon r√©pertoire
if [ ! -d "backend" ]; then
    echo "‚ùå Erreur: R√©pertoire 'backend' non trouv√©"
    echo "üí° Assurez-vous d'√™tre dans le r√©pertoire Heroes-of-Time"
    exit 1
fi

# Lancer le gestionnaire
main "$@" 