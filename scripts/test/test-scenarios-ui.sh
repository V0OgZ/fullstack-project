#!/bin/bash

# üéÆ Heroes of Time - Test des Sc√©narios UI
# =========================================
# Script pour tester les sc√©narios UI et identifier les probl√®mes

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}üéÆ Heroes of Time - Test des Sc√©narios UI${NC}"
echo "========================================"

# Fonction pour tester les endpoints de l'API
test_api_endpoints() {
    echo -e "${CYAN}üîç Test des endpoints API...${NC}"
    
    BASE_URL="http://localhost:8080"
    
    # Test 1: Health check
    echo -n "  üè• Health check: "
    if curl -s "$BASE_URL/api/temporal/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
    fi
    
    # Test 2: Cr√©er un jeu
    echo -n "  üéÆ Cr√©ation de jeu: "
    create_response=$(curl -s -X POST "$BASE_URL/api/temporal/games" \
        -H "Content-Type: application/json" \
        -d '{"gameName": "UI Test Game", "playerId": "ui-test"}')
    
    if echo "$create_response" | grep -q "success"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        GAME_ID=$(echo "$create_response" | jq -r '.gameId // 1')
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
        GAME_ID="1"
    fi
    
    # Test 3: D√©marrer le jeu
    echo -n "  üöÄ D√©marrage du jeu: "
    start_response=$(curl -s -X POST "$BASE_URL/api/temporal/games/$GAME_ID/start")
    
    if echo "$start_response" | grep -q "success"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
    fi
    
    # Test 4: Cr√©er un h√©ros
    echo -n "  ‚öîÔ∏è Cr√©ation h√©ros: "
    hero_response=$(curl -s -X POST "$BASE_URL/api/temporal/games/$GAME_ID/script" \
        -H "Content-Type: application/json" \
        -d '{"script": "HERO(TestHero)"}')
    
    if echo "$hero_response" | grep -q "success"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
    fi
    
    echo -e "${GREEN}API test√©e avec Game ID: $GAME_ID${NC}"
}

# Fonction pour tester les frontends
test_frontends() {
    echo -e "${CYAN}üåê Test des frontends...${NC}"
    
    # Test Frontend Classique
    echo -n "  üèõÔ∏è Frontend Classique (8000): "
    if curl -s http://localhost:8000 | grep -q "Heroes of Time"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
    fi
    
    # Test Frontend Temporel
    echo -n "  ‚ö° Frontend Temporel (5173): "
    if curl -s http://localhost:5173 | grep -q "Temporal"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
    fi
    
    # Test Quantum Visualizer
    echo -n "  üåå Quantum Visualizer (8001): "
    if curl -s http://localhost:8001 | grep -q "Quantum"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
    fi
}

# Fonction pour tester les sc√©narios JavaScript
test_javascript_scenarios() {
    echo -e "${CYAN}üîß Test des sc√©narios JavaScript...${NC}"
    
    # V√©rifier les fichiers JS
    echo -n "  üìÅ Frontend game.js: "
    if [ -f "frontend/game.js" ]; then
        echo -e "${GREEN}‚úÖ Pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Manquant${NC}"
    fi
    
    echo -n "  üìÅ Frontend-temporal JS: "
    if [ -f "frontend-temporal/js/enhanced-temporal-engine.js" ]; then
        echo -e "${GREEN}‚úÖ Pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Manquant${NC}"
    fi
    
    echo -n "  üìÅ Quantum visualizer JS: "
    if [ -f "quantum-visualizer/quantum-visualizer.js" ]; then
        echo -e "${GREEN}‚úÖ Pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Manquant${NC}"
    fi
}

# Fonction pour tester les sc√©narios sp√©cifiques
test_specific_scenarios() {
    echo -e "${CYAN}üéØ Test des sc√©narios sp√©cifiques...${NC}"
    
    # Quantum Visualizer scenarios
    echo -n "  üåå Scenarios quantiques: "
    if [ -d "quantum-visualizer/scenarios" ]; then
        scenario_count=$(ls quantum-visualizer/scenarios/*.json 2>/dev/null | wc -l)
        if [ $scenario_count -gt 0 ]; then
            echo -e "${GREEN}‚úÖ $scenario_count sc√©narios trouv√©s${NC}"
        else
            echo -e "${RED}‚ùå Aucun sc√©nario JSON${NC}"
        fi
    else
        echo -e "${RED}‚ùå Dossier scenarios manquant${NC}"
    fi
    
    # Frontend scenarios
    echo -n "  üèõÔ∏è Scripts frontend: "
    if [ -f "frontend/script-console.js" ]; then
        echo -e "${GREEN}‚úÖ Console script disponible${NC}"
    else
        echo -e "${RED}‚ùå Console script manquante${NC}"
    fi
}

# Fonction pour diagnostiquer les probl√®mes
diagnose_issues() {
    echo -e "${CYAN}ü©∫ Diagnostic des probl√®mes...${NC}"
    
    echo -e "${YELLOW}üîç V√©rification des logs...${NC}"
    
    # V√©rifier les logs des frontends
    for log in logs/frontend-*-ui.log; do
        if [ -f "$log" ]; then
            echo -n "  üìã $(basename $log): "
            if [ -s "$log" ]; then
                echo -e "${GREEN}‚úÖ Pr√©sent${NC}"
                # V√©rifier les erreurs
                if grep -q "error\|Error\|ERROR" "$log"; then
                    echo -e "    ${RED}‚ö†Ô∏è Erreurs d√©tect√©es${NC}"
                fi
            else
                echo -e "${YELLOW}‚ö†Ô∏è Vide${NC}"
            fi
        fi
    done
    
    # V√©rifier les processus
    echo -e "${YELLOW}üîç Processus actifs...${NC}"
    echo -n "  üîß Backend Java: "
    if pgrep -f "spring-boot" > /dev/null; then
        echo -e "${GREEN}‚úÖ Actif${NC}"
    else
        echo -e "${RED}‚ùå Inactif${NC}"
    fi
    
    echo -n "  üåê Serveurs Python: "
    python_count=$(pgrep -f "python3.*http.server" | wc -l)
    if [ $python_count -gt 0 ]; then
        echo -e "${GREEN}‚úÖ $python_count serveurs actifs${NC}"
    else
        echo -e "${RED}‚ùå Aucun serveur${NC}"
    fi
}

# Fonction pour afficher les solutions
show_solutions() {
    echo -e "${CYAN}üí° Solutions pour les probl√®mes UI...${NC}"
    
    echo -e "${YELLOW}üîß Si les sc√©narios ne fonctionnent pas:${NC}"
    echo "1. V√©rifiez que le backend est actif:"
    echo "   curl http://localhost:8080/api/temporal/health"
    echo ""
    echo "2. V√©rifiez les logs des frontends:"
    echo "   tail -f logs/frontend-*-ui.log"
    echo ""
    echo "3. Red√©marrez les frontends:"
    echo "   ./demarrer-frontends.sh"
    echo ""
    echo "4. Testez les URLs directement:"
    echo "   - Frontend Classique: http://localhost:8000"
    echo "   - Frontend Temporel: http://localhost:5173"
    echo "   - Quantum Visualizer: http://localhost:8001"
    echo ""
    echo "5. V√©rifiez les fichiers JavaScript:"
    echo "   - Ouvrez la console d√©veloppeur du navigateur (F12)"
    echo "   - Cherchez les erreurs JavaScript"
    echo ""
    echo "6. Testez l'API directement:"
    echo "   ./demo-ultra-simple.sh"
}

# Fonction pour cr√©er un test de sc√©nario JavaScript
create_js_test() {
    echo -e "${CYAN}üß™ Cr√©ation d'un test JavaScript...${NC}"
    
    cat > test-scenario-ui.html << 'EOF'
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Sc√©nario UI</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .result { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .success { background-color: #d4edda; color: #155724; }
        .error { background-color: #f8d7da; color: #721c24; }
        button { padding: 10px 20px; margin: 10px; cursor: pointer; }
    </style>
</head>
<body>
    <h1>üéÆ Test Sc√©nario UI Heroes of Time</h1>
    <div id="results"></div>
    
    <button onclick="testAPI()">Test API</button>
    <button onclick="testCreateHero()">Test Cr√©er H√©ros</button>
    <button onclick="testScenario()">Test Sc√©nario Complet</button>
    
    <script>
        const API_BASE = 'http://localhost:8080';
        let gameId = 1;
        
        function addResult(message, isSuccess = true) {
            const div = document.createElement('div');
            div.className = 'result ' + (isSuccess ? 'success' : 'error');
            div.textContent = message;
            document.getElementById('results').appendChild(div);
        }
        
        async function testAPI() {
            try {
                const response = await fetch(`${API_BASE}/api/temporal/health`);
                const data = await response.json();
                addResult('‚úÖ API accessible: ' + data.status);
            } catch (error) {
                addResult('‚ùå API inaccessible: ' + error.message, false);
            }
        }
        
        async function testCreateHero() {
            try {
                const response = await fetch(`${API_BASE}/api/temporal/games/${gameId}/script`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ script: 'HERO(TestUIHero)' })
                });
                const data = await response.json();
                addResult('‚úÖ H√©ros cr√©√©: ' + data.message);
            } catch (error) {
                addResult('‚ùå Erreur cr√©ation h√©ros: ' + error.message, false);
            }
        }
        
        async function testScenario() {
            try {
                // Test complet
                await testAPI();
                await testCreateHero();
                
                // Test mouvement
                const moveResponse = await fetch(`${API_BASE}/api/temporal/games/${gameId}/script`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ script: 'MOV(TestUIHero, @10,10)' })
                });
                const moveData = await moveResponse.json();
                addResult('‚úÖ Mouvement: ' + moveData.message);
                
                // Test œà-state
                const psiResponse = await fetch(`${API_BASE}/api/temporal/games/${gameId}/script`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ script: 'œà999: ‚äô(Œît+1 @15,15 ‚ü∂ MOV(TestUIHero, @15,15))' })
                });
                const psiData = await psiResponse.json();
                addResult('‚úÖ œà-state: ' + psiData.message);
                
                addResult('üéâ Sc√©nario complet r√©ussi!');
            } catch (error) {
                addResult('‚ùå Erreur sc√©nario: ' + error.message, false);
            }
        }
    </script>
</body>
</html>
EOF

    echo -e "${GREEN}‚úÖ Fichier test-scenario-ui.html cr√©√©${NC}"
    echo -e "${YELLOW}üí° Ouvrez http://localhost:8000/test-scenario-ui.html pour tester${NC}"
}

# Script principal
main() {
    # V√©rifier que les frontends sont d√©marr√©s
    if ! curl -s http://localhost:8000 > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Frontends non d√©marr√©s${NC}"
        echo -e "${YELLOW}üí° Lancez d'abord: ./demarrer-frontends.sh${NC}"
        exit 1
    fi
    
    # Ex√©cuter les tests
    test_api_endpoints
    echo ""
    test_frontends
    echo ""
    test_javascript_scenarios
    echo ""
    test_specific_scenarios
    echo ""
    diagnose_issues
    echo ""
    show_solutions
    echo ""
    create_js_test
    
    echo -e "${GREEN}üéâ Tests termin√©s!${NC}"
    echo -e "${YELLOW}üí° Pour tester l'interface: ouvrez http://localhost:8000/test-scenario-ui.html${NC}"
}

# Ex√©cuter le script
main "$@" 