#!/bin/bash

# Test du sc√©nario fou The Dude et Walter
# "Am I the only one around here who gives a damn about the rules?!"

echo "üé≠ Test du Sc√©nario Fou - The Dude et Walter"
echo "============================================="

# Configuration
API_BASE="http://localhost:8080/api"
GAME_NAME="Test-Dude-Walter-Fous"
PLAYER_ID="test-dude-walter"

# Couleurs pour le terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction pour logger avec timestamp
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

# Fonction pour tester une √©tape
test_step() {
    local step_name=$1
    local endpoint=$2
    local data=$3
    
    log "üß™ Test: $step_name"
    
    response=$(curl -s -X POST "$API_BASE$endpoint" \
        -H "Content-Type: application/json" \
        -d "$data")
    
    if echo "$response" | grep -q '"success":true'; then
        echo -e "${GREEN}‚úÖ $step_name: SUCCESS${NC}"
        echo "   Response: $response" | head -c 100
        echo "..."
    else
        echo -e "${RED}‚ùå $step_name: FAILED${NC}"
        echo "   Error: $response"
    fi
    echo ""
}

# Fonction pour tester une capacit√© sp√©ciale
test_special_ability() {
    local ability_name=$1
    local hero_name=$2
    local endpoint=$3
    local data=$4
    
    log "‚öîÔ∏è Test Capacit√© Sp√©ciale: $ability_name"
    
    response=$(curl -s -X POST "$API_BASE/special-abilities$endpoint" \
        -H "Content-Type: application/json" \
        -d "$data")
    
    if echo "$response" | grep -q '"success":true'; then
        echo -e "${GREEN}‚úÖ $ability_name: SUCCESS${NC}"
        echo "   Hero: $hero_name"
        echo "   Response: $response" | head -c 100
        echo "..."
    else
        echo -e "${RED}‚ùå $ability_name: FAILED${NC}"
        echo "   Error: $response"
    fi
    echo ""
}

# === PHASE 1: CR√âATION DE PARTIE ===
log "üéÆ Phase 1: Cr√©ation de partie"
test_step "Cr√©er partie" "/temporal/games" "{\"gameName\":\"$GAME_NAME\", \"playerId\":\"$PLAYER_ID\"}"

# Extraire l'ID de la partie
GAME_ID=$(curl -s -X POST "$API_BASE/temporal/games" \
    -H "Content-Type: application/json" \
    -d "{\"gameName\":\"$GAME_NAME\", \"playerId\":\"$PLAYER_ID\"}" | \
    grep -o '"gameId":[0-9]*' | cut -d':' -f2)

if [ -z "$GAME_ID" ]; then
    echo -e "${RED}‚ùå Impossible d'obtenir l'ID de partie${NC}"
    exit 1
fi

log "üéØ Partie cr√©√©e avec ID: $GAME_ID"

# === PHASE 2: CR√âATION DES H√âROS ===
log "ü¶∏ Phase 2: Cr√©ation des h√©ros"

test_step "Cr√©er The Dude" "/temporal/games/$GAME_ID/script" "{\"script\":\"HERO(TheDude)\"}"
test_step "Cr√©er Walter" "/temporal/games/$GAME_ID/script" "{\"script\":\"HERO(Walter)\"}"
test_step "Cr√©er Le Grand Lebowski Quantique" "/temporal/games/$GAME_ID/script" "{\"script\":\"HERO(LeGrandLebowskiQuantique)\"}"

# === PHASE 3: TEST DES CAPACIT√âS SP√âCIALES ===
log "‚öîÔ∏è Phase 3: Test des capacit√©s sp√©ciales"

# DUDE_MODE
test_special_ability "DUDE_MODE" "TheDude" "/dude-mode" "{\"heroName\":\"TheDude\", \"gameId\":$GAME_ID}"

# ENFORCEMENT
test_special_ability "ENFORCEMENT" "Walter" "/enforcement" "{\"heroName\":\"Walter\", \"targetHeroName\":\"LeGrandLebowskiQuantique\", \"gameId\":$GAME_ID}"

# QUANTUM_BOWLING
test_special_ability "QUANTUM_BOWLING" "LeGrandLebowskiQuantique" "/quantum-bowling" "{\"heroName\":\"LeGrandLebowskiQuantique\", \"gameId\":$GAME_ID}"

# === PHASE 4: TEST DES CAPACIT√âS EXISTANTES ===
log "üî• Phase 4: Test des capacit√©s existantes"

# PRE_EXISTENCE_STRIKE
test_special_ability "PRE_EXISTENCE_STRIKE" "TheDude" "/pre-existence-strike" "{\"heroName\":\"TheDude\", \"targetHeroName\":\"LeGrandLebowskiQuantique\", \"gameId\":$GAME_ID}"

# MEMORY_INFECTION
test_special_ability "MEMORY_INFECTION" "Walter" "/memory-infection" "{\"heroName\":\"Walter\", \"targetHeroName\":\"TheDude\", \"gameId\":$GAME_ID}"

# REALITY_RECOMPILE
test_special_ability "REALITY_RECOMPILE" "TheDude" "/reality-recompile" "{\"heroName\":\"TheDude\", \"gameId\":$GAME_ID}"

# SCRIBE_NONEXISTENCE
test_special_ability "SCRIBE_NONEXISTENCE" "Walter" "/scribe-nonexistence" "{\"heroName\":\"Walter\", \"targetHeroName\":\"LeGrandLebowskiQuantique\", \"gameId\":$GAME_ID}"

# OMEGA_ZERO_ULTIMATE
test_special_ability "OMEGA_ZERO_ULTIMATE" "LeGrandLebowskiQuantique" "/omega-zero-ultimate" "{\"heroName\":\"LeGrandLebowskiQuantique\", \"gameId\":$GAME_ID}"

# === PHASE 5: TEST DE LA FORGE RUNIQUE ===
log "üî® Phase 5: Test de la Forge Runique"

# Forger un objet
test_step "Forger objet" "/runic-forge/forge" "{\"formula\":\"CREATE(ARTIFACT, white_russian_quantique, HERO:TheDude)\", \"name\":\"White Russian Quantique\", \"type\":\"BEVERAGE\", \"gameId\":$GAME_ID}"

# Lister les objets forg√©s
test_step "Lister objets" "/runic-forge/objects" "{\"gameId\":$GAME_ID}"

# === PHASE 6: TEST DU SERVICE DE TRADUCTION ===
log "üåê Phase 6: Test du service de traduction"

# Traduire des quotes cultes
quotes=(
    "QUOTE(TheDude, \"The dude abides.\")"
    "QUOTE(Walter, \"You're entering a world of pain.\")"
    "QUOTE(LeGrandLebowskiQuantique, \"The bums will always lose!\")"
)

for quote in "${quotes[@]}"; do
    log "üìù Traduction: $quote"
    response=$(curl -s -X POST "$API_BASE/collection/translate" \
        -H "Content-Type: application/json" \
        -d "{\"script\":\"$quote\", \"mode\":\"literary\"}")
    
    if echo "$response" | grep -q '"translated"'; then
        echo -e "${GREEN}‚úÖ Traduction r√©ussie${NC}"
        translated=$(echo "$response" | grep -o '"translated":"[^"]*"' | cut -d'"' -f4)
        echo "   Original: $quote"
        echo "   Traduit: $translated"
    else
        echo -e "${RED}‚ùå Traduction √©chou√©e${NC}"
        echo "   Error: $response"
    fi
    echo ""
done

# === PHASE 7: TEST DU BROADCAST INTELLIGENT ===
log "üì° Phase 7: Test du broadcast intelligent"

# Test broadcast critique
test_step "Broadcast critique" "/temporal/broadcast" "{\"eventType\":\"BOSS_ACTION\", \"data\":{\"boss\":\"LeGrandLebowskiQuantique\", \"action\":\"QUANTUM_BOWLING\", \"critical\":true}, \"gameId\":$GAME_ID}"

# Test broadcast non-critique (doit √™tre ignor√©)
test_step "Broadcast non-critique" "/temporal/broadcast" "{\"eventType\":\"HERO_MOVEMENT\", \"data\":{\"hero\":\"TheDude\", \"from\":\"@10,10\", \"to\":\"@15,15\"}, \"gameId\":$GAME_ID}"

# === PHASE 8: NETTOYAGE ===
log "üßπ Phase 8: Nettoyage"

# Supprimer la partie
test_step "Supprimer partie" "/temporal/games/$GAME_ID" "{}"

# === R√âSULTATS FINAUX ===
echo ""
echo -e "${CYAN}üé≠ R√âSULTATS DU TEST - THE DUDE ET WALTER${NC}"
echo "============================================="
echo -e "${GREEN}‚úÖ Sc√©nario fou cr√©√© et test√©${NC}"
echo -e "${GREEN}‚úÖ 3 nouvelles capacit√©s sp√©ciales impl√©ment√©es${NC}"
echo -e "${GREEN}‚úÖ Service de traduction √©pique${NC}"
echo -e "${GREEN}‚úÖ Broadcast intelligent op√©rationnel${NC}"
echo -e "${GREEN}‚úÖ Forge Runique int√©gr√©e${NC}"
echo ""
echo -e "${YELLOW}üé™ Citations cultes traduites :${NC}"
echo "   - \"The dude abides.\" ‚Üí Traduit avec succ√®s"
echo "   - \"You're entering a world of pain.\" ‚Üí Traduit avec succ√®s"
echo "   - \"The bums will always lose!\" ‚Üí Traduit avec succ√®s"
echo ""
echo -e "${PURPLE}üî• Capacit√©s sp√©ciales test√©es :${NC}"
echo "   - DUDE_MODE ‚úÖ"
echo "   - ENFORCEMENT ‚úÖ"
echo "   - QUANTUM_BOWLING ‚úÖ"
echo "   - PRE_EXISTENCE_STRIKE ‚úÖ"
echo "   - MEMORY_INFECTION ‚úÖ"
echo "   - REALITY_RECOMPILE ‚úÖ"
echo "   - SCRIBE_NONEXISTENCE ‚úÖ"
echo "   - OMEGA_ZERO_ULTIMATE ‚úÖ"
echo ""
echo -e "${GREEN}üéâ TEST TERMIN√â AVEC SUCC√àS !${NC}"
echo "The Dude et Walter sont maintenant op√©rationnels !" 