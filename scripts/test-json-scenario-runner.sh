#!/bin/bash

# üéÆ GENERIC JSON SCENARIO RUNNER
# ===============================
# Script g√©n√©rique pour charger et ex√©cuter n'importe quel sc√©nario JSON

# Usage: ./test-json-scenario-runner.sh <scenario_name>
# Exemple: ./test-json-scenario-runner.sh DUEL_COLLAPSE

if [ $# -eq 0 ]; then
    echo "Usage: $0 <scenario_name>"
    echo "Exemples:"
    echo "  $0 DUEL_COLLAPSE"
    echo "  $0 panopticon_axis_test"
    echo "  $0 ECLAT_MONDES_DISSOLUS"
    exit 1
fi

SCENARIO_NAME="$1"
echo "üéÆ HEROES OF TIME - JSON SCENARIO RUNNER"
echo "========================================"
echo "üìã Chargement du sc√©nario: $SCENARIO_NAME"

# Configuration
HOST="localhost:8080"
SCENARIOS_DIR="../game_assets/scenarios/visualizer"
SCENARIO_JSON="$SCENARIOS_DIR/${SCENARIO_NAME}.json"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
GAME_ID=""
SCENARIO_DATA=""

# Fonction pour logger avec timestamp
log_with_time() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')]${NC} $1"
}

# V√©rifier que le fichier JSON existe
check_scenario_file() {
    if [ ! -f "$SCENARIO_JSON" ]; then
        echo -e "${RED}‚ùå Fichier sc√©nario non trouv√©: $SCENARIO_JSON${NC}"
        echo -e "${YELLOW}üí° Sc√©narios disponibles:${NC}"
        ls "$SCENARIOS_DIR"/*.json 2>/dev/null | xargs -n1 basename | sed 's/.json$//' | while read -r file; do
            echo -e "${CYAN}  - $file${NC}"
        done
        exit 1
    fi
    
    log_with_time "üìÑ Sc√©nario trouv√©: $(basename $SCENARIO_JSON)"
}

# Fonction pour charger et analyser le sc√©nario
load_and_analyze_scenario() {
    echo -e "\n${PURPLE}üìã Chargement et analyse du sc√©nario...${NC}"
    
    # Charger le JSON
    if ! SCENARIO_DATA=$(cat "$SCENARIO_JSON" | jq .); then
        echo -e "${RED}‚ùå JSON invalide${NC}"
        return 1
    fi
    
    # Extraire les informations de base
    local scenario_name scenario_type difficulty duration players
    
    # Essayer diff√©rentes structures JSON (les sc√©narios n'ont pas tous la m√™me structure)
    scenario_name=$(echo "$SCENARIO_DATA" | jq -r '.scenario.name // .scenario_info.name // "Sc√©nario Inconnu"')
    scenario_type=$(echo "$SCENARIO_DATA" | jq -r '.scenario.type // .scenario_info.type // "Type Inconnu"')
    difficulty=$(echo "$SCENARIO_DATA" | jq -r '.scenario_info.difficulty // .difficulty // "Non sp√©cifi√©"')
    duration=$(echo "$SCENARIO_DATA" | jq -r '.scenario_info.duration_estimate // .duration // "Non sp√©cifi√©"')
    players=$(echo "$SCENARIO_DATA" | jq -r '.setup.players // .game_settings.players // .players // [] | length')
    
    echo -e "${CYAN}üìñ Nom: $scenario_name${NC}"
    echo -e "${CYAN}üéØ Type: $scenario_type${NC}"
    echo -e "${CYAN}‚≠ê Difficult√©: $difficulty${NC}"
    echo -e "${CYAN}‚è±Ô∏è Dur√©e: $duration${NC}"
    echo -e "${CYAN}üë• Joueurs: $players${NC}"
    
    # Analyser la structure du sc√©nario
    local has_heroes has_map has_psi_states has_victory_conditions
    has_heroes=$(echo "$SCENARIO_DATA" | jq 'has("heroes")')
    has_map=$(echo "$SCENARIO_DATA" | jq 'has("setup") and .setup | has("map") or has("game_settings") and .game_settings | has("map")')
    has_psi_states=$(echo "$SCENARIO_DATA" | jq 'has("psi_states")')
    has_victory_conditions=$(echo "$SCENARIO_DATA" | jq 'has("victory_conditions") or has("game_settings") and .game_settings | has("victory_conditions")')
    
    echo -e "\n${CYAN}üìä Structure du sc√©nario:${NC}"
    [ "$has_heroes" = "true" ] && echo -e "${GREEN}  ‚úÖ H√©ros d√©finis${NC}" || echo -e "${YELLOW}  ‚ö†Ô∏è Pas de h√©ros${NC}"
    [ "$has_map" = "true" ] && echo -e "${GREEN}  ‚úÖ Carte d√©finie${NC}" || echo -e "${YELLOW}  ‚ö†Ô∏è Pas de carte${NC}"
    [ "$has_psi_states" = "true" ] && echo -e "${GREEN}  ‚úÖ œà-States d√©finis${NC}" || echo -e "${YELLOW}  ‚ö†Ô∏è Pas de œà-States${NC}"
    [ "$has_victory_conditions" = "true" ] && echo -e "${GREEN}  ‚úÖ Conditions de victoire${NC}" || echo -e "${YELLOW}  ‚ö†Ô∏è Pas de conditions${NC}"
    
    # Compter les √©l√©ments
    local heroes_count psi_count
    heroes_count=$(echo "$SCENARIO_DATA" | jq '.heroes // [] | length')
    psi_count=$(echo "$SCENARIO_DATA" | jq '.psi_states // [] | length')
    
    echo -e "${CYAN}ü¶∏ H√©ros: $heroes_count${NC}"
    echo -e "${CYAN}‚ö° œà-States: $psi_count${NC}"
    
    return 0
}

# Fonction pour v√©rifier le backend
check_backend() {
    echo -e "\n${BLUE}üîç V√©rification du backend...${NC}"
    if curl -s "$HOST/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend accessible sur $HOST${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Backend non accessible sur $HOST${NC}"
        echo -e "${YELLOW}üí° D√©marrez le backend avec: mvn spring-boot:run${NC}"
        return 1
    fi
}

# Fonction pour cr√©er le jeu
create_game() {
    echo -e "\n${BLUE}üéÆ Cr√©ation du jeu...${NC}"
    
    local game_name players_count
    game_name=$(echo "$SCENARIO_DATA" | jq -r '.scenario.name // .scenario_info.name // "Test Scenario"')
    players_count=$(echo "$SCENARIO_DATA" | jq -r '.setup.players // .game_settings.players // .players // [] | length')
    
    # Si pas de joueurs d√©finis, utiliser 2 par d√©faut
    [ "$players_count" = "0" ] && players_count=2
    
    response=$(curl -s -X POST "http://$HOST/api/temporal/games" \
        -H "Content-Type: application/json" \
        -d "{\"gameName\": \"$game_name\", \"playerCount\": $players_count}")
    
    GAME_ID=$(echo "$response" | jq -r '.gameId // empty')
    
    if [ -n "$GAME_ID" ]; then
        echo -e "${GREEN}‚úÖ Jeu cr√©√© avec ID: $GAME_ID${NC}"
        return 0
    else
        echo -e "${RED}‚ùå √âchec de cr√©ation du jeu${NC}"
        echo "$response"
        return 1
    fi
}

# Fonction pour cr√©er les h√©ros
create_heroes() {
    local heroes_count
    heroes_count=$(echo "$SCENARIO_DATA" | jq '.heroes // [] | length')
    
    if [ "$heroes_count" -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Aucun h√©ros d√©fini dans le sc√©nario${NC}"
        return 0
    fi
    
    echo -e "\n${PURPLE}üë• Cr√©ation des h√©ros ($heroes_count)...${NC}"
    
    echo "$SCENARIO_DATA" | jq -c '.heroes[]' | while read -r hero_data; do
        local hero_name hero_level
        hero_name=$(echo "$hero_data" | jq -r '.name')
        hero_level=$(echo "$hero_data" | jq -r '.level // 1')
        
        echo -e "\n${BLUE}‚Üí Cr√©ation de $hero_name${NC}"
        
        # Cr√©er le h√©ros
        response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
            -H "Content-Type: application/json" \
            -d "{\"script\":\"HERO($hero_name)\"}")
        
        if echo "$response" | jq -e '.success' > /dev/null; then
            echo -e "${GREEN}  ‚úÖ $hero_name cr√©√©${NC}"
        else
            echo -e "${RED}  ‚ùå Erreur cr√©ation $hero_name${NC}"
        fi
        
        # Placement si position d√©finie
        if echo "$hero_data" | jq -e '.position // .start_position' > /dev/null; then
            local pos_x pos_y
            pos_x=$(echo "$hero_data" | jq -r '.position.x // .start_position.x')
            pos_y=$(echo "$hero_data" | jq -r '.position.y // .start_position.y')
            
            if [ "$pos_x" != "null" ] && [ "$pos_y" != "null" ]; then
                place_response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
                    -H "Content-Type: application/json" \
                    -d "{\"script\":\"MOV($hero_name, @$pos_x,$pos_y)\"}")
                
                if echo "$place_response" | jq -e '.success' > /dev/null; then
                    echo -e "${GREEN}  ‚úÖ Plac√© en ($pos_x,$pos_y)${NC}"
                else
                    echo -e "${YELLOW}  ‚ö†Ô∏è Placement √©chou√©${NC}"
                fi
            fi
        fi
        
        sleep 0.5
    done
}

# Fonction pour ex√©cuter les œà-states
execute_psi_states() {
    local psi_count
    psi_count=$(echo "$SCENARIO_DATA" | jq '.psi_states // [] | length')
    
    if [ "$psi_count" -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Aucun œà-state d√©fini dans le sc√©nario${NC}"
        return 0
    fi
    
    echo -e "\n${PURPLE}‚ö° Ex√©cution des œà-states ($psi_count)...${NC}"
    
    echo "$SCENARIO_DATA" | jq -c '.psi_states[]' | while read -r psi_state; do
        local psi_id action description
        psi_id=$(echo "$psi_state" | jq -r '.id')
        action=$(echo "$psi_state" | jq -r '.action')
        description=$(echo "$psi_state" | jq -r '.description // "Action œà-state"')
        
        echo -e "\n${BLUE}‚Üí $psi_id: ${NC}$action"
        echo -e "${YELLOW}  üìù $description${NC}"
        
        # Ex√©cuter l'action
        response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
            -H "Content-Type: application/json" \
            -d "{\"script\":\"$action\"}")
        
        if echo "$response" | jq -e '.success' > /dev/null; then
            echo -e "${GREEN}  ‚úÖ $psi_id ex√©cut√©${NC}"
        else
            echo -e "${RED}  ‚ùå Erreur $psi_id${NC}"
        fi
        
        sleep 1
    done
}

# Fonction pour v√©rifier les conditions de victoire
check_victory_conditions() {
    echo -e "\n${PURPLE}üèÜ Conditions de victoire...${NC}"
    
    # Essayer diff√©rentes structures pour les conditions
    local conditions
    conditions=$(echo "$SCENARIO_DATA" | jq -r '.victory_conditions // .game_settings.victory_conditions // [] | if type == "array" then .[] else . end // empty')
    
    if [ -n "$conditions" ]; then
        echo "$conditions" | while read -r condition; do
            [ -n "$condition" ] && echo -e "${CYAN}  üìã $condition${NC}"
        done
    else
        echo -e "${YELLOW}  ‚ÑπÔ∏è Aucune condition de victoire sp√©cifi√©e${NC}"
    fi
}

# Fonction pour afficher le r√©sum√©
show_summary() {
    echo -e "\n${PURPLE}üìä R√âSUM√â DU SC√âNARIO${NC}"
    echo "========================="
    
    local scenario_name
    scenario_name=$(echo "$SCENARIO_DATA" | jq -r '.scenario.name // .scenario_info.name // "Sc√©nario"')
    
    echo -e "${CYAN}üìñ Sc√©nario: $scenario_name${NC}"
    echo -e "${CYAN}üéÆ ID du jeu: $GAME_ID${NC}"
    
    # √âtat du jeu si disponible
    if [ -n "$GAME_ID" ]; then
        game_state=$(curl -s "http://$HOST/api/games/$GAME_ID/state" 2>/dev/null || echo "null")
        
        if [ "$game_state" != "null" ] && [ "$game_state" != "" ]; then
            echo -e "\n${CYAN}üéØ √âtat du jeu:${NC}"
            echo "$game_state" | jq '.' 2>/dev/null || echo "$game_state"
        fi
    fi
    
    echo -e "\n${GREEN}‚úÖ Ex√©cution du sc√©nario termin√©e${NC}"
}

# EX√âCUTION PRINCIPALE
main() {
    log_with_time "üöÄ D√©marrage du runner de sc√©nario JSON"
    
    # √âtape 1: V√©rifier le fichier
    check_scenario_file
    
    # √âtape 2: Charger et analyser
    if ! load_and_analyze_scenario; then
        exit 1
    fi
    
    # √âtape 3: V√©rifier le backend
    if ! check_backend; then
        exit 1
    fi
    
    # √âtape 4: Cr√©er le jeu
    if ! create_game; then
        exit 1
    fi
    
    # √âtape 5: Cr√©er les h√©ros
    create_heroes
    
    # √âtape 6: Ex√©cuter les œà-states
    execute_psi_states
    
    # √âtape 7: V√©rifier les conditions
    check_victory_conditions
    
    # √âtape 8: R√©sum√©
    show_summary
    
    log_with_time "üèÅ Runner termin√©"
}

# Gestion des erreurs
set -e
trap 'echo -e "\n${RED}‚ùå Erreur d√©tect√©e, arr√™t du script${NC}"; exit 1' ERR

# Lancer le runner
main "$@"