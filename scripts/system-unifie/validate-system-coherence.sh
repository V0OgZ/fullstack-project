#!/bin/bash

# Script de validation de la coh√©rence du syst√®me unifi√© Heroes of Time
# V√©rifie que tous les composants fonctionnent ensemble harmonieusement

echo "üîç VALIDATION DE LA COH√âRENCE SYST√àME - HEROES OF TIME"
echo "================================================================"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Compteurs
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_TOTAL=0

# Fonction pour afficher le r√©sultat d'un test
test_result() {
    local test_name="$1"
    local result="$2"
    local details="$3"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    if [ "$result" = "PASS" ]; then
        echo -e "${GREEN}‚úÖ $test_name${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        if [ -n "$details" ]; then
            echo -e "${BLUE}   ‚Üí $details${NC}"
        fi
    else
        echo -e "${RED}‚ùå $test_name${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        if [ -n "$details" ]; then
            echo -e "${YELLOW}   ‚Üí $details${NC}"
        fi
    fi
}

echo -e "${BLUE}üìã PHASE 1: VALIDATION DE LA NOMENCLATURE${NC}"
echo "================================================================"

# Test 1: V√©rifier que ImprovedTemporalEngineService existe
if [ -f "backend/src/main/java/com/heroesoftimepoc/temporalengine/service/ImprovedTemporalEngineService.java" ]; then
    test_result "ImprovedTemporalEngineService existe" "PASS" "Service unifi√© d√©tect√©"
else
    test_result "ImprovedTemporalEngineService existe" "FAIL" "Service unifi√© manquant"
fi

# Test 2: V√©rifier les m√©thodes avec nomenclature claire
CLEAR_METHODS=$(grep -c "executeTemporalGameScript\|createQuantumTemporalState\|executeQuantumStateCollapse" backend/src/main/java/com/heroesoftimepoc/temporalengine/service/ImprovedTemporalEngineService.java 2>/dev/null || echo "0")
if [ "$CLEAR_METHODS" -gt 0 ]; then
    test_result "M√©thodes avec nomenclature claire" "PASS" "$CLEAR_METHODS m√©thodes trouv√©es"
else
    test_result "M√©thodes avec nomenclature claire" "FAIL" "M√©thodes non trouv√©es"
fi

# Test 3: V√©rifier la documentation
if [ -f "NOMENCLATURE_IMPROVEMENTS.md" ]; then
    test_result "Documentation nomenclature" "PASS" "Guide disponible"
else
    test_result "Documentation nomenclature" "FAIL" "Guide manquant"
fi

echo -e "${BLUE}üìã PHASE 2: VALIDATION DU MOTEUR REGEX${NC}"
echo "================================================================"

# Test 4: V√©rifier le parser regex
if [ -f "backend/src/main/java/com/heroesoftimepoc/temporalengine/service/TemporalScriptParser.java" ]; then
    test_result "Parser regex pr√©sent" "PASS" "TemporalScriptParser d√©tect√©"
else
    test_result "Parser regex pr√©sent" "FAIL" "TemporalScriptParser manquant"
fi

# Test 5: V√©rifier les patterns de parsing
REGEX_PATTERNS=$(grep -c "Pattern\|regex\|parse" backend/src/main/java/com/heroesoftimepoc/temporalengine/service/TemporalScriptParser.java 2>/dev/null || echo "0")
if [ "$REGEX_PATTERNS" -gt 5 ]; then
    test_result "Patterns regex optimis√©s" "PASS" "$REGEX_PATTERNS patterns trouv√©s"
else
    test_result "Patterns regex optimis√©s" "FAIL" "Patterns insuffisants"
fi

echo -e "${BLUE}üìã PHASE 3: VALIDATION DE LA CAUSALIT√â${NC}"
echo "================================================================"

# Test 6: V√©rifier le service d'interf√©rence quantique
if [ -f "backend/src/main/java/com/heroesoftimepoc/temporalengine/service/QuantumInterferenceService.java" ]; then
    test_result "Service d'interf√©rence quantique" "PASS" "QuantumInterferenceService d√©tect√©"
else
    test_result "Service d'interf√©rence quantique" "FAIL" "QuantumInterferenceService manquant"
fi

# Test 7: V√©rifier les calculs d'amplitude complexe
COMPLEX_CALC=$(grep -c "ComplexAmplitude\|calculateInterference" backend/src/main/java/com/heroesoftimepoc/temporalengine/service/QuantumInterferenceService.java 2>/dev/null || echo "0")
if [ "$COMPLEX_CALC" -gt 0 ]; then
    test_result "Calculs d'amplitude complexe" "PASS" "$COMPLEX_CALC r√©f√©rences trouv√©es"
else
    test_result "Calculs d'amplitude complexe" "FAIL" "Calculs manquants"
fi

echo -e "${BLUE}üìã PHASE 4: VALIDATION DES ARTEFACTS${NC}"
echo "================================================================"

# Test 8: V√©rifier les fichiers d'artefacts
if [ -f "backend/src/main/resources/quantum-artifacts.json" ]; then
    test_result "Artefacts quantiques" "PASS" "quantum-artifacts.json pr√©sent"
else
    test_result "Artefacts quantiques" "FAIL" "quantum-artifacts.json manquant"
fi

# Test 9: V√©rifier la propri√©t√© affectsTimeline
AFFECTS_TIMELINE=$(grep -c "affectsTimeline" backend/src/main/resources/quantum-artifacts.json 2>/dev/null || echo "0")
if [ "$AFFECTS_TIMELINE" -gt 0 ]; then
    test_result "Propri√©t√© affectsTimeline" "PASS" "$AFFECTS_TIMELINE occurrences trouv√©es"
else
    test_result "Propri√©t√© affectsTimeline" "FAIL" "Propri√©t√© manquante"
fi

echo -e "${BLUE}üìã PHASE 5: VALIDATION DE LA PERFORMANCE${NC}"
echo "================================================================"

# Test 10: V√©rifier la compilation
echo -e "${YELLOW}üîß Test de compilation...${NC}"
cd backend
mvn clean compile -q > /dev/null 2>&1
if [ $? -eq 0 ]; then
    test_result "Compilation backend" "PASS" "Code compile sans erreurs"
else
    test_result "Compilation backend" "FAIL" "Erreurs de compilation d√©tect√©es"
fi
cd ..

# Test 11: V√©rifier les tests unitaires
echo -e "${YELLOW}üß™ Test unitaires...${NC}"
cd backend
mvn test -q > /dev/null 2>&1
if [ $? -eq 0 ]; then
    test_result "Tests unitaires" "PASS" "Tous les tests passent"
else
    test_result "Tests unitaires" "FAIL" "Certains tests √©chouent"
fi
cd ..

echo -e "${BLUE}üìã PHASE 6: VALIDATION DE L'INTERFACE${NC}"
echo "================================================================"

# Test 12: V√©rifier les d√©pendances frontend
if [ -f "frontend/package.json" ]; then
    test_result "Configuration frontend" "PASS" "package.json pr√©sent"
else
    test_result "Configuration frontend" "FAIL" "package.json manquant"
fi

# Test 13: V√©rifier les composants React
REACT_COMPONENTS=$(find frontend/src -name "*.tsx" -o -name "*.ts" | wc -l)
if [ "$REACT_COMPONENTS" -gt 10 ]; then
    test_result "Composants React" "PASS" "$REACT_COMPONENTS composants trouv√©s"
else
    test_result "Composants React" "FAIL" "Composants insuffisants"
fi

echo -e "${BLUE}üìã PHASE 7: VALIDATION DE LA DOCUMENTATION${NC}"
echo "================================================================"

# Test 14: V√©rifier la documentation temporelle
TEMPORAL_DOCS=$(find docs/temporal -name "*.md" 2>/dev/null | wc -l)
if [ "$TEMPORAL_DOCS" -gt 0 ]; then
    test_result "Documentation temporelle" "PASS" "$TEMPORAL_DOCS fichiers trouv√©s"
else
    test_result "Documentation temporelle" "FAIL" "Documentation manquante"
fi

# Test 15: V√©rifier le README mis √† jour
README_SECTIONS=$(grep -c "## " README.md 2>/dev/null || echo "0")
if [ "$README_SECTIONS" -gt 10 ]; then
    test_result "README complet" "PASS" "$README_SECTIONS sections trouv√©es"
else
    test_result "README complet" "FAIL" "README incomplet"
fi

echo -e "${BLUE}üìã PHASE 8: VALIDATION DE LA COH√âRENCE GLOBALE${NC}"
echo "================================================================"

# Test 16: V√©rifier la coh√©rence parser-causalit√©
PARSER_CAUSAL_LINKS=$(grep -c "QuantumInterferenceService\|calculateInterference" backend/src/main/java/com/heroesoftimepoc/temporalengine/service/TemporalEngineService.java 2>/dev/null || echo "0")
if [ "$PARSER_CAUSAL_LINKS" -gt 0 ]; then
    test_result "Coh√©rence parser-causalit√©" "PASS" "Liens d√©tect√©s"
else
    test_result "Coh√©rence parser-causalit√©" "FAIL" "Liens manquants"
fi

# Test 17: V√©rifier l'int√©gration syst√®me
SYSTEM_INTEGRATION=$(grep -c "ImprovedTemporalEngineService\|executeTemporalGameScript" backend/src/main/java/com/heroesoftimepoc/temporalengine/controller/*.java 2>/dev/null || echo "0")
if [ "$SYSTEM_INTEGRATION" -gt 0 ]; then
    test_result "Int√©gration syst√®me" "PASS" "Int√©gration d√©tect√©e"
else
    test_result "Int√©gration syst√®me" "FAIL" "Int√©gration manquante"
fi

echo ""
echo "üéØ R√âSUM√â DE LA VALIDATION"
echo "================================================================"

# Calculer le pourcentage de r√©ussite
SUCCESS_RATE=$((TESTS_PASSED * 100 / TESTS_TOTAL))

echo -e "${BLUE}üìä Statistiques:${NC}"
echo "   Tests Total: $TESTS_TOTAL"
echo -e "   Tests R√©ussis: ${GREEN}$TESTS_PASSED${NC}"
echo -e "   Tests √âchou√©s: ${RED}$TESTS_FAILED${NC}"
echo -e "   Taux de R√©ussite: ${PURPLE}$SUCCESS_RATE%${NC}"
echo ""

if [ "$SUCCESS_RATE" -ge 90 ]; then
    echo -e "${GREEN}üéâ SYST√àME UNIFI√â EXCELLENT !${NC}"
    echo -e "${GREEN}‚úÖ Coh√©rence globale valid√©e${NC}"
    echo -e "${GREEN}‚úÖ Performance optimis√©e${NC}"
    echo -e "${GREEN}‚úÖ Documentation compl√®te${NC}"
    echo ""
    echo -e "${YELLOW}üöÄ PR√äT POUR LA PRODUCTION !${NC}"
elif [ "$SUCCESS_RATE" -ge 75 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è SYST√àME UNIFI√â BON${NC}"
    echo -e "${YELLOW}‚úÖ Coh√©rence globale acceptable${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Quelques am√©liorations n√©cessaires${NC}"
    echo ""
    echo -e "${BLUE}üîß Recommandations:${NC}"
    echo "   - Corriger les tests √©chou√©s"
    echo "   - V√©rifier la documentation manquante"
    echo "   - Optimiser les performances"
else
    echo -e "${RED}‚ùå SYST√àME UNIFI√â N√âCESSITE DES AM√âLIORATIONS${NC}"
    echo -e "${RED}‚ùå Coh√©rence globale insuffisante${NC}"
    echo -e "${RED}‚ùå Corrections n√©cessaires${NC}"
    echo ""
    echo -e "${BLUE}üîß Actions Requises:${NC}"
    echo "   - Corriger les erreurs critiques"
    echo "   - Compl√©ter la documentation"
    echo "   - R√©ex√©cuter la migration"
fi

echo ""
echo "üìã CHECKLIST DE VALIDATION COMPL√àTE"
echo "================================================================"
echo "‚ñ° Nomenclature claire et recherchable"
echo "‚ñ° Parser regex ultra-performant"
echo "‚ñ° Causalit√© quantique int√©gr√©e"
echo "‚ñ° Artefacts temporels fonctionnels"
echo "‚ñ° Interface utilisateur moderne"
echo "‚ñ° Documentation compl√®te"
echo "‚ñ° Tests de validation pass√©s"
echo "‚ñ° Performance optimis√©e"
echo "‚ñ° Syst√®me unifi√© coh√©rent"
echo "‚ñ° Pr√™t pour d√©ploiement"
echo ""
echo -e "${PURPLE}üï∞Ô∏è Heroes of Time - Validation Termin√©e !${NC}" 