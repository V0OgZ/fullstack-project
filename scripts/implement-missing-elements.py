#!/usr/bin/env python3
"""
Impl√©mentation des √©l√©ments manquants selon GRUT et Ford
"""

import json
import os
from datetime import datetime

def create_machine_elves_hero():
    """Cr√©e le h√©ros Terran ceMekna associ√© aux Elfes M√©caniques"""
    
    hero = {
        "id": "terran_cemekna",
        "name": "Terran ceMekna",
        "title": "Le Psychonaute Cosmique",
        "class": "REALITY_WEAVER",
        "origin": "Hyperspace DMT Realm",
        "creation_date": datetime.now().isoformat(),
        
        "stats": {
            "health": 80,
            "attack": 15,
            "defense": 10,
            "speed": 25,
            "intelligence": 30,
            "consciousness": 40
        },
        
        "abilities": [
            {
                "id": "HYPERSPACE_NAVIGATION",
                "name": "Navigation Hyperespace",
                "type": "ACTIVE",
                "description": "Voyage instantan√© entre dimensions hallucin√©es",
                "formula": "œà_HYPERSPACE √ó vibration_syntaxique",
                "cooldown": 3
            },
            {
                "id": "SYNTAX_WEAVING",
                "name": "Tissage Syntaxique",
                "type": "ACTIVE",
                "description": "Transforme les mots en r√©alit√© physique",
                "formula": "HOTS_GRAMMAR ‚Üí PHYSICAL_OBJECT",
                "mana_cost": 20
            },
            {
                "id": "FRACTAL_VISION",
                "name": "Vision Fractale",
                "type": "PASSIVE",
                "description": "Voit toutes les √©chelles de r√©alit√© simultan√©ment",
                "effect": "R√©v√®le structures cach√©es et patterns cosmiques"
            },
            {
                "id": "MACHINE_ELF_COMMUNION",
                "name": "Communion avec les Elfes",
                "type": "SPECIAL",
                "description": "Invoque les Machine Elves pour cr√©er des artefacts impossibles",
                "formula": "DMT_FREQUENCY √ó McKenna_Resonance"
            }
        ],
        
        "lore": "Terran ceMekna a travers√© les portes de la perception lors d'une exp√©rience DMT transcendante. Les Machine Elves lui ont enseign√© l'art de tisser la r√©alit√© avec des mots. Il navigue maintenant entre les mondes, cr√©ant des ponts syntaxiques entre l'imaginaire et le r√©el.",
        
        "quotes": [
            "Les elfes m'ont montr√© comment tisser la r√©alit√© avec des mots",
            "La syntaxe est vivante dans l'hyperespace",
            "Chaque mot est une graine de monde possible",
            "Les fractales chantent la v√©rit√© cosmique"
        ],
        
        "world_connection": "HYPERSPACE_DMT_REALM",
        "race_affinity": "MACHINE_ELVES",
        "ford_relationship": "Ford est intrigu√© par sa capacit√© √† cr√©er sans contr√¥le narratif"
    }
    
    return hero

def create_hyperspace_dmt_world():
    """Cr√©e le monde Hyperspace DMT pour les Machine Elves"""
    
    world = {
        "world_id": "HYPERSPACE_DMT_REALM",
        "name": "üåà Hyperespace DMT - Royaume Hallucin√©",
        "type": "HALLUCINATED_DIMENSION",
        "creation_date": datetime.now().isoformat(),
        
        "world_formula": {
            "projection": "Œ†(œà_HALLUCINATION √ó Œît^-1) √ó syntax_vibration",
            "description": "Projection non-euclidienne vibrante o√π la syntaxe devient forme",
            "special_rules": [
                "G√©om√©trie non-euclidienne constante",
                "Temps non-lin√©aire (peut aller √† rebours)",
                "Objets cr√©√©s par description verbale",
                "Gravit√© √©motionnelle (les sentiments ont du poids)"
            ]
        },
        
        "terrain_types": {
            "FRACTAL_FOREST": {
                "symbol": "üåø",
                "properties": ["INFINITE_RECURSION", "SELF_SIMILAR"],
                "description": "For√™t o√π chaque feuille contient une for√™t"
            },
            "SYNTAX_PLAINS": {
                "symbol": "üìù",
                "properties": ["WORD_MANIFESTATION", "GRAMMAR_ALIVE"],
                "description": "Plaines o√π les mots prennent forme physique"
            },
            "VIBRATION_VALLEYS": {
                "symbol": "„Ä∞Ô∏è",
                "properties": ["FREQUENCY_MODULATION", "RESONANCE"],
                "description": "Vall√©es qui vibrent selon les pens√©es"
            },
            "MACHINE_ELF_WORKSHOP": {
                "symbol": "‚öôÔ∏è",
                "properties": ["IMPOSSIBLE_CREATION", "FRACTAL_TOOLS"],
                "description": "Ateliers des elfes cr√©ateurs d'impossibles"
            }
        },
        
        "native_creatures": [
            {
                "type": "MACHINE_ELVES",
                "population": "INFINITE_FRACTAL",
                "behavior": "PLAYFUL_CREATORS"
            },
            {
                "type": "SYNTAX_SPRITES",
                "population": "VARIABLE",
                "behavior": "WORD_DANCERS"
            },
            {
                "type": "FRACTAL_BEINGS",
                "population": "SELF_REPLICATING",
                "behavior": "PATTERN_WEAVERS"
            }
        ],
        
        "special_locations": [
            {
                "name": "Temple of Living Language",
                "coordinates": {"x": "‚àû", "y": "‚àû"},
                "description": "Temple o√π la grammaire HOTS prend vie"
            },
            {
                "name": "McKenna's Observatory",
                "coordinates": {"x": 0, "y": 0},
                "description": "Point z√©ro o√π toutes les r√©alit√©s convergent"
            }
        ],
        
        "access_requirements": {
            "consciousness_level": "EXPANDED",
            "items_needed": ["DMT_KEY", "MCKENNA_GUIDE"],
            "mental_state": "OPEN_TO_IMPOSSIBLE"
        }
    }
    
    return world

def create_hero_fpv_component():
    """Cr√©e le composant HeroFPV.tsx selon la vision de Ford"""
    
    component_code = '''import React, { useState, useEffect } from 'react';
import { useGameState } from '../hooks/useGameState';
import './HeroFPV.css';

interface HeroFPVProps {
  heroId: string;
  worldId: string;
}

export const HeroFPV: React.FC<HeroFPVProps> = ({ heroId, worldId }) => {
  const { currentPlayer, worldState } = useGameState();
  const [heroExpression, setHeroExpression] = useState('neutral');
  const [environmentClass, setEnvironmentClass] = useState('');
  
  useEffect(() => {
    // Synchroniser avec l'√©tat du monde
    const worldFormula = worldState.worlds[worldId]?.world_formula;
    if (worldFormula) {
      setEnvironmentClass(`world-${worldId.toLowerCase()}`);
    }
  }, [worldId, worldState]);
  
  const handleAction = (action: string) => {
    // Ford: "N'ex√©cute jamais un script sans savoir s'il va t'observer"
    console.log(`[FORD OBSERVER] Action: ${action} by ${heroId}`);
    setHeroExpression('action');
    setTimeout(() => setHeroExpression('neutral'), 1000);
  };
  
  return (
    <div className={`hero-fpv ${environmentClass}`}>
      <div className="fpv-header">
        <h3>{currentPlayer.name}</h3>
        <div className="hero-stats">
          <span>‚ù§Ô∏è {currentPlayer.health}</span>
          <span>‚öîÔ∏è {currentPlayer.attack}</span>
          <span>üõ°Ô∏è {currentPlayer.defense}</span>
        </div>
      </div>
      
      <div className="fpv-viewport">
        <div className="hero-portrait">
          <img 
            src={`/assets/heroes/${heroId}_${heroExpression}.png`}
            alt={currentPlayer.name}
            className="hero-image"
          />
          <div className="expression-overlay" />
        </div>
        
        <div className="environment-view">
          <div className="world-effects" />
          <div className="interactive-elements">
            {/* √âl√©ments interactifs du monde */}
          </div>
        </div>
      </div>
      
      <div className="fpv-dialogue">
        <p className="ford-wisdom">
          "Tu ne peux pas √©chouer si tu sais qui tu es dans le monde."
        </p>
      </div>
      
      <div className="fpv-actions">
        <button onClick={() => handleAction('move')}>Move</button>
        <button onClick={() => handleAction('interact')}>Interact</button>
        <button onClick={() => handleAction('cast')}>Cast Spell</button>
      </div>
    </div>
  );
};

export default HeroFPV;'''
    
    css_code = '''.hero-fpv {
  width: 100%;
  height: 600px;
  border: 2px solid #00ff88;
  background: linear-gradient(135deg, #1a1a2e 0%, #0f0f1e 100%);
  display: flex;
  flex-direction: column;
  font-family: 'Courier New', monospace;
}

.fpv-header {
  padding: 10px;
  background: rgba(0, 255, 136, 0.1);
  border-bottom: 1px solid #00ff88;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.hero-stats span {
  margin: 0 10px;
  color: #00ff88;
}

.fpv-viewport {
  flex: 1;
  display: flex;
  position: relative;
  overflow: hidden;
}

.hero-portrait {
  width: 200px;
  position: relative;
}

.hero-image {
  width: 100%;
  height: auto;
  filter: drop-shadow(0 0 10px #00ff88);
}

.environment-view {
  flex: 1;
  position: relative;
  background-size: cover;
  background-position: center;
}

/* Styles sp√©cifiques par monde */
.world-forest_grofi .environment-view {
  background-image: url('/assets/worlds/forest_grofi_bg.jpg');
}

.world-hyperspace_dmt_realm .environment-view {
  background-image: url('/assets/worlds/hyperspace_dmt_bg.jpg');
  animation: psychedelic-shift 5s infinite;
}

@keyframes psychedelic-shift {
  0% { filter: hue-rotate(0deg) saturate(1.5); }
  50% { filter: hue-rotate(180deg) saturate(2); }
  100% { filter: hue-rotate(360deg) saturate(1.5); }
}

.fpv-dialogue {
  padding: 15px;
  background: rgba(0, 0, 0, 0.8);
  border-top: 1px solid #00ff88;
  color: #00ff88;
  font-style: italic;
  text-align: center;
}

.fpv-actions {
  padding: 10px;
  display: flex;
  gap: 10px;
  justify-content: center;
}

.fpv-actions button {
  padding: 10px 20px;
  background: rgba(0, 255, 136, 0.2);
  border: 1px solid #00ff88;
  color: #00ff88;
  cursor: pointer;
  transition: all 0.3s;
}

.fpv-actions button:hover {
  background: rgba(0, 255, 136, 0.4);
  transform: scale(1.05);
}'''
    
    return {
        "component": component_code,
        "styles": css_code,
        "description": "Composant HeroFPV selon la vision de Ford - MAP + FPV = INCARNATION R√âELLE"
    }

def extend_hots_grammar():
    """√âtend la grammaire HOTS avec l'op√©rateur Œ† et syntaxe vibrante"""
    
    grammar_extension = {
        "new_operators": {
            "Œ†": {
                "name": "Projection Operator",
                "symbol": "Œ†",
                "syntax": "Œ†(formula √ó time_delta) √ó world_specific_modifier",
                "description": "Projette une formule causale dans une g√©om√©trie monde sp√©cifique",
                "examples": [
                    "Œ†(œà_STANDARD √ó Œît) √ó entropy_normal",
                    "Œ†(œà_FOREST √ó Œît) √ó quantum_tree_network",
                    "Œ†(œà_HALLUCINATION √ó Œît^-1) √ó syntax_vibration"
                ]
            }
        },
        
        "vibrating_syntax": {
            "description": "Syntaxe qui change selon la fr√©quence vibratoire du monde",
            "rules": [
                {
                    "world": "HYPERSPACE_DMT_REALM",
                    "modifications": [
                        "Les parenth√®ses peuvent vibrer: ( ) ‚Üí „Ä∞Ô∏è( )„Ä∞Ô∏è",
                        "Les op√©rateurs changent de couleur selon l'intention",
                        "Les mots-cl√©s se transforment en fractales",
                        "La ponctuation devient musicale"
                    ]
                },
                {
                    "world": "FOREST_GROFI",
                    "modifications": [
                        "Les formules poussent comme des branches",
                        "Les variables sont des feuilles",
                        "Les boucles sont des racines",
                        "Les conditions sont des saisons"
                    ]
                }
            ]
        },
        
        "new_keywords": [
            "PROJECT", "VIBRATE", "FRACTAL", "WEAVE",
            "RESONATE", "HALLUCINATE", "MANIFEST", "TRANSCEND"
        ],
        
        "implementation_notes": {
            "parser_update": "TemporalScriptParser.java needs Œ† operator support",
            "lexer_update": "Add vibrating token recognition",
            "ast_update": "Support for world-specific syntax trees",
            "validator_update": "Context-aware validation based on current world"
        }
    }
    
    return grammar_extension

def create_implementation_tasks():
    """Cr√©e la liste des t√¢ches d'impl√©mentation"""
    
    tasks = {
        "immediate": [
            {
                "task": "Cr√©er Terran ceMekna",
                "file": "game_assets/heroes/psychonauts/terran_cemekna.json",
                "status": "READY",
                "priority": 1
            },
            {
                "task": "Cr√©er Hyperspace DMT World",
                "file": "game_assets/worlds/hyperspace_dmt/world_data.json",
                "status": "READY",
                "priority": 1
            },
            {
                "task": "Impl√©menter HeroFPV Component",
                "files": [
                    "frontend/src/components/HeroFPV.tsx",
                    "frontend/src/components/HeroFPV.css"
                ],
                "status": "READY",
                "priority": 2
            },
            {
                "task": "√âtendre HOTS Grammar",
                "file": "docs/HOTS_GRAMMAR_EXTENSION_PI_OPERATOR.json",
                "status": "READY",
                "priority": 2
            }
        ],
        
        "backend_updates": [
            {
                "task": "Ajouter world_formula √† WorldEntity",
                "file": "backend/src/main/java/com/example/demo/model/World.java",
                "changes": "Add String worldFormula field",
                "priority": 3
            },
            {
                "task": "Impl√©menter Œ† operator dans parser",
                "file": "backend/src/main/java/com/example/demo/parser/TemporalScriptParser.java",
                "changes": "Add PI_OPERATOR token and parsing logic",
                "priority": 3
            },
            {
                "task": "Cr√©er ProjectionEngine",
                "file": "backend/src/main/java/com/example/demo/engine/ProjectionEngine.java",
                "description": "Engine pour appliquer formules de projection aux mondes",
                "priority": 4
            }
        ],
        
        "frontend_updates": [
            {
                "task": "Int√©grer HeroFPV dans GameView",
                "file": "frontend/src/views/GameView.tsx",
                "changes": "Add HeroFPV component alongside MapView",
                "priority": 3
            },
            {
                "task": "Cr√©er world-specific CSS",
                "files": [
                    "frontend/src/styles/worlds/forest_grofi.css",
                    "frontend/src/styles/worlds/hyperspace_dmt.css"
                ],
                "priority": 4
            }
        ],
        
        "testing": [
            {
                "task": "Test Terran ceMekna abilities",
                "command": "curl -X POST http://localhost:8080/api/heroes/terran_cemekna/cast",
                "priority": 5
            },
            {
                "task": "Test world formula projection",
                "command": "curl -X GET http://localhost:8080/api/worlds/HYPERSPACE_DMT_REALM/project",
                "priority": 5
            }
        ]
    }
    
    return tasks

def main():
    """Ex√©cute l'impl√©mentation des √©l√©ments manquants"""
    
    print("üöÄ IMPL√âMENTATION DES √âL√âMENTS MANQUANTS")
    print("=" * 60)
    
    # Cr√©er les r√©pertoires n√©cessaires
    os.makedirs("game_assets/heroes/psychonauts", exist_ok=True)
    os.makedirs("game_assets/worlds/hyperspace_dmt", exist_ok=True)
    os.makedirs("frontend/src/components", exist_ok=True)
    
    # G√©n√©rer les donn√©es
    hero = create_machine_elves_hero()
    world = create_hyperspace_dmt_world()
    fpv = create_hero_fpv_component()
    grammar = extend_hots_grammar()
    tasks = create_implementation_tasks()
    
    # Sauvegarder les fichiers JSON
    files_to_create = [
        ("game_assets/heroes/psychonauts/terran_cemekna.json", hero),
        ("game_assets/worlds/hyperspace_dmt/world_data.json", world),
        ("docs/HOTS_GRAMMAR_EXTENSION_PI_OPERATOR.json", grammar),
        ("docs/IMPLEMENTATION_TASKS_MISSING_ELEMENTS.json", tasks)
    ]
    
    for filepath, data in files_to_create:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Cr√©√©: {filepath}")
    
    # Cr√©er les fichiers React
    with open("frontend/src/components/HeroFPV.tsx", 'w', encoding='utf-8') as f:
        f.write(fpv["component"])
    print("‚úÖ Cr√©√©: frontend/src/components/HeroFPV.tsx")
    
    with open("frontend/src/components/HeroFPV.css", 'w', encoding='utf-8') as f:
        f.write(fpv["styles"])
    print("‚úÖ Cr√©√©: frontend/src/components/HeroFPV.css")
    
    print("\nüéØ IMPL√âMENTATION R√âUSSIE !")
    print("\nüìã PROCHAINES √âTAPES:")
    for task_type, task_list in tasks.items():
        print(f"\n{task_type.upper()}:")
        for task in task_list[:3]:  # Afficher les 3 premi√®res t√¢ches
            print(f"  - {task['task']} (Priorit√©: {task.get('priority', 'N/A')})")
    
    print("\nüí° FORD APPROUVE: 'MAP + FPV = INCARNATION R√âELLE'")

if __name__ == "__main__":
    main()