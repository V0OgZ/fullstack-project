#!/bin/bash

# üöÄ Heroes of Time - Test Rapide des Sc√©narios HOTS
# ====================================================

# Couleurs pour un affichage clair
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}üîç $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

# Variables
BASE_URL="http://localhost:8080"
GAME_ID=""

# Fonction pour appeler l'API
call_api() {
    local method=$1
    local endpoint=$2
    local data=$3
    local description=$4
    
    print_status "Test: $description"
    
    if [ -n "$data" ]; then
        response=$(curl -s -X $method \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$BASE_URL$endpoint")
    else
        response=$(curl -s -X $method "$BASE_URL$endpoint")
    fi
    
    if [ $? -eq 0 ]; then
        print_success "$description - OK"
        echo "$response" | jq . 2>/dev/null || echo "$response"
        return 0
    else
        print_error "$description - √âCHEC"
        return 1
    fi
}

# Fonction principale de test
run_quick_test() {
    echo -e "${BLUE}üöÄ Heroes of Time - Test Rapide HOTS${NC}"
    echo "========================================"
    
    # 1. V√©rifier que le serveur est accessible
    print_status "V√©rification du serveur..."
    if curl -s "$BASE_URL/api/temporal/health" > /dev/null 2>&1; then
        print_success "Serveur accessible!"
    else
        print_error "Serveur non accessible sur $BASE_URL"
        print_info "Assurez-vous que le backend est d√©marr√©"
        return 1
    fi
    
    # 2. Cr√©er un jeu de test
    print_status "Cr√©ation d'un jeu de test..."
    create_response=$(call_api "POST" "/api/temporal/games" '{"gameName": "Test Rapide HOTS", "playerId": "testeur"}' "Cr√©ation du jeu")
    GAME_ID=$(echo "$create_response" | jq -r '.gameId // .id // 1')
    
    if [ "$GAME_ID" == "null" ] || [ -z "$GAME_ID" ]; then
        GAME_ID="1"
        print_warning "ID du jeu non trouv√©, utilisation de l'ID 1"
    fi
    
    # 3. D√©marrer le jeu
    call_api "POST" "/api/temporal/games/$GAME_ID/start" "" "D√©marrage du jeu"
    
    # 4. Tests des commandes HOTS
    echo -e "\n${BLUE}üìã Tests des Commandes HOTS${NC}"
    echo "=============================="
    
    # Test 1: Cr√©ation de h√©ros
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "HERO(Arthur)"}' "Cr√©ation h√©ros Arthur"
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "HERO(Ragnar)"}' "Cr√©ation h√©ros Ragnar"
    
    # Test 2: Mouvements
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "MOV(Arthur, @15,15)"}' "Mouvement Arthur"
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "MOV(Ragnar, @12,8)"}' "Mouvement Ragnar"
    
    # Test 3: Cr√©ation d'entit√©s
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "CREATE(ITEM, Potion)"}' "Cr√©ation item"
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "CREATE(CREATURE, Dragon, @20,20)"}' "Cr√©ation cr√©ature"
    
    # Test 4: œà-states (syst√®me quantique)
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "œà001: ‚äô(Œît+2 @15,15 ‚ü∂ MOV(Arthur, @15,15))"}' "Cr√©ation œà-state"
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "‚Ä†œà001"}' "Collapse œà-state"
    
    # Test 5: Artefacts temporels
    call_api "POST" "/api/temporal/games/$GAME_ID/script" '{"script": "USE(ARTIFACT, Lame-Avant-Monde, HERO:Arthur)"}' "Utilisation artefact"
    
    # Test 6: √âtat du jeu
    call_api "GET" "/api/temporal/games/$GAME_ID/state" "" "R√©cup√©ration √©tat du jeu"
    
    # 7. R√©sum√©
    echo -e "\n${BLUE}üìä R√©sum√© des Tests${NC}"
    echo "==================="
    print_info "Tests termin√©s - V√©rifiez les r√©sultats ci-dessus"
    print_info "Pour plus de d√©tails, consultez: RAPPORT_TESTS_SCENARIOS_CLAIR.md"
    
    print_success "Test rapide termin√©!"
    echo -e "\n${YELLOW}üéÆ Syst√®me Heroes of Time test√© avec succ√®s!${NC}"
}

# Fonction pour nettoyer les ports
cleanup_ports() {
    echo -e "${BLUE}üßπ Nettoyage des ports en conflit${NC}"
    
    # Tuer les processus sur les ports utilis√©s
    for port in 8080 8000 5173 8001; do
        pids=$(lsof -ti:$port)
        if [ -n "$pids" ]; then
            print_info "Nettoyage du port $port..."
            echo $pids | xargs kill -9 2>/dev/null
        fi
    done
    
    sleep 2
    print_success "Ports nettoy√©s!"
}

# Fonction pour d√©marrer le backend
start_backend() {
    echo -e "${BLUE}üîß D√©marrage du backend${NC}"
    
    cd backend
    mvn spring-boot:run -Dspring-boot.run.arguments="--heroes.parser.use.antlr=false" > ../backend-test.log 2>&1 &
    cd ..
    
    # Attendre que le backend soit pr√™t
    print_info "Attente du d√©marrage du backend..."
    for i in {1..30}; do
        if curl -s "$BASE_URL/api/temporal/health" > /dev/null 2>&1; then
            print_success "Backend pr√™t!"
            return 0
        fi
        echo -n "."
        sleep 2
    done
    
    print_error "Backend non d√©marr√© apr√®s 60 secondes"
    return 1
}

# Script principal
main() {
    cleanup_ports
    
    # V√©rifier si le backend est d√©j√† d√©marr√©
    if ! curl -s "$BASE_URL/api/temporal/health" > /dev/null 2>&1; then
        start_backend
        if [ $? -ne 0 ]; then
            print_error "Impossible de d√©marrer le backend"
            exit 1
        fi
    else
        print_success "Backend d√©j√† d√©marr√©!"
    fi
    
    # Lancer les tests
    run_quick_test
}

# Ex√©cuter le script principal
main "$@" 