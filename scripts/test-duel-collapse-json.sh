#!/bin/bash

# ‚öîÔ∏è TEST DUEL DU COLLAPSE - Version JSON
# =======================================
# Charge et ex√©cute le sc√©nario JSON DUEL_COLLAPSE.json

echo "‚öîÔ∏è TEST DUEL DU COLLAPSE - JSON VERSION"
echo "======================================="
echo "ü•ä Chargement du sc√©nario de duel PVP..."

# Configuration
HOST="localhost:8080"
SCENARIO_JSON="../game_assets/scenarios/visualizer/DUEL_COLLAPSE.json"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# Fonction pour logger avec timestamp
log_with_time() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')]${NC} $1"
}

# V√©rifier que le fichier JSON existe
if [ ! -f "$SCENARIO_JSON" ]; then
    echo -e "${RED}‚ùå Fichier sc√©nario non trouv√©: $SCENARIO_JSON${NC}"
    exit 1
fi

log_with_time "üìÑ Sc√©nario trouv√©: $(basename $SCENARIO_JSON)"

# Fonction pour analyser le sc√©nario JSON
analyze_scenario() {
    echo -e "\n${PURPLE}üìã Analyse du sc√©nario...${NC}"
    
    # Lire et valider le JSON
    if ! scenario_data=$(cat "$SCENARIO_JSON" | jq .); then
        echo -e "${RED}‚ùå JSON invalide${NC}"
        return 1
    fi
    
    # Extraire les informations
    scenario_name=$(echo "$scenario_data" | jq -r '.scenario_info.name')
    scenario_type=$(echo "$scenario_data" | jq -r '.scenario_info.type')
    max_turns=$(echo "$scenario_data" | jq -r '.scenario_info.max_turns')
    difficulty=$(echo "$scenario_data" | jq -r '.scenario_info.difficulty')
    duration=$(echo "$scenario_data" | jq -r '.scenario_info.duration_estimate')
    
    echo -e "${CYAN}üìñ Nom: $scenario_name${NC}"
    echo -e "${CYAN}üéØ Type: $scenario_type${NC}"
    echo -e "${CYAN}üîÑ Tours max: $max_turns${NC}"
    echo -e "${CYAN}‚≠ê Difficult√©: $difficulty${NC}"
    echo -e "${CYAN}‚è±Ô∏è Dur√©e estim√©e: $duration${NC}"
    
    # Analyser la carte
    map_width=$(echo "$scenario_data" | jq -r '.game_settings.map.width')
    map_height=$(echo "$scenario_data" | jq -r '.game_settings.map.height')
    map_terrain=$(echo "$scenario_data" | jq -r '.game_settings.map.terrain')
    
    echo -e "${CYAN}üó∫Ô∏è Carte: ${map_width}x${map_height} ($map_terrain)${NC}"
    
    # Analyser les h√©ros
    heroes_count=$(echo "$scenario_data" | jq '.heroes | length')
    echo -e "${CYAN}ü¶∏ H√©ros: $heroes_count${NC}"
    
    # Lister les h√©ros
    echo "$scenario_data" | jq -r '.heroes[] | "  - \(.name) (Niveau \(.level), \(.stats.health) HP)"' | while read -r hero; do
        echo -e "${CYAN}$hero${NC}"
    done
    
    # Analyser les conditions de victoire
    echo -e "${CYAN}üèÜ Conditions de victoire:${NC}"
    echo "$scenario_data" | jq -r '.game_settings.victory_conditions[]' | while read -r condition; do
        echo -e "${CYAN}  - $condition${NC}"
    done
    
    return 0
}

# Fonction pour setup le jeu selon le sc√©nario
setup_game_from_scenario() {
    echo -e "\n${BLUE}üéÆ Configuration du jeu selon le sc√©nario...${NC}"
    
    # Cr√©er le jeu
    response=$(curl -s -X POST "http://$HOST/api/temporal/games" \
        -H "Content-Type: application/json" \
        -d '{"gameName": "Duel du Collapse", "playerCount": 2}')
    
    GAME_ID=$(echo "$response" | jq -r '.gameId // empty')
    
    if [ -n "$GAME_ID" ]; then
        echo -e "${GREEN}‚úÖ Jeu cr√©√© avec ID: $GAME_ID${NC}"
    else
        echo -e "${RED}‚ùå √âchec de cr√©ation du jeu${NC}"
        return 1
    fi
    
    # Configurer la carte
    scenario_data=$(cat "$SCENARIO_JSON")
    map_data=$(echo "$scenario_data" | jq '.game_settings.map')
    
    echo -e "${BLUE}üó∫Ô∏è Configuration de la carte...${NC}"
    map_response=$(curl -s -X POST "http://$HOST/api/games/$GAME_ID/map" \
        -H "Content-Type: application/json" \
        -d "$map_data")
    
    if echo "$map_response" | jq -e '.success' > /dev/null; then
        echo -e "${GREEN}‚úÖ Carte configur√©e${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Configuration carte: endpoint peut ne pas exister${NC}"
    fi
    
    return 0
}

# Fonction pour cr√©er les h√©ros du sc√©nario
create_scenario_heroes() {
    echo -e "\n${PURPLE}üë• Cr√©ation des h√©ros du sc√©nario...${NC}"
    
    scenario_data=$(cat "$SCENARIO_JSON")
    
    # Cr√©er chaque h√©ros
    echo "$scenario_data" | jq -c '.heroes[]' | while read -r hero_data; do
        hero_name=$(echo "$hero_data" | jq -r '.name')
        hero_level=$(echo "$hero_data" | jq -r '.level')
        hero_x=$(echo "$hero_data" | jq -r '.start_position.x')
        hero_y=$(echo "$hero_data" | jq -r '.start_position.y')
        
        echo -e "\n${BLUE}‚Üí Cr√©ation de $hero_name (Niveau $hero_level)${NC}"
        
        # Cr√©er le h√©ros
        hero_response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
            -H "Content-Type: application/json" \
            -d "{\"script\":\"HERO($hero_name)\"}")
        
        if echo "$hero_response" | jq -e '.success' > /dev/null; then
            echo -e "${GREEN}  ‚úÖ $hero_name cr√©√©${NC}"
        else
            echo -e "${RED}  ‚ùå Erreur cr√©ation $hero_name${NC}"
        fi
        
        # Placer le h√©ros
        place_response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
            -H "Content-Type: application/json" \
            -d "{\"script\":\"PLACE($hero_name, @$hero_x,$hero_y)\"}")
        
        if echo "$place_response" | jq -e '.success' > /dev/null; then
            echo -e "${GREEN}  ‚úÖ $hero_name plac√© en ($hero_x,$hero_y)${NC}"
        else
            echo -e "${YELLOW}  ‚ö†Ô∏è Placement $hero_name: commande peut ne pas exister${NC}"
        fi
        
        # √âquiper le h√©ros
        if echo "$hero_data" | jq -e '.equipment' > /dev/null; then
            echo "$hero_data" | jq -r '.equipment[]' | while read -r equipment; do
                equip_response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
                    -H "Content-Type: application/json" \
                    -d "{\"script\":\"EQUIP($hero_name, $equipment)\"}")
                
                if echo "$equip_response" | jq -e '.success' > /dev/null; then
                    echo -e "${GREEN}    ‚úÖ √âquip√©: $equipment${NC}"
                else
                    echo -e "${YELLOW}    ‚ö†Ô∏è √âquipement $equipment: commande peut ne pas exister${NC}"
                fi
            done
        fi
        
        sleep 1
    done
}

# Fonction pour simuler le duel
simulate_duel() {
    echo -e "\n${PURPLE}‚öîÔ∏è Simulation du duel...${NC}"
    
    scenario_data=$(cat "$SCENARIO_JSON")
    
    # Obtenir les noms des h√©ros
    hero1=$(echo "$scenario_data" | jq -r '.heroes[0].name')
    hero2=$(echo "$scenario_data" | jq -r '.heroes[1].name')
    
    echo -e "${CYAN}ü•ä $hero1 VS $hero2${NC}"
    
    # D√©marrer le combat
    battle_response=$(curl -s -X POST "http://$HOST/api/temporal/execute/$GAME_ID" \
        -H "Content-Type: application/json" \
        -d "{\"script\":\"BATTLE($hero1, $hero2)\"}")
    
    if echo "$battle_response" | jq -e '.success' > /dev/null; then
        echo -e "${GREEN}‚úÖ Combat initi√©${NC}"
        
        # Afficher les d√©tails du combat si disponibles
        if echo "$battle_response" | jq -e '.result' > /dev/null; then
            battle_result=$(echo "$battle_response" | jq -r '.result')
            echo -e "${CYAN}üéØ R√©sultat: $battle_result${NC}"
        fi
    else
        echo -e "${RED}‚ùå Erreur lors du combat${NC}"
        echo "$battle_response" | jq '.'
    fi
}

# Fonction pour v√©rifier les conditions de victoire
check_victory_conditions() {
    echo -e "\n${PURPLE}üèÜ V√©rification des conditions de victoire...${NC}"
    
    scenario_data=$(cat "$SCENARIO_JSON")
    
    # Lister les conditions
    echo "$scenario_data" | jq -r '.game_settings.victory_conditions[]' | while read -r condition; do
        echo -e "${CYAN}  üìã $condition${NC}"
    done
    
    # Obtenir l'√©tat du jeu pour v√©rifier
    if [ -n "$GAME_ID" ]; then
        game_state=$(curl -s "http://$HOST/api/games/$GAME_ID/state")
        
        if [ "$game_state" != "null" ] && [ "$game_state" != "" ]; then
            echo -e "\n${CYAN}üéÆ √âtat actuel du jeu:${NC}"
            echo "$game_state" | jq '.'
        fi
    fi
}

# Fonction pour afficher le r√©sum√© du duel
show_duel_summary() {
    echo -e "\n${PURPLE}üìä R√âSUM√â DU DUEL${NC}"
    echo "===================="
    
    scenario_data=$(cat "$SCENARIO_JSON")
    
    # Informations du sc√©nario
    echo -e "${CYAN}üìñ Sc√©nario: $(echo "$scenario_data" | jq -r '.scenario_info.name')${NC}"
    echo -e "${CYAN}‚≠ê Difficult√©: $(echo "$scenario_data" | jq -r '.scenario_info.difficulty')${NC}"
    echo -e "${CYAN}‚è±Ô∏è Dur√©e: $(echo "$scenario_data" | jq -r '.scenario_info.duration_estimate')${NC}"
    
    # H√©ros participants
    echo -e "\n${CYAN}üë• Participants:${NC}"
    echo "$scenario_data" | jq -r '.heroes[] | "  - \(.name) (\(.class), Niveau \(.level))"' | while read -r hero; do
        echo -e "${CYAN}$hero${NC}"
    done
    
    echo -e "\n${GREEN}‚úÖ Test du duel termin√©${NC}"
}

# EX√âCUTION PRINCIPALE
main() {
    log_with_time "üöÄ D√©marrage du test DUEL COLLAPSE JSON"
    
    # √âtape 1: Analyser le sc√©nario
    if ! analyze_scenario; then
        exit 1
    fi
    
    # √âtape 2: V√©rifier le backend
    echo -e "\n${BLUE}üîç V√©rification du backend...${NC}"
    if ! curl -s "$HOST/health" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Backend non accessible${NC}"
        echo -e "${YELLOW}üí° D√©marrez le backend avec: mvn spring-boot:run${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Backend accessible${NC}"
    
    # √âtape 3: Setup du jeu
    if ! setup_game_from_scenario; then
        exit 1
    fi
    
    # √âtape 4: Cr√©er les h√©ros
    create_scenario_heroes
    
    # √âtape 5: Simuler le duel
    simulate_duel
    
    # √âtape 6: V√©rifier les conditions
    check_victory_conditions
    
    # √âtape 7: R√©sum√©
    show_duel_summary
    
    log_with_time "üèÅ Test termin√©"
}

# Gestion des erreurs
set -e
trap 'echo -e "\n${RED}‚ùå Erreur d√©tect√©e, arr√™t du script${NC}"; exit 1' ERR

# Lancer le test
main "$@"