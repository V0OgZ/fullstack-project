#!/usr/bin/env python3
"""
Script pour corriger le syst√®me de persistance et impl√©menter les √©l√©ments manquants
"""

import json
import os
import shutil
from datetime import datetime
from pathlib import Path

def create_persistence_layer():
    """Cr√©e une couche de persistance pour les donn√©es du jeu"""
    
    print("üîß Cr√©ation du syst√®me de persistance...")
    
    # Cr√©er la structure de r√©pertoires
    dirs = [
        "data/db",
        "data/backup",
        "data/worlds",
        "data/heroes", 
        "data/artifacts",
        "data/transcendence",
        "data/panopticon"
    ]
    
    for dir_path in dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Cr√©√©: {dir_path}")
    
    # Cr√©er le fichier de configuration de persistance
    persistence_config = {
        "version": "1.0",
        "created": datetime.now().isoformat(),
        "persistence_strategy": {
            "worlds": "JSON + DB",
            "heroes": "JSON + DB",
            "artifacts": "JSON + DB",
            "transcendence_state": "REDIS + JSON backup",
            "panopticon_state": "REDIS + JSON backup"
        },
        "backup_schedule": {
            "frequency": "every_5_minutes",
            "retention": "7_days"
        },
        "world_formulas": {
            "enabled": True,
            "persist_calculations": True
        }
    }
    
    with open("data/persistence_config.json", "w", encoding="utf-8") as f:
        json.dump(persistence_config, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Configuration de persistance cr√©√©e")
    
def create_world_persistence_service():
    """Cr√©e un service Java pour la persistance des mondes"""
    
    service_code = '''package com.example.demo.service;

import org.springframework.stereotype.Service;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

@Service
public class WorldPersistenceService {
    
    private static final Logger logger = LoggerFactory.getLogger(WorldPersistenceService.class);
    private static final String PERSISTENCE_DIR = "./data/worlds/";
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final Map<String, Object> worldStates = new ConcurrentHashMap<>();
    
    @PostConstruct
    public void loadPersistedWorlds() {
        logger.info("üåç Chargement des mondes persist√©s...");
        File dir = new File(PERSISTENCE_DIR);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        
        File[] files = dir.listFiles((d, name) -> name.endsWith(".json"));
        if (files != null) {
            for (File file : files) {
                try {
                    Map<String, Object> world = objectMapper.readValue(file, Map.class);
                    String worldId = (String) world.get("world_id");
                    worldStates.put(worldId, world);
                    logger.info("‚úÖ Monde charg√©: {}", worldId);
                } catch (IOException e) {
                    logger.error("‚ùå Erreur chargement monde: {}", file.getName(), e);
                }
            }
        }
    }
    
    @PreDestroy
    public void saveAllWorlds() {
        logger.info("üíæ Sauvegarde de tous les mondes avant arr√™t...");
        worldStates.forEach(this::persistWorld);
    }
    
    public void persistWorld(String worldId, Object worldData) {
        try {
            File file = new File(PERSISTENCE_DIR + worldId + ".json");
            objectMapper.writerWithDefaultPrettyPrinter()
                .writeValue(file, worldData);
            worldStates.put(worldId, worldData);
            logger.info("‚úÖ Monde persist√©: {}", worldId);
        } catch (IOException e) {
            logger.error("‚ùå Erreur persistance monde: {}", worldId, e);
        }
    }
    
    public Object getWorld(String worldId) {
        return worldStates.get(worldId);
    }
    
    public Map<String, Object> getAllWorlds() {
        return new HashMap<>(worldStates);
    }
}'''
    
    os.makedirs("backend/src/main/java/com/example/demo/service", exist_ok=True)
    with open("backend/src/main/java/com/example/demo/service/WorldPersistenceService.java", "w") as f:
        f.write(service_code)
    
    print("‚úÖ Service de persistance des mondes cr√©√©")

def create_transcendence_persistence():
    """Cr√©e la persistance pour l'√©tat de transcendance"""
    
    transcendence_state = {
        "memento_tattoos": {
            "last_sync": datetime.now().isoformat(),
            "infinite_loops_resolved": True,
            "recursive_depth_limit": 10,
            "active_tattoos": []
        },
        "panopticon_state": {
            "dimensions": ["X", "Y", "Z", "T", "Œ®", "Œ£", "S", "‚Ñù"],
            "active_views": [],
            "forest_vision_enabled": True
        },
        "world_formulas": {
            "FOREST_GROFI": "Œ†(œà_FOREST √ó Œît) √ó quantum_tree_network",
            "HYPERSPACE_DMT_REALM": "Œ†(consciousness √ó vibration_frequency) √ó fractal_dimension"
        }
    }
    
    with open("data/transcendence/current_state.json", "w", encoding="utf-8") as f:
        json.dump(transcendence_state, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ √âtat de transcendance persist√©")

def fix_world_associations():
    """Corrige les associations monde-h√©ros-ressources"""
    
    print("\nüîß Correction des associations monde-h√©ros-ressources...")
    
    # Charger tous les h√©ros
    heroes_dir = Path("game_assets/heroes")
    world_associations = {}
    
    for hero_file in heroes_dir.rglob("*.json"):
        try:
            with open(hero_file, "r", encoding="utf-8") as f:
                hero_data = json.load(f)
                
            # Ajouter l'association au monde si elle manque
            if "world_id" not in hero_data:
                # D√©terminer le monde selon le type de h√©ros
                if "psychonauts" in str(hero_file):
                    hero_data["world_id"] = "HYPERSPACE_DMT_REALM"
                elif "forest" in str(hero_file).lower():
                    hero_data["world_id"] = "FOREST_GROFI"
                else:
                    hero_data["world_id"] = "PANDORA"  # Monde par d√©faut
                
                # Sauvegarder avec l'association
                with open(hero_file, "w", encoding="utf-8") as f:
                    json.dump(hero_data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ H√©ros {hero_data.get('name', 'Unknown')} associ√© au monde {hero_data['world_id']}")
            
            # Enregistrer l'association
            world_id = hero_data.get("world_id", "UNKNOWN")
            if world_id not in world_associations:
                world_associations[world_id] = {"heroes": [], "artifacts": []}
            world_associations[world_id]["heroes"].append(hero_data.get("id", "unknown"))
            
        except Exception as e:
            print(f"‚ùå Erreur traitement h√©ros {hero_file}: {e}")
    
    # Sauvegarder les associations
    with open("data/world_associations.json", "w", encoding="utf-8") as f:
        json.dump(world_associations, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Associations monde-h√©ros corrig√©es")

def create_backup_script():
    """Cr√©e un script de sauvegarde automatique"""
    
    backup_script = '''#!/bin/bash
# Script de sauvegarde automatique

BACKUP_DIR="data/backup/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "üîÑ Sauvegarde en cours..."

# Sauvegarder les assets
cp -r game_assets "$BACKUP_DIR/"

# Sauvegarder l'√©tat de transcendance
cp -r data/transcendence "$BACKUP_DIR/"

# Sauvegarder les mondes persist√©s
cp -r data/worlds "$BACKUP_DIR/"

# Cr√©er un fichier de m√©tadonn√©es
cat > "$BACKUP_DIR/backup_metadata.json" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "version": "1.0",
  "components": [
    "game_assets",
    "transcendence_state",
    "world_persistence"
  ]
}
EOF

echo "‚úÖ Sauvegarde compl√®te: $BACKUP_DIR"

# Nettoyer les vieilles sauvegardes (garder 7 jours)
find data/backup -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
'''
    
    with open("scripts/auto-backup.sh", "w") as f:
        f.write(backup_script)
    
    os.chmod("scripts/auto-backup.sh", 0o755)
    print("‚úÖ Script de sauvegarde automatique cr√©√©")

def main():
    print("üöÄ CORRECTION DU SYST√àME DE PERSISTANCE\n")
    
    # 1. Cr√©er la couche de persistance
    create_persistence_layer()
    
    # 2. Cr√©er le service de persistance des mondes
    create_world_persistence_service()
    
    # 3. Cr√©er la persistance de transcendance
    create_transcendence_persistence()
    
    # 4. Corriger les associations
    fix_world_associations()
    
    # 5. Cr√©er le script de backup
    create_backup_script()
    
    print("\n‚úÖ SYST√àME DE PERSISTANCE CORRIG√â!")
    print("\nüìã Actions recommand√©es:")
    print("1. Red√©marrer le backend avec le nouveau service")
    print("2. Configurer une t√¢che cron pour le backup automatique")
    print("3. Tester la persistance avec un red√©marrage complet")

if __name__ == "__main__":
    main()