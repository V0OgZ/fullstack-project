package com.example.demo.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

/**
 * üî´ VINCE VEGA DEMO CONTROLLER - INTERMODE H√âROS
 * 
 * Controller pour la d√©mo interdimensionnelle de Vince Vega l'Errant
 * - Gun .45 qui tire entre instances
 * - Capacit√©s quatri√®me mur
 * - Errance dimensionnelle
 * - Dialogue direct avec le joueur
 * 
 * @author OPUS-MEMENTO-CLAUDIUS
 * @version 1.0 - R√©volution GRUT
 */
@RestController
@RequestMapping("/api/vince-vega")
@Tag(name = "üî´ Vince Vega Demo", description = "D√©mo h√©ros interdimensionnel Vince Vega l'Errant")
@CrossOrigin(origins = "*")
public class VinceVegaDemoController {

    // ======================
    // CONSTANTES VINCE VEGA
    // ======================
    
    private static final String[] VINCE_QUOTES = {
        "C'est pas notre monde, mec. Et le pire ? Je suis presque s√ªr d'avoir d√©j√† foutu le bordel ici.",
        "Je tire l√†-bas, √ßa meurt ici. C'est beau la technologie.",
        "OK, soit j'ai trop tir√© sur ce truc, soit on vient de changer de d√©cor...",
        "T'es qui toi ? Le mec derri√®re l'√©cran ? Salut !",
        "On dirait que quelqu'un teste mes capacit√©s. J'aime √ßa.",
        "Dimensional Travel, baby ! Like Pulp Fiction but with more quantum shit.",
        "Mon gun tire pas des balles, il tire des paradoxes causaux.",
        "Yo joueur ! Tu veux que je change de monde ou qu'est-ce ?",
        "Ce monde-l√† me conna√Æt pas encore. Parfait pour faire du grabuge.",
        "D√©tecteur causal activ√©... Yeah, il y a de la distorsion temporelle ici."
    };
    
    private static final String[] AVAILABLE_WORLDS = {
        "ezorostam_world", "grottarp_world", "source_world", "tour_sombre_world", 
        "foret_grofi_world", "desert_causale_world", "interstice_temporel"
    };

    // ======================
    // ENDPOINTS D√âMO VINCE VEGA
    // ======================

    @GetMapping("/status")
    @Operation(summary = "üìä Status Vince Vega", description = "√âtat actuel de Vince Vega l'Errant")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Status r√©cup√©r√© avec succ√®s")
    })
    public ResponseEntity<Map<String, Object>> getVinceStatus() {
        Map<String, Object> status = new HashMap<>();
        
        status.put("name", "Vince Vega l'Errant");
        status.put("tier", "üß± QUATRI√àME MUR");
        status.put("current_world", "interstice_temporel");
        status.put("gun_ammo", 8); // .45 classique
        status.put("meta_awareness", true);
        status.put("dimensional_travel", true);
        status.put("causal_detector", "ACTIVE");
        status.put("quote", getRandomQuote());
        status.put("available_worlds", Arrays.asList(AVAILABLE_WORLDS));
        status.put("special_abilities", Arrays.asList(
            "CROSS_INSTANCE_SHOOT", "META_DIALOGUE", "DIMENSIONAL_TRAVEL", 
            "CAUSAL_DETECTION", "FOURTH_WALL_BREAK"
        ));
        
        return ResponseEntity.ok(status);
    }

    @PostMapping("/shoot")
    @Operation(summary = "üî´ Gun Interdimensionnel", description = "Vince tire avec son .45 entre instances")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Tir effectu√© avec succ√®s"),
        @ApiResponse(responseCode = "400", description = "Cible invalide ou monde inexistant")
    })
    public ResponseEntity<Map<String, Object>> shootAcrossInstances(
            @Parameter(description = "Monde cible pour le tir") @RequestParam String targetWorld,
            @Parameter(description = "Coordonn√©es cible (x,y)") @RequestParam(required = false) String targetCoords,
            @Parameter(description = "Type de munition") @RequestParam(defaultValue = "paradox_bullet") String ammoType
    ) {
        
        Map<String, Object> result = new HashMap<>();
        
        // Validation monde cible
        if (!Arrays.asList(AVAILABLE_WORLDS).contains(targetWorld)) {
            result.put("success", false);
            result.put("message", "Monde inconnu, mec. Mon gun tire pas dans le vide cosmique.");
            result.put("vince_quote", "√áa ressemble pas √† un monde que je connais, √ßa...");
            return ResponseEntity.badRequest().body(result);
        }
        
        // Simulation tir interdimensionnel
        result.put("success", true);
        result.put("action", "CROSS_INSTANCE_SHOOT");
        result.put("source_world", "interstice_temporel");
        result.put("target_world", targetWorld);
        result.put("target_coords", targetCoords != null ? targetCoords : "15,15");
        result.put("ammo_type", ammoType);
        result.put("damage", calculateInterDimensionalDamage(targetWorld, ammoType));
        result.put("causal_effect", generateCausalEffect(targetWorld));
        result.put("vince_reaction", generateShootReaction(targetWorld));
        result.put("fourth_wall_break", generateFourthWallComment());
        
        // Log de l'action
        System.out.println("üî´ VINCE VEGA SHOOTS: " + targetWorld + " -> " + result.get("damage") + " dmg");
        
        return ResponseEntity.ok(result);
    }

    @PostMapping("/travel")
    @Operation(summary = "üåÄ Voyage Dimensionnel", description = "Vince voyage entre les mondes")
    public ResponseEntity<Map<String, Object>> travelBetweenWorlds(
            @Parameter(description = "Monde de destination") @RequestParam String destinationWorld
    ) {
        
        Map<String, Object> result = new HashMap<>();
        
        if (!Arrays.asList(AVAILABLE_WORLDS).contains(destinationWorld)) {
            result.put("success", false);
            result.put("message", "Ce monde existe pas dans ma playlist, d√©sol√©.");
            return ResponseEntity.badRequest().body(result);
        }
        
        result.put("success", true);
        result.put("action", "DIMENSIONAL_TRAVEL");
        result.put("from_world", "interstice_temporel");
        result.put("to_world", destinationWorld);
        result.put("travel_method", "üåÄ Passage Interdimensionnel");
        result.put("arrival_quote", generateArrivalQuote(destinationWorld));
        result.put("world_analysis", analyzeNewWorld(destinationWorld));
        result.put("causal_signature", "TEMPORAL_SHIFT_DETECTED");
        
        return ResponseEntity.ok(result);
    }

    @GetMapping("/talk-to-player")
    @Operation(summary = "üí¨ Dialogue Joueur", description = "Vince parle directement au joueur (Quatri√®me Mur)")
    public ResponseEntity<Map<String, Object>> talkToPlayer() {
        Map<String, Object> dialogue = new HashMap<>();
        
        String[] playerDialogues = {
            "Salut toi ! Oui, toi derri√®re l'√©cran. Tu t'amuses bien avec mon API ?",
            "Tu sais que je peux te voir, hein ? C'est √ßa le Quatri√®me Mur, baby !",
            "Alors, on teste mes capacit√©s ? J'esp√®re que ton serveur tient le choc !",
            "Tu veux que je tire o√π exactement ? Fais-moi une requ√™te POST, on va s'marrer !",
            "Entre nous, ton code est pas mal. Pas parfait, mais pas mal.",
            "Dis-moi, √ßa fait quoi d'√™tre de l'autre c√¥t√© de l'API ? Moi je trouve √ßa cool !",
            "Tu veux voir un vrai bug ? Regarde-moi faire un voyage interdimensionnel !",
            "API REST, JSON, HTTP... Vous avez de beaux outils dans votre dimension !"
        };
        
        dialogue.put("speaker", "Vince Vega l'Errant");
        dialogue.put("target", "PLAYER_REAL_WORLD");
        dialogue.put("message", playerDialogues[new Random().nextInt(playerDialogues.length)]);
        dialogue.put("type", "FOURTH_WALL_BREAK");
        dialogue.put("meta_level", "DIRECT_PLAYER_INTERACTION");
        dialogue.put("awareness", "FULL_META_CONSCIOUSNESS");
        
        return ResponseEntity.ok(dialogue);
    }

    @GetMapping("/detect-causal")
    @Operation(summary = "üîç D√©tection Causale", description = "Vince d√©tecte les interf√©rences temporelles avec ses c√¥tes")
    public ResponseEntity<Map<String, Object>> detectCausalInterference() {
        Map<String, Object> detection = new HashMap<>();
        
        // Simulation d√©tection causale
        Random rand = new Random();
        int interferenceLevel = rand.nextInt(100);
        
        detection.put("detector_status", "ACTIVE");
        detection.put("interference_level", interferenceLevel);
        detection.put("causal_signature", generateCausalSignature());
        detection.put("threat_level", interferenceLevel > 70 ? "HIGH" : interferenceLevel > 40 ? "MEDIUM" : "LOW");
        detection.put("vince_analysis", generateCausalAnalysis(interferenceLevel));
        detection.put("recommended_action", interferenceLevel > 70 ? "SHOOT_FIRST_ASK_LATER" : "OBSERVE_AND_WAIT");
        
        // C√¥tes causales (tatouages d√©tecteurs)
        List<Map<String, Object>> ribs = new ArrayList<>();
        for (int i = 1; i <= 6; i++) {
            Map<String, Object> rib = new HashMap<>();
            rib.put("rib_number", i);
            rib.put("vibration_level", rand.nextInt(10));
            rib.put("temporal_echo", rand.nextBoolean());
            ribs.add(rib);
        }
        detection.put("causal_ribs_status", ribs);
        
        return ResponseEntity.ok(detection);
    }

    @GetMapping("/quantum-gun-stats")
    @Operation(summary = "üìä Stats Gun Quantique", description = "Statistiques d√©taill√©es du .45 de Vince")
    public ResponseEntity<Map<String, Object>> getQuantumGunStats() {
        Map<String, Object> gunStats = new HashMap<>();
        
        gunStats.put("weapon_name", "Le .45 de Vince Vega");
        gunStats.put("type", "INTERDIMENSIONAL_HANDGUN");
        gunStats.put("tier", "QUATRI√àME MUR");
        gunStats.put("damage_base", 85);
        gunStats.put("damage_interdimensional", 150);
        gunStats.put("ammo_capacity", 8);
        gunStats.put("reload_time", "2.5 secondes dimensionnelles");
        gunStats.put("special_effects", Arrays.asList(
            "CROSS_INSTANCE_SHOT", "CAUSAL_PARADOX_DAMAGE", "REALITY_PUNCTURE", "TIMELINE_DISRUPTION"
        ));
        gunStats.put("ammunition_types", Arrays.asList(
            "paradox_bullet", "quantum_slug", "causal_hollow_point", "meta_fragmenting_round"
        ));
        gunStats.put("effective_range", "INFINITE (Entre dimensions)");
        gunStats.put("accuracy", "Plot Armor Dependent");
        gunStats.put("legendary_quote", "Je tire l√†-bas, √ßa meurt ici. C'est beau la technologie.");
        
        return ResponseEntity.ok(gunStats);
    }

    // ======================
    // M√âTHODES UTILITAIRES
    // ======================

    private String getRandomQuote() {
        return VINCE_QUOTES[new Random().nextInt(VINCE_QUOTES.length)];
    }

    private int calculateInterDimensionalDamage(String targetWorld, String ammoType) {
        int baseDamage = 85;
        
        // Bonus par type de munition
        switch (ammoType) {
            case "quantum_slug": return baseDamage + 30;
            case "causal_hollow_point": return baseDamage + 45;
            case "meta_fragmenting_round": return baseDamage + 60;
            default: return baseDamage + 15; // paradox_bullet
        }
    }

    private String generateCausalEffect(String targetWorld) {
        String[] effects = {
            "Ondulation spatio-temporelle d√©tect√©e",
            "Fracture causale mineure dans " + targetWorld,
            "√âcho paradoxal propag√© √† travers les dimensions", 
            "Stabilit√© temporelle r√©duite de 12%",
            "Cr√©ation d'une boucle causale secondaire"
        };
        return effects[new Random().nextInt(effects.length)];
    }

    private String generateShootReaction(String targetWorld) {
        return "Boom ! Tir effectu√© dans " + targetWorld + ". " + 
               "Mon d√©tecteur causal va avoir du boulot apr√®s √ßa !";
    }

    private String generateFourthWallComment() {
        String[] comments = {
            "H√© joueur ! Tu as vu ce tir ? Styl√© non ?",
            "API REST + Gun interdimensionnel = Best combo ever !",
            "Tu devrais logger √ßa dans tes metrics, c'est du contenu premium !",
            "Entre nous, ton backend g√®re bien mes capacit√©s quantiques !",
            "√áa c'est du JSON de qualit√© ! Comme mes balles !"
        };
        return comments[new Random().nextInt(comments.length)];
    }

    private String generateArrivalQuote(String world) {
        Map<String, String> worldQuotes = new HashMap<>();
        worldQuotes.put("ezorostam_world", "Ezorostam... √áa sent le souf re et les opportunit√©s ici !");
        worldQuotes.put("grottarp_world", "Grottarp ! Un monde qui me va bien, sombre et myst√©rieux.");
        worldQuotes.put("source_world", "La Source... M√™me moi je me sens petit dans ce lieu.");
        worldQuotes.put("tour_sombre_world", "La Tour Sombre ! Enfin un d√©fi √† ma hauteur !");
        worldQuotes.put("foret_grofi_world", "For√™t GROFI... J'esp√®re que GRUT est friendly !");
        
        return worldQuotes.getOrDefault(world, "Nouveau monde, nouvelles r√®gles √† casser !");
    }

    private Map<String, Object> analyzeNewWorld(String world) {
        Map<String, Object> analysis = new HashMap<>();
        Random rand = new Random();
        
        analysis.put("danger_level", rand.nextInt(10) + 1);
        analysis.put("quantum_stability", rand.nextInt(100));
        analysis.put("local_physics", rand.nextBoolean() ? "EUCLIDEAN" : "NON_EUCLIDEAN");
        analysis.put("meta_accessibility", rand.nextBoolean() ? "FOURTH_WALL_ACTIVE" : "STANDARD_NARRATIVE");
        analysis.put("gun_effectiveness", rand.nextInt(50) + 50 + "%");
        
        return analysis;
    }

    private String generateCausalSignature() {
        String[] signatures = {
            "œà_TEMPORAL_ECHO_47.2Hz", "ŒîCAUSE_LOOP_DETECTED", "QUANTUM_FLUTTER_3.14kHz",
            "PARADOX_RESONANCE_ACTIVE", "TIMELINE_VARIANCE_0.003%", "CAUSAL_DRIFT_NOMINAL"
        };
        return signatures[new Random().nextInt(signatures.length)];
    }

    private String generateCausalAnalysis(int level) {
        if (level > 70) {
            return "Mes c√¥tes vibrent comme des maracas ! Il y a du gros bordel temporel ici !";
        } else if (level > 40) {
            return "Petite interf√©rence causale... Rien que mon gun peut pas r√©gler.";
        } else {
            return "Tout est cool niveau causalit√©. On peut y aller tranquille.";
        }
    }
} 