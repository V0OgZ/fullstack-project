package com.example.demo.controller;

import com.example.demo.service.MagicFormulaEngine;
import com.example.demo.model.GameContext;
import com.example.demo.model.FormulaResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.messaging.simp.annotation.SendToUser;
import org.springframework.stereotype.Controller;

import java.util.Map;
import java.util.HashMap;
import java.time.LocalDateTime;

/**
 * ‚ö° TEMPORAL WEBSOCKETS CONTROLLER - OPUS VISION
 * ==============================================
 * 
 * Controller d√©di√© aux WebSockets Temporels selon les sp√©cifications
 * du Livre d'Opus Bootstrap Paradox.
 * 
 * VISION OPUS: "Communication temps r√©el pour streaming WSG"
 * OBJECTIF: Synchronisation √©tats œà (psi) √† travers timelines
 * STATUS: ‚úÖ PRIORITY_1_IMPLEMENTED
 * 
 * üîÆ OPUS: "WebSockets Temporels = pont entre r√©alit√©s parall√®les"
 */
@Controller
public class TemporalWebSocketController {
    
    @Autowired
    private SimpMessagingTemplate messagingTemplate;
    
    @Autowired
    private MagicFormulaEngine magicFormulaEngine;
    
    // ========================================
    // üåÄ HANDLERS TEMPORELS SELON OPUS
    // ========================================
    
    /**
     * üîÆ SYNCHRONISATION √âTAT PSI
     * Handler pour synchroniser les √©tats œà (psi) entre timelines
     */
    @MessageMapping("/temporal-app/sync-psi-state")
    public void handlePsiStateSync(@Payload Map<String, Object> message) {
        String sessionId = (String) message.get("sessionId");
        String playerId = (String) message.get("playerId");
        String psiState = (String) message.get("psiState");
        
        try {
            // üåÄ OPUS: Traitement √©tat œà via MagicFormulaEngine
            GameContext context = new GameContext(sessionId);
            context.getMetadata().put("playerId", playerId);
            context.getMetadata().put("psiState", psiState);
            
            // Broadcast √©tat œà synchronis√© √† tous les joueurs de la session
            Map<String, Object> syncResponse = Map.of(
                "type", "PSI_STATE_SYNC",
                "sessionId", sessionId,
                "psiState", psiState,
                "timestamp", LocalDateTime.now(),
                "opus_blessing", "üîÆ √âtat œà synchronis√© selon Bootstrap Paradox"
            );
            
            messagingTemplate.convertAndSend("/temporal/session/" + sessionId, syncResponse);
            
        } catch (Exception e) {
            // Erreur envoy√©e au joueur sp√©cifique
            messagingTemplate.convertAndSendToUser(playerId, "/queue/temporal-error", Map.of(
                "type", "PSI_SYNC_ERROR",
                "message", "√âchec synchronisation œà: " + e.getMessage(),
                "opus_warning", "‚ö†Ô∏è Bootstrap Paradox perturb√©"
            ));
        }
    }
    
    /**
     * üìä STREAMING WSG (World State Graph)
     * Handler pour streaming en temps r√©el du graphe d'√©tat mondial
     */
    @MessageMapping("/wsg-app/stream-world-state")
    public void handleWSGStreaming(@Payload Map<String, Object> message) {
        String sessionId = (String) message.get("sessionId");
        String playerId = (String) message.get("playerId");
        
        try {
            // üéØ OPUS: G√©n√©ration streaming WSG
            Map<String, Object> wsgData = generateWSGSnapshot(sessionId);
            
            Map<String, Object> streamResponse = Map.of(
                "type", "WSG_STREAM_UPDATE",
                "sessionId", sessionId,
                "wsgData", wsgData,
                "timestamp", LocalDateTime.now(),
                "streamId", "wsg-" + System.currentTimeMillis(),
                "opus_vision", "üìä WSG streaming selon vision Bootstrap"
            );
            
            // Stream vers canal WSG d√©di√©
            messagingTemplate.convertAndSend("/wsg-stream/session/" + sessionId, streamResponse);
            
        } catch (Exception e) {
            messagingTemplate.convertAndSendToUser(playerId, "/queue/wsg-error", Map.of(
                "type", "WSG_STREAM_ERROR", 
                "message", "√âchec streaming WSG: " + e.getMessage()
            ));
        }
    }
    
    /**
     * ‚ö° SYNCHRONISATION CAUSALE
     * Handler pour maintenir coh√©rence causale entre timelines
     */
    @MessageMapping("/causal-app/sync-causal-chain")
    public void handleCausalSync(@Payload Map<String, Object> message) {
        String sessionId = (String) message.get("sessionId");
        String playerId = (String) message.get("playerId");
        String causalAction = (String) message.get("causalAction");
        
        try {
            // üîÆ OPUS: Traitement cha√Æne causale
            Map<String, Object> causalResult = processCausalChain(sessionId, causalAction);
            
            Map<String, Object> causalResponse = Map.of(
                "type", "CAUSAL_SYNC_UPDATE",
                "sessionId", sessionId,
                "causalAction", causalAction,
                "causalResult", causalResult,
                "timestamp", LocalDateTime.now(),
                "opus_guidance", "‚ö° Cha√Æne causale pr√©serv√©e selon Bootstrap"
            );
            
            // Broadcast synchronisation causale
            messagingTemplate.convertAndSend("/causal-sync/session/" + sessionId, causalResponse);
            
        } catch (Exception e) {
            messagingTemplate.convertAndSendToUser(playerId, "/queue/causal-error", Map.of(
                "type", "CAUSAL_SYNC_ERROR",
                "message", "√âchec sync causale: " + e.getMessage(),
                "opus_warning", "‚ö†Ô∏è Risque collapse Bootstrap Paradox"
            ));
        }
    }
    
    /**
     * üéÆ EX√âCUTION FORMULE TEMPORELLE VIA WEBSOCKET
     * Handler pour ex√©cuter formules magiques en temps r√©el
     */
    @MessageMapping("/temporal-app/execute-formula")
    @SendToUser("/queue/formula-result")
    public Map<String, Object> handleTemporalFormula(@Payload Map<String, Object> message) {
        String formula = (String) message.get("formula");
        String playerId = (String) message.get("playerId");
        String sessionId = (String) message.get("sessionId");
        
        try {
            // üß™ OPUS: Ex√©cution formule via MagicFormulaEngine
            GameContext context = new GameContext(sessionId);
            context.getMetadata().put("playerId", playerId);
            context.getMetadata().put("websocketExecution", true);
            
            FormulaResult result = magicFormulaEngine.executeFormula(formula, context);
            
            Map<String, Object> response = Map.of(
                "type", "TEMPORAL_FORMULA_RESULT",
                "formula", formula,
                "result", result,
                "timestamp", LocalDateTime.now(),
                "opus_blessing", "üîÆ Formule ex√©cut√©e via WebSocket Temporel"
            );
            
            // Broadcast r√©sultat si formule affecte session enti√®re
            if (isSessionWideFormula(formula)) {
                messagingTemplate.convertAndSend("/temporal/session/" + sessionId, response);
            }
            
            return response;
            
        } catch (Exception e) {
            return Map.of(
                "type", "TEMPORAL_FORMULA_ERROR",
                "formula", formula,
                "error", e.getMessage(),
                "opus_warning", "‚ö†Ô∏è Formule temporelle √©chou√©e"
            );
        }
    }
    
    // ========================================
    // üîß M√âTHODES UTILITAIRES OPUS
    // ========================================
    
    private Map<String, Object> generateWSGSnapshot(String sessionId) {
        // üìä OPUS: G√©n√©ration snapshot WSG pour streaming
        return Map.of(
            "sessionId", sessionId,
            "worldNodes", 42,  // Nombre de n≈ìuds monde
            "activeConnections", 7,  // Connexions actives
            "psiStates", 3,  // √âtats œà actifs
            "causalWeight", 0.85,  // Poids causal
            "temporalStability", 0.92,  // Stabilit√© temporelle
            "opus_signature", "WSG snapshot g√©n√©r√© selon Bootstrap"
        );
    }
    
    private Map<String, Object> processCausalChain(String sessionId, String causalAction) {
        // ‚ö° OPUS: Traitement cha√Æne causale
        return Map.of(
            "sessionId", sessionId,
            "causalAction", causalAction,
            "causalWeight", 0.75,
            "paradoxRisk", 0.15,
            "timelineStability", 0.88,
            "opus_analysis", "Cha√Æne causale analys√©e - Bootstrap stable"
        );
    }
    
    private boolean isSessionWideFormula(String formula) {
        // üéØ OPUS: D√©termine si formule affecte session enti√®re
        String[] sessionWideFormulas = {
            "COLLAPSE_TEMPORAL_STATES", "FORCE_COLLAPSE_ALL", 
            "TEMPORAL_BOOST", "DIMENSIONAL_STEP"
        };
        
        for (String sessionFormula : sessionWideFormulas) {
            if (formula.contains(sessionFormula)) {
                return true;
            }
        }
        return false;
    }
} 