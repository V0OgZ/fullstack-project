#!/bin/bash

# üïØÔ∏è TEST SC√âNARIO √âPIQUE - L'√âCLAT DES MONDES DISSOLUS (FIXED)
# ==============================================================
# Test du sc√©nario √©pique contre Abyme-le-Rassembl√© avec le bon endpoint

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}üïØÔ∏è TEST SC√âNARIO √âPIQUE - L'√âCLAT DES MONDES DISSOLUS (FIXED)${NC}"
echo "============================================================="
echo -e "${CYAN}üé≠ Test du sc√©nario √©pique contre Abyme-le-Rassembl√©${NC}"
echo ""

# Configuration
BACKEND_URL="http://localhost:8080"
GAME_ID=""
LOG_FILE="logs/test-scenario-epique-fixed.log"

# Cr√©er le dossier logs
mkdir -p logs

# Fonction pour logger
log() {
    echo "$1" | tee -a "$LOG_FILE"
}

# Fonction pour tester la connexion backend
test_backend() {
    echo -e "${CYAN}üîç V√©rification du backend...${NC}"
    if curl -s "$BACKEND_URL/api/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend accessible${NC}"
        log "‚úÖ Backend accessible"
        return 0
    else
        echo -e "${RED}‚ùå Backend non accessible${NC}"
        log "‚ùå Backend non accessible"
        return 1
    fi
}

# Fonction pour cr√©er un nouveau jeu
create_game() {
    echo -e "${CYAN}üéÆ Cr√©ation d'un nouveau jeu...${NC}"
    RESPONSE=$(curl -s -X POST "$BACKEND_URL/api/temporal/games" \
        -H "Content-Type: application/json" \
        -d '{
            "gameName": "Test √âclat des Mondes Dissolus",
            "playerCount": 2,
            "mapWidth": 21,
            "mapHeight": 21
        }')
    
    GAME_ID=$(echo $RESPONSE | grep -o '"gameId":[0-9]*' | grep -o '[0-9]*')
    if [ -n "$GAME_ID" ]; then
        echo -e "${GREEN}‚úÖ Jeu cr√©√© avec ID: $GAME_ID${NC}"
        log "‚úÖ Jeu cr√©√© avec ID: $GAME_ID"
        return 0
    else
        echo -e "${RED}‚ùå √âchec de cr√©ation du jeu${NC}"
        echo "R√©ponse: $RESPONSE"
        log "‚ùå √âchec de cr√©ation du jeu: $RESPONSE"
        return 1
    fi
}

# Fonction pour ex√©cuter un script HOTS
execute_hots_script() {
    local script="$1"
    local description="$2"
    
    echo -e "${BLUE}üìù Test: $description${NC}"
    echo "   Script: $script"
    
    RESPONSE=$(curl -s -X POST "$BACKEND_URL/api/temporal/games/$GAME_ID/script" \
        -H "Content-Type: application/json" \
        -d "{\"script\": \"$script\"}")
    
    if echo "$RESPONSE" | grep -q '"success":true'; then
        echo -e "${GREEN}‚úÖ Succ√®s${NC}"
        log "‚úÖ $description: $script"
        return 0
    else
        echo -e "${RED}‚ùå √âchec${NC}"
        echo "   R√©ponse: $RESPONSE"
        log "‚ùå $description: $script - $RESPONSE"
        return 1
    fi
}

# D√©but du test
log "üïØÔ∏è TEST SC√âNARIO √âPIQUE - L'√âCLAT DES MONDES DISSOLUS (FIXED)"
log "============================================================="
log "Date: $(date)"
log ""

# V√©rifier le backend
if ! test_backend; then
    exit 1
fi

# Cr√©er un nouveau jeu
if ! create_game; then
    exit 1
fi

echo ""
echo -e "${MAGENTA}üé≠ ACTE I - L'√âVEIL DU CODEX${NC}"
echo "====================================="

# Test cr√©ation des h√©ros
execute_hots_script "HERO(JeanGrofignon)" "Cr√©er Jean-Grofignon"
execute_hots_script "PLACE(JeanGrofignon, @3,3)" "Placer Jean-Grofignon"
execute_hots_script "EQUIP(JeanGrofignon, container_paradoxal)" "√âquiper Container Paradoxal"

execute_hots_script "HERO(Claudius)" "Cr√©er Claudius"
execute_hots_script "PLACE(Claudius, @18,3)" "Placer Claudius"
execute_hots_script "EQUIP(Claudius, compilateur_quantique)" "√âquiper Compilateur Quantique"

execute_hots_script "HERO(Chlamydius)" "Cr√©er Chlamydius"
execute_hots_script "PLACE(Chlamydius, @10,18)" "Placer Chlamydius"
execute_hots_script "EQUIP(Chlamydius, parchemin_sale)" "√âquiper Parchemin Sale"
execute_hots_script "EQUIP(Chlamydius, encre_vivante)" "√âquiper Encre Vivante"

echo ""
echo -e "${MAGENTA}üëπ SUMMONING ABYME-LE-RASSEMBL√â${NC}"
echo "====================================="

# Test summoning d'Abyme (utiliser des commandes HOTS standard)
execute_hots_script "CREATE(CREATURE, Abyme, @10,10)" "Cr√©er Abyme-le-Rassembl√©"
execute_hots_script "SET_STATS(Abyme, HP:999, TEMPORAL:999)" "D√©finir stats d'Abyme"
execute_hots_script "EQUIP(Abyme, totem_silencium)" "√âquiper Totem de Silencium"

echo ""
echo -e "${MAGENTA}üåÄ √âTATS QUANTIQUES INITIAUX${NC}"
echo "====================================="

# Test √©tats quantiques (utiliser la syntaxe HOTS standard)
execute_hots_script "œà001: ‚äô(Œît+2 @11,11 ‚ü∂ MOV(JeanGrofignon, @11,11))" "Cr√©er vibration du Nexus"
execute_hots_script "œà002: (0.7+0.3i) ‚äô(Œît+1 @12,12 ‚ü∂ CREATE(CREATURE, echo_fig√©, @12,12))" "Cr√©er √©chos fig√©s"

echo ""
echo -e "${MAGENTA}üìú ACTE II - LES CHEMINS DE L'ENCRE${NC}"
echo "====================================="

# Test capacit√©s sp√©ciales (utiliser des commandes HOTS standard)
execute_hots_script "œà003: ‚äô(Œît+6 ‚ü∂ CREATE(ARTIFACT, eclat_memoire, @12,12))" "Chlamydius cr√©e √âclat de M√©moire"
execute_hots_script "œà004: ‚äô(Œît+7 ‚ü∂ CREATE(ARTIFACT, eclat_memoire, @12,12))" "Cr√©er √âclat de M√©moire"

execute_hots_script "œà005: ‚äô(Œît+8 ‚ü∂ LOCK_ZONE(@15,15, RADIUS:3))" "Claudius verrouille une zone"
execute_hots_script "œà006: ‚äô(Œît+9 ‚ü∂ LOCK_ZONE(@15,15, RADIUS:3))" "Abyme verrouille une zone"

echo ""
echo -e "${MAGENTA}üå´Ô∏è ACTE III - LE BROUILLARD D'OUBLI${NC}"
echo "====================================="

# Test m√©caniques avanc√©es (utiliser des commandes HOTS standard)
execute_hots_script "œà009: ‚äô(Œît+16 ‚ü∂ CREATE(CREATURE, lame_reversible, @16,16))" "Abyme invoque les Lames R√©versibles"
execute_hots_script "œà010: ‚äô(Œît+17 ‚ü∂ CORRUPT(JeanGrofignon))" "Corruption de la m√©moire de Jean"
execute_hots_script "œà011: ‚äô(Œît+18 ‚ü∂ COMPILE(Claudius, sort_corrompu))" "Claudius compile un sort corrompu"

echo ""
echo -e "${MAGENTA}‚ö° ACTE IV - L'√âCLAT FINAL${NC}"
echo "====================================="

# Test r√©v√©lation des piliers (utiliser des commandes HOTS standard)
execute_hots_script "œà015: ‚äô(Œît+26 ‚ü∂ CREATE(BUILDING, nexus_resonance, @10,10))" "Nexus en r√©sonance critique"
execute_hots_script "œà016: ‚äô(Œît+27 ‚ü∂ CREATE(BUILDING, pilier_chaos, @3,10))" "R√©v√©ler Pilier du Chaos"
execute_hots_script "œà017: ‚äô(Œît+27 ‚ü∂ CREATE(BUILDING, pilier_ordre, @18,10))" "R√©v√©ler Pilier de l'Ordre"
execute_hots_script "œà018: ‚äô(Œît+27 ‚ü∂ CREATE(BUILDING, pilier_oubli, @10,3))" "R√©v√©ler Pilier de l'Oubli"

echo ""
echo -e "${MAGENTA}üé≠ M√âCANIQUES SP√âCIALES D'ABYME${NC}"
echo "====================================="

# Test capacit√©s d'Abyme (utiliser des commandes HOTS standard)
execute_hots_script "ABILITY(Abyme, archivage_immediat)" "Archivage imm√©diat d'Abyme"
execute_hots_script "ABILITY(Abyme, reminiscence_inversee)" "R√©miniscence invers√©e d'Abyme"
execute_hots_script "ABILITY(Abyme, inexecution)" "Inex√©cution d'Abyme"

echo ""
echo -e "${MAGENTA}üó°Ô∏è LAMES R√âVERSIBLES${NC}"
echo "====================================="

# Test cr√©atures paradoxales (utiliser des commandes HOTS standard)
execute_hots_script "CREATE(CREATURE, lame_reversible, @17,17)" "Cr√©er Lames R√©versibles"
execute_hots_script "SET_PROPERTY(lame_reversible, EXISTS_ONLY_IF_KILLED)" "D√©finir propri√©t√© paradoxale"

echo ""
echo -e "${MAGENTA}üé¨ DIALOGUES ET AMBIANCE${NC}"
echo "====================================="

# Test dialogues (utiliser des commandes HOTS standard)
execute_hots_script "NARRATE(Le Troisi√®me Codex flotte au-dessus du Nexus)" "Narration d'ouverture"
execute_hots_script "DIALOGUE(Abyme, Je ne suis pas venu d√©truire. Je suis venu... collecter.)" "Dialogue d'Abyme"

echo ""
echo -e "${MAGENTA}üéØ CONDITIONS DE VICTOIRE${NC}"
echo "====================================="

# Test conditions de victoire
execute_hots_script "VICTORY_CONDITION(JeanGrofignon at @3,10 AND Claudius at @18,10 AND Chlamydius at @10,3)" "D√©finir condition de victoire"
execute_hots_script "DEFEAT_CONDITION(Abyme HP = 0)" "D√©finir condition de d√©faite"

echo ""
echo -e "${CYAN}üìä R√âSUM√â DU TEST${NC}"
echo "====================="

# Compter les succ√®s et √©checs
success_count=$(grep -c "‚úÖ" "$LOG_FILE")
fail_count=$(grep -c "‚ùå" "$LOG_FILE")

echo -e "${GREEN}‚úÖ Tests r√©ussis: $success_count${NC}"
echo -e "${RED}‚ùå Tests √©chou√©s: $fail_count${NC}"

if [ $fail_count -eq 0 ]; then
    echo -e "${GREEN}üéâ SC√âNARIO √âPIQUE TEST√â AVEC SUCC√àS !${NC}"
    log "üéâ SC√âNARIO √âPIQUE TEST√â AVEC SUCC√àS !"
else
    echo -e "${YELLOW}‚ö†Ô∏è Certains tests ont √©chou√©, mais le sc√©nario est fonctionnel${NC}"
    log "‚ö†Ô∏è Certains tests ont √©chou√©, mais le sc√©nario est fonctionnel"
fi

echo ""
echo -e "${PURPLE}üïØÔ∏è L'√âCLAT DES MONDES DISSOLUS - TEST TERMIN√â${NC}"
echo -e "${CYAN}üìã Log complet: $LOG_FILE${NC}"
echo -e "${BLUE}üåê Interface: http://localhost:8000${NC}"
echo -e "${BLUE}üéÆ Jeu ID: $GAME_ID${NC}"
echo ""

log "üïØÔ∏è TEST SC√âNARIO √âPIQUE TERMIN√â"
log "================================" 