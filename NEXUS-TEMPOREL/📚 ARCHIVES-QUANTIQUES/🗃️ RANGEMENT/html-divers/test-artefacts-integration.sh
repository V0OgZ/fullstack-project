#!/bin/bash

# üè∫ TEST ARTEFACTS - INT√âGRATION DANS LES TESTS
# ==============================================

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Variables globales
SUCCESS_COUNT=0
TOTAL_TESTS=0
GAME_ID=""

echo -e "${BLUE}üè∫ TEST SYST√àME ARTEFACTS - INT√âGRATION${NC}"
echo "=============================================="

# Fonction utilitaire pour cr√©er une partie de test
create_test_game() {
    local game_response=$(curl -s -X POST "http://localhost:8080/api/game/create" \
        -H "Content-Type: application/json" \
        -d '{"gameName": "TestArtefactsIntegration"}')
    
    if echo "$game_response" | grep -q '"gameId"'; then
        GAME_ID=$(echo "$game_response" | grep -o '"gameId":[0-9]*' | cut -d: -f2)
        echo -e "${GREEN}‚úÖ Partie cr√©√©e: ID $GAME_ID${NC}"
        return 0
    else
        echo -e "${RED}‚ùå √âchec cr√©ation de partie${NC}"
        echo "$game_response"
        return 1
    fi
}

# Fonction pour ex√©cuter un script et v√©rifier le r√©sultat
execute_script() {
    local script="$1"
    local test_name="$2"
    
    ((TOTAL_TESTS++))
    
    echo -e "${YELLOW}üß™ Test: $test_name${NC}"
    echo "    Script: $script"
    
    local response=$(curl -s -X POST "http://localhost:8080/api/game/$GAME_ID/script" \
        -H "Content-Type: application/json" \
        -d "{\"script\": \"$script\"}")
    
    if echo "$response" | grep -q '"success":true'; then
        local message=$(echo "$response" | grep -o '"message":"[^"]*"' | sed 's/"message":"//g' | sed 's/"$//g')
        echo -e "    ${GREEN}‚úÖ SUCC√àS !${NC} $message"
        ((SUCCESS_COUNT++))
        
        # Afficher d√©tails si disponibles
        if echo "$response" | grep -q '"details"'; then
            local details=$(echo "$response" | grep -o '"details":"[^"]*"' | sed 's/"details":"//g' | sed 's/"$//g')
            echo "    üìÑ D√©tails: $details"
        fi
        
        return 0
    else
        local error=$(echo "$response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//g' | sed 's/"$//g')
        echo -e "    ${RED}‚ùå √âchec:${NC} $error"
        return 1
    fi
}

# === D√âBUT DES TESTS ===

# V√©rifier que le backend r√©pond
if ! curl -s "http://localhost:8080/api/games" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Backend non accessible sur http://localhost:8080${NC}"
    echo -e "${YELLOW}üí° Conseil: D√©marrer avec 'cd backend && mvn spring-boot:run &'${NC}"
    exit 1
fi

# Cr√©er la partie de test
if ! create_test_game; then
    exit 1
fi

echo ""
echo -e "${BLUE}üë• √âTAPE 1: Cr√©ation des h√©ros${NC}"
echo "================================="

heroes=("Tesla" "Einstein" "Curie" "Feynman")
for hero in "${heroes[@]}"; do
    execute_script "HERO($hero)" "Cr√©er h√©ros $hero"
done

echo ""
echo -e "${BLUE}üåÄ √âTAPE 2: Cr√©ation d'√©tats quantiques${NC}"
echo "========================================"

# Cr√©er des œà-states avec amplitudes complexes
psi_states=(
    "œà101: (0.6+0.8i) ‚äô(Œît+1 @15,15 ‚ü∂ MOV(Tesla, @15,15))"
    "œà102: (0.8+0.6i) ‚äô(Œît+1 @15,15 ‚ü∂ MOV(Einstein, @15,15))"
    "œà201: (0.7+0.7i) ‚äô(Œît+2 @20,20 ‚ü∂ CREATE(CASTLE, @20,20))"
    "œà301: (0.5+0.5i) ‚äô(Œît+1 @25,25 ‚ü∂ MOV(Curie, @25,25))"
)

for psi_cmd in "${psi_states[@]}"; do
    psi_id=$(echo "$psi_cmd" | grep -o 'œà[0-9]*')
    execute_script "$psi_cmd" "Cr√©er √©tat quantique $psi_id"
done

echo ""
echo -e "${BLUE}üè∫ √âTAPE 3: TEST ARTEFACTS QUANTIQUES${NC}"
echo "====================================="

# Tests des artefacts quantiques (qui utilisent les vraies formules !)
quantum_artifacts=(
    "USE(ARTIFACT, quantum_mirror, HERO:Tesla):Miroir Quantique - Interf√©rence constructive"
    "USE(ARTIFACT, amplitude_manipulator, HERO:Einstein):Manipulateur d'Amplitudes - Rotation phase 45¬∞"
    "USE(ARTIFACT, coherence_detector, HERO:Curie):D√©tecteur de Coh√©rence - Mesure facteur coh√©rence"
    "USE(ARTIFACT, phase_shifter, HERO:Feynman):Phase Shifter - Ajustement phase al√©atoire"
)

for artifact_test in "${quantum_artifacts[@]}"; do
    cmd=$(echo "$artifact_test" | cut -d: -f1)
    name=$(echo "$artifact_test" | cut -d: -f2-)
    execute_script "$cmd" "$name"
done

echo ""
echo -e "${BLUE}‚öîÔ∏è √âTAPE 4: TEST ARTEFACTS TEMPORELS${NC}"
echo "===================================="

temporal_artifacts=(
    "USE(ARTIFACT, temporal_sword, HERO:Tesla):√âp√©e Temporelle - Bonus d√©g√¢ts +50"
    "USE(ARTIFACT, chrono_staff, HERO:Einstein):B√¢ton Chrono - Zone ralentissement temporel"
    "USE(ARTIFACT, time_anchor, HERO:Curie):Ancre Temporelle - Stabilise œà-states"
)

for artifact_test in "${temporal_artifacts[@]}"; do
    cmd=$(echo "$artifact_test" | cut -d: -f1)
    name=$(echo "$artifact_test" | cut -d: -f2-)
    execute_script "$cmd" "$name"
done

echo ""
echo -e "${BLUE}üè∫ √âTAPE 5: TEST ARTEFACTS L√âGENDAIRES${NC}"
echo "======================================"

legendary_artifacts=(
    "USE(ARTIFACT, avant_world_blade, HERO:Tesla):Lame de l'Avant-Monde - Force collapse timelines"
    "USE(ARTIFACT, reverse_clock, HERO:Einstein):Horloge Invers√©e - Rollback temporel"
    "USE(ARTIFACT, wigner_eye, HERO:Curie):≈íil de Wigner - Observation forc√©e"
)

for artifact_test in "${legendary_artifacts[@]}"; do
    cmd=$(echo "$artifact_test" | cut -d: -f1)
    name=$(echo "$artifact_test" | cut -d: -f2-)
    execute_script "$cmd" "$name"
done

echo ""
echo -e "${BLUE}üé≤ √âTAPE 6: TEST ARTEFACT G√âN√âRIQUE${NC}"
echo "==================================="

# Test fallback pour artefacts non sp√©cifi√©s
execute_script "USE(ARTIFACT, mysterious_unknown_artifact, HERO:Tesla)" "Artefact g√©n√©rique (fallback)"

echo ""
echo -e "${BLUE}üî¨ √âTAPE 7: TEST √âTATS DU JEU${NC}"
echo "============================="

# V√©rifier l'√©tat du jeu apr√®s tous ces tests
game_state=$(curl -s "http://localhost:8080/api/game/$GAME_ID/state")
if echo "$game_state" | grep -q '"heroes"'; then
    heroes_count=$(echo "$game_state" | grep -o '"heroes":\[.*\]' | grep -o '{"' | wc -l | tr -d ' ')
    psi_count=$(echo "$game_state" | grep -o '"psiStates":\[.*\]' | grep -o '{"' | wc -l | tr -d ' ')
    echo -e "${GREEN}‚úÖ √âtat final:${NC} $heroes_count h√©ros, $psi_count œà-states"
    ((SUCCESS_COUNT++))
    ((TOTAL_TESTS++))
else
    echo -e "${RED}‚ùå Impossible de r√©cup√©rer l'√©tat du jeu${NC}"
    ((TOTAL_TESTS++))
fi

# === R√âSULTATS FINAUX ===

echo ""
echo "=============================================="
echo -e "${BLUE}üìä R√âSULTATS TESTS ARTEFACTS${NC}"
echo "=============================================="

success_rate=$((SUCCESS_COUNT * 100 / TOTAL_TESTS))

if [ $success_rate -ge 80 ]; then
    echo -e "${GREEN}üéâ SUCC√àS COMPLET !${NC}"
    status_icon="‚úÖ"
else
    echo -e "${YELLOW}‚ö†Ô∏è Succ√®s partiel${NC}"
    status_icon="‚ö†Ô∏è"
fi

echo ""
echo -e "${BLUE}üìà Statistiques:${NC}"
echo "   $status_icon $SUCCESS_COUNT/$TOTAL_TESTS tests r√©ussis ($success_rate%)"
echo ""

if [ $success_rate -ge 80 ]; then
    echo -e "${GREEN}üî• LES ARTEFACTS FONCTIONNENT !${NC}"
    echo ""
    echo -e "${GREEN}üéØ SYST√àME OP√âRATIONNEL:${NC}"
    echo "   ‚Ä¢ Formules JSON ‚Üí Code Java ex√©cut√© ‚úÖ"
    echo "   ‚Ä¢ Artefacts quantiques ‚Üí Interf√©rences r√©elles ‚úÖ"  
    echo "   ‚Ä¢ Artefacts temporels ‚Üí Effets sur gameplay ‚úÖ"
    echo "   ‚Ä¢ Artefacts l√©gendaires ‚Üí Pouvoirs avanc√©s ‚úÖ"
    echo "   ‚Ä¢ Syst√®me ID simple ‚Üí Extension facile ‚úÖ"
    echo ""
    echo -e "${BLUE}üöÄ Pr√™t pour int√©gration dans tests principaux !${NC}"
    
    # Retourner le code de succ√®s
    exit 0
else
    echo -e "${RED}üîß √Ä corriger avant int√©gration compl√®te${NC}"
    echo ""
    echo -e "${YELLOW}üìÑ V√©rifier les logs pour plus de d√©tails${NC}"
    
    # Retourner le code d'erreur
    exit 1
fi 