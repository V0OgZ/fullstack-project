import { test, expect } from '@playwright/test';

test.describe('üéØ Hero Movement & Fog of War Test', () => {
  test('Test hero movement and fog of war visibility', async ({ page }) => {
    test.setTimeout(120000);
    console.log('üé¨ === TEST MOUVEMENT H√âROS ET BROUILLARD DE GUERRE ===');

    // 1. Navigation vers la page d'accueil
    await page.goto('/');
    console.log('‚úÖ Page d\'accueil charg√©e');

    // 2. Attendre le chargement des sc√©narios
    await page.waitForSelector('[data-testid="scenario-card-conquest-classic"]', { timeout: 10000 });
    console.log('‚úÖ Sc√©narios charg√©s');

    // 3. S√©lection du sc√©nario classique
    await page.click('[data-testid="scenario-card-conquest-classic"]');
    console.log('‚úÖ Sc√©nario s√©lectionn√©');

    // 4. Attendre l'interface de jeu
    await page.waitForSelector('.true-heroes-interface', { timeout: 15000 });
    console.log('‚úÖ Interface de jeu charg√©e');

    // 5. Attendre que la carte soit charg√©e
    await page.waitForSelector('canvas', { timeout: 10000 });
    console.log('‚úÖ Carte charg√©e');

    // 6. V√©rifier l'√©tat initial du h√©ros
    await page.waitForTimeout(2000);
    console.log('üîç V√©rification de l\'√©tat initial...');

    // 7. S√©lectionner le h√©ros
    await page.click('.control-btn[title="Heroes"]');
    await page.waitForTimeout(1000);
    
    // V√©rifier qu'il y a un h√©ros
    const heroElements = await page.locator('.hero-card, .hero-item, [data-testid*="hero"]').count();
    console.log(`üéØ Nombre de h√©ros trouv√©s: ${heroElements}`);
    
    if (heroElements > 0) {
      await page.click('.hero-card, .hero-item, [data-testid*="hero"]');
      console.log('‚úÖ H√©ros s√©lectionn√©');
    }

    // 8. Prendre une capture d'√©cran de l'√©tat initial
    await page.screenshot({ 
      path: 'test-results/hero-movement-1-initial-state.png',
      fullPage: true 
    });
    console.log('üì∏ Capture d\'√©tat initial sauvegard√©e');

    // 9. Activer le mode mouvement
    await page.waitForTimeout(1000);
    console.log('üö∂ Activation du mode mouvement...');

    // 10. Cliquer sur la carte pour essayer de bouger
    const canvas = page.locator('canvas').first();
    if (await canvas.count() > 0) {
      const box = await canvas.boundingBox();
      if (box) {
        // Cliquer au centre de la carte
        await canvas.click({ position: { x: box.width / 2, y: box.height / 2 } });
        console.log('‚úÖ Clic sur la carte effectu√©');
        await page.waitForTimeout(2000);
      }
    }

    // 11. Prendre une capture apr√®s le mouvement
    await page.screenshot({ 
      path: 'test-results/hero-movement-2-after-move.png',
      fullPage: true 
    });
    console.log('üì∏ Capture apr√®s mouvement sauvegard√©e');

    // 12. V√©rifier l'√©tat du h√©ros apr√®s mouvement
    await page.waitForTimeout(2000);
    console.log('üîç V√©rification de l\'√©tat apr√®s mouvement...');

    // 13. Fin de tour
    const endTurnBtn = page.locator('.end-turn-btn, [data-testid="end-turn"], button:has-text("End Turn")').first();
    if (await endTurnBtn.count() > 0) {
      await endTurnBtn.click();
      console.log('‚≠ê Fin de tour effectu√©e');
      await page.waitForTimeout(3000);
    }

    // 14. Prendre une capture apr√®s fin de tour
    await page.screenshot({ 
      path: 'test-results/hero-movement-3-after-turn.png',
      fullPage: true 
    });
    console.log('üì∏ Capture apr√®s fin de tour sauvegard√©e');

    // 15. Deuxi√®me tour - v√©rifier l'√©tat
    console.log('üîÑ D√©but du tour 2...');
    await page.waitForTimeout(2000);

    // 16. V√©rifier la vision et le brouillard de guerre
    await page.click('.control-btn[title="Heroes"]');
    await page.waitForTimeout(1000);
    
    // 17. Prendre une capture finale
    await page.screenshot({ 
      path: 'test-results/hero-movement-4-final-state.png',
      fullPage: true 
    });
    console.log('üì∏ Capture finale sauvegard√©e');

    // 18. V√©rifier les erreurs dans la console
    const consoleErrors: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
        console.log(`‚ùå Erreur console: ${msg.text()}`);
      }
    });

    // 19. Attendre un peu et v√©rifier les erreurs
    await page.waitForTimeout(5000);
    
    if (consoleErrors.length > 0) {
      console.log(`‚ö†Ô∏è ${consoleErrors.length} erreurs d√©tect√©es dans la console`);
      consoleErrors.forEach((error, index) => {
        console.log(`  ${index + 1}. ${error}`);
      });
    } else {
      console.log('‚úÖ Aucune erreur console d√©tect√©e');
    }

    // 20. V√©rifier que la page n'a pas plant√©
    const isPageAlive = await page.evaluate(() => {
      return document.readyState === 'complete' && !document.hidden;
    });

    if (isPageAlive) {
      console.log('‚úÖ Page toujours fonctionnelle');
    } else {
      console.log('‚ùå Page a plant√© ou n\'est plus accessible');
    }

    console.log('‚úÖ === TEST TERMIN√â ===');
  });
}); 