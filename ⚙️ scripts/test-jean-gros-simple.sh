#!/bin/bash

# üéØ TEST JEAN-GROS SIMPLE - FULL PATATE
# Version simplifi√©e et fix√©e pour Jean
# =====================================

echo "üéØ TEST JEAN-GROS SIMPLE - FULL PATATE"
echo "====================================="
echo ""

# Aller √† la racine du projet
cd "$(dirname "$0")/.." || exit 1
ROOT_DIR="$(pwd)"

# Configuration
REPORT_DIR="rapport-jean-gros-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$REPORT_DIR"
REPORT_FILE="$REPORT_DIR/RAPPORT_COMPLET.md"

# D√©but du rapport
cat > "$REPORT_FILE" << EOF
# üìä RAPPORT JEAN-GROS - TEST SIMPLE
*G√©n√©r√© le $(date)*

## üìã TESTS EX√âCUT√âS

EOF

# Fonction pour ex√©cuter et logger
run_test() {
    local name="$1"
    local cmd="$2"
    local log_file="$REPORT_DIR/${name}.log"
    
    echo "üîß Test: $name"
    echo "### $name" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    
    if eval "$cmd" > "$log_file" 2>&1; then
        echo "   ‚úÖ SUCC√àS"
        echo "‚úÖ **SUCC√àS**" >> "$REPORT_FILE"
        echo "Log: \`$log_file\`" >> "$REPORT_FILE"
    else
        echo "   ‚ùå √âCHEC"
        echo "‚ùå **√âCHEC**" >> "$REPORT_FILE"
        echo "Log: \`$log_file\`" >> "$REPORT_FILE"
        echo "Erreur:" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        tail -10 "$log_file" >> "$REPORT_FILE" 2>/dev/null
        echo "\`\`\`" >> "$REPORT_FILE"
    fi
    
    echo "" >> "$REPORT_FILE"
}

# V√©rifier le backend
echo "üîç V√©rification du backend..."
if curl -s http://localhost:8080/api/game/status > /dev/null 2>&1; then
    echo "‚úÖ Backend actif"
else
    echo "‚ùå Backend non accessible - Lancement..."
    cd "$ROOT_DIR/backend" && mvn spring-boot:run > "../backend-jean.log" 2>&1 &
    echo "‚è≥ Attente du d√©marrage (30s)..."
    sleep 30
    cd "$ROOT_DIR"
fi

# Tests principaux
echo ""
echo "üöÄ Lancement des tests..."
echo ""

# Backend
run_test "backend-compile" "cd '$ROOT_DIR/backend' && mvn compile -DskipTests"
run_test "backend-tests" "cd '$ROOT_DIR/backend' && mvn test"

# Scripts de test (avec v√©rification d'existence)
if [ -f "$ROOT_DIR/scripts/test-causality-wall.sh" ]; then
    run_test "causality-wall" "cd '$ROOT_DIR' && ./scripts/test-causality-wall.sh"
else
    echo "‚ö†Ô∏è  Script causality-wall non trouv√©"
fi

if [ -f "$ROOT_DIR/scripts/test-vision-temporelle.sh" ]; then
    run_test "vision-temporelle" "cd '$ROOT_DIR' && ./scripts/test-vision-temporelle.sh"
else
    echo "‚ö†Ô∏è  Script vision-temporelle non trouv√©"
fi

if [ -f "$ROOT_DIR/scripts/test-quantum-maze.sh" ]; then
    run_test "quantum-maze" "cd '$ROOT_DIR' && ./scripts/test-quantum-maze.sh"
else
    echo "‚ö†Ô∏è  Script quantum-maze non trouv√©"
fi

# UI
if [ -f "$ROOT_DIR/scripts/actifs/test-ui-quick.sh" ]; then
    run_test "ui-quick" "cd '$ROOT_DIR' && ./scripts/actifs/test-ui-quick.sh"
else
    echo "‚ö†Ô∏è  Script UI quick non trouv√©"
fi

# Test artifacts
if [ -f "$ROOT_DIR/test-artifacts-hybrid.sh" ]; then
    run_test "artifacts-hybrid" "cd '$ROOT_DIR' && ./test-artifacts-hybrid.sh"
else
    echo "‚ö†Ô∏è  Script artifacts-hybrid non trouv√©"
fi

# Analyse des formules
echo "" >> "$REPORT_FILE"
echo "## üìä ANALYSE DES FORMULES" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "\`\`\`" >> "$REPORT_FILE"
if [ -d "$ROOT_DIR/backend/src/main/resources/" ]; then
    grep -r "formula" --include="*.json" "$ROOT_DIR/backend/src/main/resources/" | grep -E "CONSTRUCTIVE|DESTRUCTIVE|AMPLIFY" | head -10 >> "$REPORT_FILE" 2>/dev/null || echo "Aucune formule trouv√©e" >> "$REPORT_FILE"
else
    echo "R√©pertoire backend/resources non trouv√©" >> "$REPORT_FILE"
fi
echo "\`\`\`" >> "$REPORT_FILE"

# R√©sum√©
echo "" >> "$REPORT_FILE"
echo "## üìã R√âSUM√â" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "- R√©pertoire de travail: $ROOT_DIR" >> "$REPORT_FILE"
echo "- Date d'ex√©cution: $(date)" >> "$REPORT_FILE"
echo "- Fichiers de log disponibles dans: $REPORT_DIR/" >> "$REPORT_FILE"

echo ""
echo "‚úÖ TEST TERMIN√â !"
echo ""
echo "üìÅ Rapport : $REPORT_FILE"
echo ""
echo "üí° Pour voir le rapport :"
echo "   cat $REPORT_FILE"
echo ""

# Copier les fichiers importants (avec v√©rification)
if [ -f "$ROOT_DIR/MEMENTO/ARBORESCENCE_MAP_COMPLETE.md" ]; then
    cp "$ROOT_DIR/MEMENTO/ARBORESCENCE_MAP_COMPLETE.md" "$REPORT_DIR/"
    echo "‚úÖ ARBORESCENCE_MAP_COMPLETE.md copi√©"
fi

if [ -f "$ROOT_DIR/MEMENTO/JEAN_MESSAGES_BEST_OF.md" ]; then
    cp "$ROOT_DIR/MEMENTO/JEAN_MESSAGES_BEST_OF.md" "$REPORT_DIR/"
    echo "‚úÖ JEAN_MESSAGES_BEST_OF.md copi√©"
fi

echo "üìã Fichiers copi√©s dans le rapport"
echo "" 