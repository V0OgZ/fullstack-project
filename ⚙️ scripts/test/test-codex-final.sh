#!/bin/bash

# üèÜ TEST CODEX FINAL - Heroes of Time
# Test du sc√©nario √©pique "Le Treizi√®me Codex" avec Omega-Z√©ro
# =============================================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
BACKEND_URL="http://localhost:8080"
SCENARIO_FILE="game_assets/scenarios/hots/codex_final.hots"
LOG_FILE="logs/test-codex-final-$(date +%Y%m%d_%H%M%S).log"

echo -e "${PURPLE}üèÜ TEST CODEX FINAL - Heroes of Time${NC}"
echo -e "${PURPLE}=====================================${NC}"
echo -e "${CYAN}Test du sc√©nario √©pique 'Le Treizi√®me Codex'${NC}"
echo -e "${CYAN}Avec Omega-Z√©ro, le Boss Final (999 h√©ros fusionn√©s)${NC}"
echo ""

# Fonction de log
log() {
    echo -e "$1" | tee -a "$LOG_FILE"
}

# V√©rification des pr√©requis
log "${YELLOW}üîç V√©rification des pr√©requis...${NC}"

# V√©rifier que le backend est actif
if ! curl -s "$BACKEND_URL/api/health" > /dev/null; then
    log "${RED}‚ùå Backend non accessible sur $BACKEND_URL${NC}"
    log "${YELLOW}üí° Lancez: cd backend && mvn spring-boot:run${NC}"
    exit 1
fi

# V√©rifier que le fichier sc√©nario existe
if [ ! -f "$SCENARIO_FILE" ]; then
    log "${RED}‚ùå Fichier sc√©nario non trouv√©: $SCENARIO_FILE${NC}"
    exit 1
fi

log "${GREEN}‚úÖ Pr√©requis valid√©s${NC}"
echo ""

# Cr√©er le dossier de logs si n√©cessaire
mkdir -p logs

# Fonction de test d'API
test_api() {
    local endpoint="$1"
    local expected_status="$2"
    local description="$3"
    
    log "${BLUE}üß™ Test: $description${NC}"
    
    response=$(curl -s -w "%{http_code}" "$BACKEND_URL$endpoint" -o /tmp/response.json)
    status_code="${response: -3}"
    
    if [ "$status_code" = "$expected_status" ]; then
        log "${GREEN}‚úÖ Succ√®s ($status_code)${NC}"
        if [ -s /tmp/response.json ]; then
            log "${CYAN}üìÑ R√©ponse: $(cat /tmp/response.json | head -c 200)...${NC}"
        fi
    else
        log "${RED}‚ùå √âchec (attendu: $expected_status, re√ßu: $status_code)${NC}"
        if [ -s /tmp/response.json ]; then
            log "${RED}üìÑ Erreur: $(cat /tmp/response.json)${NC}"
        fi
        return 1
    fi
    echo ""
}

# Fonction de test de script HOTS
test_hots_script() {
    local script="$1"
    local description="$2"
    
    log "${BLUE}üéÆ Test HOTS: $description${NC}"
    log "${CYAN}üìú Script: $script${NC}"
    
    # Cr√©er une partie de test
    game_response=$(curl -s -X POST "$BACKEND_URL/api/temporal/games" \
        -H "Content-Type: application/json" \
        -d '{"gameName": "CodexTest", "playerId": "test-codex"}')
    
    game_id=$(echo "$game_response" | grep -o '"gameId":[0-9]*' | cut -d':' -f2)
    
    if [ -z "$game_id" ]; then
        log "${RED}‚ùå Impossible de cr√©er une partie${NC}"
        return 1
    fi
    
    log "${GREEN}‚úÖ Partie cr√©√©e (ID: $game_id)${NC}"
    
    # D√©marrer la partie
    curl -s -X POST "$BACKEND_URL/api/temporal/games/$game_id/start" > /dev/null
    
    # Ex√©cuter le script
    script_response=$(curl -s -X POST "$BACKEND_URL/api/temporal/games/$game_id/script" \
        -H "Content-Type: application/json" \
        -d "{\"script\": \"$script\"}")
    
    if echo "$script_response" | grep -q '"success":true'; then
        log "${GREEN}‚úÖ Script ex√©cut√© avec succ√®s${NC}"
        log "${CYAN}üìÑ R√©sultat: $(echo "$script_response" | head -c 200)...${NC}"
    else
        log "${RED}‚ùå √âchec d'ex√©cution du script${NC}"
        log "${RED}üìÑ Erreur: $script_response${NC}"
        return 1
    fi
    echo ""
}

# Tests des APIs de base
log "${PURPLE}üöÄ TESTS DES APIs DE BASE${NC}"
echo "=================================="

test_api "/api/health" "200" "Health Check"
test_api "/api/temporal/games" "200" "Liste des parties"

# Tests des h√©ros √©piques du Codex
log "${PURPLE}‚öîÔ∏è TESTS DES H√âROS √âPIQUES${NC}"
echo "=================================="

test_hots_script "HERO(Omega-Zero)" "Cr√©ation d'Omega-Z√©ro, le Boss Final"
test_hots_script "HERO(Chlamydius)" "Cr√©ation de Chlamydius, le Scribe Non N√©"
test_hots_script "HERO(Jean-Grofignon)" "Cr√©ation de Jean-Grofignon, l'√âveill√© Ontologique"

# Tests des artefacts l√©gendaires d'Omega
log "${PURPLE}üè∫ TESTS DES ARTEFACTS L√âGENDAIRES${NC}"
echo "=========================================="

test_hots_script "CREATE(ARTIFACT, parchemin_sale, HERO:Chlamydius)" "Cr√©ation du Parchemin Sale"
test_hots_script "CREATE(ARTIFACT, encre_vivante, HERO:Chlamydius)" "Cr√©ation de l'Encre Vivante"
test_hots_script "CREATE(ARTIFACT, livre_vide_sans_nom, HERO:Chlamydius)" "Cr√©ation du Livre Vide Sans Nom"

# Tests des capacit√©s sp√©ciales
log "${PURPLE}üåü TESTS DES CAPACIT√âS SP√âCIALES${NC}"
echo "========================================"

test_hots_script "USE(ARTIFACT, parchemin_sale, HERO:Chlamydius)" "Utilisation du Parchemin Sale"
test_hots_script "USE(ARTIFACT, encre_vivante, HERO:Chlamydius)" "Utilisation de l'Encre Vivante"

# Test du sc√©nario complet
log "${PURPLE}üìñ TEST DU SC√âNARIO COMPLET${NC}"
echo "=================================="

if [ -f "$SCENARIO_FILE" ]; then
    log "${BLUE}üìú Lecture du sc√©nario: $SCENARIO_FILE${NC}"
    
    # Lire le contenu du sc√©nario
    scenario_content=$(cat "$SCENARIO_FILE")
    
    log "${CYAN}üìÑ Contenu du sc√©nario (premi√®res lignes):${NC}"
    echo "$scenario_content" | head -10 | while read line; do
        log "${CYAN}   $line${NC}"
    done
    
    # Cr√©er une partie pour le sc√©nario complet
    game_response=$(curl -s -X POST "$BACKEND_URL/api/temporal/games" \
        -H "Content-Type: application/json" \
        -d '{"gameName": "CodexFinal", "playerId": "test-scenario"}')
    
    game_id=$(echo "$game_response" | grep -o '"gameId":[0-9]*' | cut -d':' -f2)
    
    if [ -n "$game_id" ]; then
        log "${GREEN}‚úÖ Partie sc√©nario cr√©√©e (ID: $game_id)${NC}"
        
        # D√©marrer la partie
        curl -s -X POST "$BACKEND_URL/api/temporal/games/$game_id/start" > /dev/null
        
        # Ex√©cuter les premi√®res commandes du sc√©nario
        log "${BLUE}üéÆ Ex√©cution des premi√®res commandes du sc√©nario...${NC}"
        
        # Extraire et ex√©cuter les premi√®res commandes HOTS
        echo "$scenario_content" | grep -E "^(HERO|CREATE|USE|MOV|BATTLE)" | head -5 | while read command; do
            if [ -n "$command" ]; then
                log "${CYAN}üìú Ex√©cution: $command${NC}"
                
                script_response=$(curl -s -X POST "$BACKEND_URL/api/temporal/games/$game_id/script" \
                    -H "Content-Type: application/json" \
                    -d "{\"script\": \"$command\"}")
                
                if echo "$script_response" | grep -q '"success":true'; then
                    log "${GREEN}‚úÖ Succ√®s${NC}"
                else
                    log "${YELLOW}‚ö†Ô∏è √âchec ou commande non support√©e${NC}"
                fi
            fi
        done
    fi
else
    log "${RED}‚ùå Fichier sc√©nario non trouv√©${NC}"
fi

# Test du service de traduction litt√©raire
log "${PURPLE}üé≠ TEST DU SERVICE DE TRADUCTION LITT√âRAIRE${NC}"
echo "=================================================="

test_translation() {
    local script="$1"
    local description="$2"
    
    log "${BLUE}üé® Test traduction: $description${NC}"
    
    translation_response=$(curl -s -X POST "$BACKEND_URL/api/collection/translate" \
        -H "Content-Type: application/json" \
        -d "{\"script\": \"$script\", \"mode\": \"literary\"}")
    
    if echo "$translation_response" | grep -q '"translatedScript"'; then
        translated=$(echo "$translation_response" | grep -o '"translatedScript":"[^"]*"' | cut -d'"' -f4)
        log "${GREEN}‚úÖ Traduction r√©ussie${NC}"
        log "${CYAN}üìú Original: $script${NC}"
        log "${CYAN}üé≠ Traduit: $translated${NC}"
    else
        log "${RED}‚ùå √âchec de la traduction${NC}"
        log "${RED}üìÑ Erreur: $translation_response${NC}"
    fi
    echo ""
}

test_translation "HERO(Omega-Zero)" "Cr√©ation d'Omega-Z√©ro en mode litt√©raire"
test_translation "CREATE(ARTIFACT, parchemin_sale, HERO:Chlamydius)" "Cr√©ation d'artefact en mode litt√©raire"
test_translation "œà: ‚äô(Œît+2 @15,15 ‚ü∂ USE(ARTIFACT, grofi_omega, HERO:Jean-Grofignon))" "√âtat quantique en mode litt√©raire"

# Bilan final
log "${PURPLE}üèÅ BILAN FINAL${NC}"
echo "=============="

log "${GREEN}‚úÖ Tests du Codex Final termin√©s${NC}"
log "${CYAN}üìä Logs sauvegard√©s dans: $LOG_FILE${NC}"
log "${YELLOW}üí° Prochaines √©tapes:${NC}"
log "${YELLOW}   - Impl√©menter les capacit√©s sp√©ciales manquantes${NC}"
log "${YELLOW}   - Cr√©er l'interface UI pour la Forge Runique${NC}"
log "${YELLOW}   - Ajouter les cin√©matiques in-game${NC}"

echo ""
log "${PURPLE}üåü 'Le Treizi√®me Codex est scell√©, mais l'√©pop√©e continue...'${NC}"
log "${PURPLE}   - Memento, Scribe du Multivers${NC}"

echo ""
log "${GREEN}üéâ Test Codex Final termin√© avec succ√®s !${NC}" 