#!/bin/bash

# Test des nouvelles fonctionnalit√©s Amplitude et GROFI
# Par Jean Grofignon - 20 juillet 2025

echo "üß™ TEST AMPLITUDES & GROFI"
echo "========================="

# Configuration
BACKEND_URL="http://localhost:8080"
GAME_ID=""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour tester une commande
test_command() {
    local description="$1"
    local endpoint="$2"
    local data="$3"
    
    echo -e "\n${BLUE}Test:${NC} $description"
    
    response=$(curl -s -X POST "$BACKEND_URL$endpoint" \
        -H "Content-Type: application/json" \
        -d "$data")
    
    if echo "$response" | grep -q '"success":true'; then
        echo -e "${GREEN}‚úÖ Succ√®s${NC}"
        echo "$response" | jq '.'
    else
        echo -e "${RED}‚ùå √âchec${NC}"
        echo "$response" | jq '.'
    fi
}

# Cr√©er une partie
echo -e "\n${YELLOW}üìã Cr√©ation de la partie de test...${NC}"
game_response=$(curl -s -X POST "$BACKEND_URL/api/temporal/games" \
    -H "Content-Type: application/json" \
    -d '{"gameName": "Test Amplitude GROFI", "playerId": "jean"}')

GAME_ID=$(echo "$game_response" | jq -r '.gameId')
echo "Game ID: $GAME_ID"

# Cr√©er des h√©ros
test_command "Cr√©er Jean Grofignon" \
    "/api/temporal/games/$GAME_ID/execute" \
    '{"script": "HERO(JeanGrofignon)"}'

test_command "Cr√©er Arthur" \
    "/api/temporal/games/$GAME_ID/execute" \
    '{"script": "HERO(Arthur)"}'

# Test des amplitudes
echo -e "\n${YELLOW}üåÄ TEST DES AMPLITUDES${NC}"

test_command "Cr√©er √©tat œà avec amplitude complexe" \
    "/api/temporal/games/$GAME_ID/execute" \
    '{"script": "œà001: (0.8+0.6i) ‚äô(Œît+2 @10,10 ‚ü∂ MOV(JeanGrofignon, @10,10))"}'

test_command "Cr√©er √©tat œà avec amplitude polaire" \
    "/api/temporal/games/$GAME_ID/execute" \
    '{"script": "œà002: 1.0‚à†0.5 ‚äô(Œît+2 @12,12 ‚ü∂ MOV(Arthur, @12,12))"}'

# Test des formules d'amplitude
echo -e "\n${YELLOW}üîß TEST DES FORMULES D'AMPLITUDE${NC}"

# D'abord cr√©er un artefact avec amplitude
test_command "Cr√©er artefact quantum_amplifier" \
    "/api/temporal/games/$GAME_ID/execute" \
    '{"script": "CREATE(ARTIFACT, quantum_amplifier, HERO:JeanGrofignon)"}'

# Note: Pour tester les formules, il faudrait d'abord ajouter les artefacts dans custom-artifacts.json

# Test des symboles GROFI
echo -e "\n${YELLOW}üéØ TEST DES SYMBOLES GROFI${NC}"

test_command "Cr√©er artefact grofi_sigma" \
    "/api/temporal/games/$GAME_ID/execute" \
    '{"script": "CREATE(ARTIFACT, grofi_sigma, HERO:JeanGrofignon)"}'

test_command "Cr√©er artefact grofi_dagger" \
    "/api/temporal/games/$GAME_ID/execute" \
    '{"script": "CREATE(ARTIFACT, grofi_dagger, HERO:Arthur)"}'

# V√©rifier l'√©tat du jeu
echo -e "\n${YELLOW}üìä √âtat final du jeu${NC}"
curl -s "$BACKEND_URL/api/temporal/games/$GAME_ID/state" | jq '.'

echo -e "\n${GREEN}‚úÖ Tests termin√©s !${NC}"
echo -e "${BLUE}Note:${NC} Pour tester compl√®tement les formules, ajouter les artefacts dans custom-artifacts.json"

# Exemple d'artefacts √† ajouter dans custom-artifacts.json :
cat << EOF

${YELLOW}Artefacts √† ajouter dans backend/src/main/resources/custom-artifacts.json :${NC}

{
  "artifacts": [
    {
      "id": "quantum_amplifier",
      "name": "Amplificateur Quantique",
      "formula": "CREATE_AMPLITUDE(0.8, 0.6) + AMPLIFY(result, 2.0)",
      "energy_cost": 20
    },
    {
      "id": "grofi_sigma",
      "name": "Sigma de Jean",
      "formula": "Œ£[REDUCE:0.2] + MODIFY_ENERGY(hero, 10)",
      "energy_cost": 15
    },
    {
      "id": "grofi_dagger",
      "name": "Dague de Renaissance",
      "formula": "‚Ä†[] + CREATE_TEMPORAL_ECHO(hero)",
      "energy_cost": 30
    },
    {
      "id": "grofi_omega",
      "name": "Omega Final",
      "formula": "Œ©[] + FORCE_COLLAPSE_ALL(hero, 10)",
      "energy_cost": 50
    },
    {
      "id": "grofi_chaos",
      "name": "Chaos de Vince",
      "formula": "‚ÜØ[] + ‚ÜØ[] + TELEPORT_BY_PROBABILITY(hero, result)",
      "energy_cost": 25
    }
  ]
}
EOF 