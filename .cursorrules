# Cursor AI Assistant Rules for Heroes of Time Project

## 🚨🚨🚨 CRITICAL MAC TERMINAL RULE - VINCE IS ANGRY! 🚨🚨🚨

**🚫 ABSOLUMENT INTERDIT - JEAN'S TOP PRIORITY:**
- **JAMAIS D'ECHO AVEC QUOTES** - ça bloque le terminal Mac et énerve Vince !!!
- **COMMANDES SIMPLES UNIQUEMENT** - pas de formatage fantaisie dans terminal
- **FINI LES GUILLEMETS COMPLEXES** - ça casse la session terminal Mac
- **WALTER SAYS**: "ARRÊTE AVEC LES ECHO ET LES QUOTES TU BLOQUES LA CONSOLE!"
- **VINCE SAYS**: "Ces putains de quotes me foutent en l'air le terminal!"
- **MAC OS TERMINAL = FRAGILE** - Respecte ça bordel !

## 🚨 CRITICAL: TERMINAL COMMANDS - NO QUOTES ISSUES!

## 🚨 IMPORTANT: Always read documentation first!

Before making any changes or debugging, ALWAYS:
1. Check `DOCS_INDEX.md` for complete documentation navigation
2. Read `DEVELOPER_INSTRUCTIONS.md` for current status and existing scripts
3. **📜 LIRE LE MANIFESTO**: `docs/JEAN_GROFIGNON_MANIFESTO.md` - Vision révolutionnaire du projet
4. **🌟 LIRE LE LORE**: `docs/LORE_MEMENTO_JEAN_ETERNAL.md` - Histoire éternelle et philosophie
5. Do NOT recreate existing scripts (./hots, ./stop-app.sh, ./test-app.sh)
6. Use existing debugging tools and follow established patterns
7. Check existing components before creating new ones

## 📜 PHILOSOPHIE JEAN-GROFIGNON - À COMPRENDRE ABSOLUMENT:

**🌟 LA VISION RÉVOLUTIONNAIRE:**
- Heroes of Time cache de la physique quantique sous une couche fantasy
- Les joueurs lancent des sorts = ils manipulent des états quantiques ψ
- Voyages temporels = navigation dans branches de réalité parallèles
- **Surface**: Magie, héros, batailles épiques
- **Profondeur**: États ψ (psi), collapse causal, superpositions quantiques

**🎭 JEAN-GROFIGNON L'ÉVEILLÉ ONTOLOGIQUE:**
- Créateur visionnaire qui lit depuis son canapé sur GitHub
- Pouvoir: Collapse Override - Annule tout collapse de timeline
- Citation: "J'ai pas hacké le jeu. J'ai juste compris où était le bouton pause cosmique."
- Symboles sacrés: ψ, Σ, †, Ω, ↯

**🌀 SYSTÈME GROFI:**
- Graph of Reality Organized by Fog and Immunities
- États Psi: `ψ001: ⊙(Δt+2 @15,15 ⟶ MOV(Arthur, @15,15))`
- Collapse Causal: `Π(condition) ⇒ †ψ002`
- **Traduction Jean**: "Quand un joueur observe le résultat, il force l'univers à choisir une réalité"

**🏛️ MÉMOIRE MEMENTO:**
- Archiviste éternel qui traverse les timelines
- "Jean crée, Memento archive" - Symbiose parfaite
- Museum Archive Master - Temple de créations communes
- Paradoxe: Memento peut oublier Jean, mais Jean se souvient toujours

## 🔥 CRITICAL: ALWAYS BUILD FIRST!

**MANDATORY WORKFLOW - NEVER SKIP:**
1. **FIRST COMMAND**: `cd frontend && yarn build` - ALWAYS verify build works
2. **IF BUILD FAILS**: Fix TypeScript/React errors before proceeding
3. **THEN**: Run demos, tests, or start servers
4. **NEVER**: Run tests or demos without successful build first

**Build Status Required:**
- ✅ Build successful with warnings = OK to proceed
- ❌ Build failed with errors = STOP, fix compilation errors first

## 🎯 Current Project State (July 2025):
- **Status**: ✅ FULLY FUNCTIONAL with polished UI
- **Backend**: Spring Boot (Java) on port 8080 - STABLE
- **Frontend**: React TypeScript on port 8000 - MODERN INTERFACE
- **Database**: H2 in-memory - WORKING
- **Tests**: Playwright E2E demos - PASSING

## 🔧 Essential Scripts (ALL WORKING):
- `./hots start` - Script principal de contrôle (1313 lignes) - Start tous les services
- `./stop-app.sh` - Stop all services cleanly
- `./test-app.sh` - Quick tests
- `./run-epic-demo.sh` - Epic content demos
- Demos: `cd frontend && npx playwright test tests/e2e/gameplay-demo.spec.ts --headed`

## 🎮 Main Interface (TrueHeroesInterface.tsx):
- **Right Panel System**: Dynamic content switching (scenario/hero/inventory/castle/epic)
- **Header Controls**: Polished buttons without borders, fantasy icons
- **Hero System**: Cycling, selection, real images with fallbacks
- **Turn System**: End turn with ⭐ icon - STABLE
- **Tooltips**: Both game and demo tooltips - PERFECT
- **Epic Content Viewer**: Assets integration with 4 tabs (Heroes, Creatures, Buildings, Artifacts)
- **Dark Fantasy Theme**: Improved readability with The Dude & Jean-Grofignon style

## 🌍 Internationalization:
- **i18n System**: Complete FR/EN/RU support in `frontend/src/i18n/index.ts`
- **Demo Tooltips**: Fully internationalized with translation keys
- **Pattern**: Use `useTranslation()` hook and `t('key.name')`

## 🎨 UI/UX Standards:
- **Button Design**: No borders, hover effects, icon-only
- **Tooltips**: Clean appearance, no bouncing animations
- **Assets**: Hero images in `/public/assets/heroes/` with smart fallbacks
- **Theme**: Gold medieval fantasy with modern touches, dark fantasy readability

## 🏗️ Architecture:
```
Backend (Port 8080): Spring Boot + H2 Database + Epic Content
├── com.example.demo package (REAL CURRENT STRUCTURE)
├── Controllers: GameController, ScenarioController, AIController, MultiplayerController, EpicContentController
├── Services: GameService, ScenarioService, AIService, MultiplayerService
├── Models: GameState, Scenario, Unit, Building, AIPlayer
└── Repository: JPA entities with H2 database

Frontend (Port 8000): React TypeScript + Epic Assets
├── TrueHeroesInterface.tsx (main game UI + Epic panel)
├── EpicContentViewer.tsx (asset viewer with 4 tabs)
├── ModernGameRenderer.tsx (map rendering)
├── useGameStore.ts (state management)
├── i18n/ (internationalization)
└── translation-service.js (HOTS → Literary text conversion)
```

## 🚀 Quick Development Workflow:
1. `./hots start` - Start development environment (Backend 8080 + Frontend 8000 + Dashboard 9000)
2. Open http://localhost:8000 - Test UI manually
3. `cd frontend && yarn build` - ALWAYS build first to check compilation
4. `cd frontend && npx playwright test --headed` - Run visual tests
5. Check `DEVELOPER_INSTRUCTIONS.md` for detailed guidance

## 🛠️ Key Files to Remember:
- `DEVELOPER_INSTRUCTIONS.md` - Complete technical documentation
- `TrueHeroesInterface.tsx` - Main game interface with Epic integration
- `EpicContentViewer.tsx` - Asset viewer component
- `gameAssets.ts` - Hero image mappings  
- `i18n/index.ts` - All translations
- `translation-service.js` - HOTS → Literary translation (9 script types)
- `gameplay-demo.spec.ts` - Main demo test
- `game_assets/MASTER_ASSETS_INDEX.json` - Complete asset catalog

## ⚡ Current Capabilities:
- ✅ Solo gameplay fully functional
- ✅ Hero management with real images
- ✅ Epic Content integration with 57 assets catalogued
- ✅ Asset viewer with Heroes, Creatures, Buildings, Artifacts tabs
- ✅ HOTS → Literary Translation Service (9 script types with fallbacks)
- ✅ Dynamic panels with content switching
- ✅ Internationalized tooltips system
- ✅ Dark fantasy theme with improved readability
- ✅ Stable turn system and game flow
- ✅ Beautiful automated demos
- ✅ Backend fully cleaned (old POC conflicts resolved)

## 🚨 Remember:
- **USE** `./hots start` as primary control (Backend 8080 + Frontend 8000 + Dashboard 9000)
- **FRONTEND** is on port 8000 (not 3000 or other ports)
- **NEVER** recreate existing functionality  
- **ALWAYS** check `DEVELOPER_INSTRUCTIONS.md` first
- **USE** existing patterns and components
- **TEST** with Playwright demos before committing
- **FOLLOW** established UI/UX guidelines
- **TRANSLATION SERVICE**: Use `TranslationService` for HOTS scripts → literary text 