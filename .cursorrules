# Cursor AI Assistant Rules for Heroes of Time Project

## 🚨 IMPORTANT: Always read DEVELOPER_INSTRUCTIONS.md first!

Before making any changes or debugging, ALWAYS:
1. Read the file `DEVELOPER_INSTRUCTIONS.md` for current status and existing scripts
2. Do NOT recreate existing scripts (start-app.sh, stop-app.sh, test-app.sh)
3. Use existing debugging tools and follow established patterns
4. Check existing components before creating new ones

## 🎯 Current Project State (January 2025):
- **Status**: ✅ FULLY FUNCTIONAL with polished UI
- **Backend**: Spring Boot (Java) on port 8080 - STABLE
- **Frontend**: React TypeScript on port 3000 - MODERN INTERFACE
- **Database**: H2 in-memory - WORKING
- **Tests**: Playwright E2E demos - PASSING

## 🔧 Essential Scripts (ALL WORKING):
- `./start-app.sh` - Start both servers with hot reload
- `./stop-app.sh` - Stop all services cleanly
- `./run-all-tests.sh` - Complete test suite
- `./test-app.sh` - Quick tests
- Demos: `cd frontend && npx playwright test tests/e2e/gameplay-demo.spec.ts --headed`

## 🎮 Main Interface (TrueHeroesInterface.tsx):
- **Right Panel System**: Dynamic content switching (scenario/hero/inventory/castle)
- **Header Controls**: Polished buttons without borders, fantasy icons
- **Hero System**: Cycling, selection, real images with fallbacks
- **Turn System**: End turn with ⭐ icon - STABLE
- **Tooltips**: Both game and demo tooltips - PERFECT

## 🌍 Internationalization:
- **i18n System**: Complete FR/EN/RU support in `frontend/src/i18n/index.ts`
- **Demo Tooltips**: Fully internationalized with translation keys
- **Pattern**: Use `useTranslation()` hook and `t('key.name')`

## 🎨 UI/UX Standards:
- **Button Design**: No borders, hover effects, icon-only
- **Tooltips**: Clean appearance, no bouncing animations
- **Assets**: Hero images in `/public/assets/heroes/` with smart fallbacks
- **Theme**: Gold medieval fantasy with modern touches

## 🏗️ Architecture:
```
Backend (Port 8080): Spring Boot + H2 Database
├── Controllers: Scenario, Game, Multiplayer, AI
├── Services: Business logic layer
└── Repository: JPA entities

Frontend (Port 3000): React TypeScript
├── TrueHeroesInterface.tsx (main game UI)
├── ModernGameRenderer.tsx (map rendering)
├── useGameStore.ts (state management)
└── i18n/ (internationalization)
```

## 🚀 Quick Development Workflow:
1. `./start-app.sh` - Start development environment
2. Open http://localhost:3000 - Test UI manually
3. `cd frontend && npx playwright test --headed` - Run visual tests
4. Check `DEVELOPER_INSTRUCTIONS.md` for detailed guidance

## 🛠️ Key Files to Remember:
- `DEVELOPER_INSTRUCTIONS.md` - Complete technical documentation
- `TrueHeroesInterface.tsx` - Main game interface
- `gameAssets.ts` - Hero image mappings
- `i18n/index.ts` - All translations
- `gameplay-demo.spec.ts` - Main demo test

## ⚡ Current Capabilities:
- ✅ Solo gameplay fully functional
- ✅ Hero management with real images
- ✅ Dynamic panels with content switching
- ✅ Internationalized tooltips system
- ✅ Polished UI without useless elements
- ✅ Stable turn system and game flow
- ✅ Beautiful automated demos

## 🚨 Remember:
- **NEVER** recreate existing functionality
- **ALWAYS** check DEVELOPER_INSTRUCTIONS.md first
- **USE** existing patterns and components
- **TEST** with Playwright demos before committing
- **FOLLOW** established UI/UX guidelines 