# CURSOR RULES - Heroes of Time Project  
*Version 3.0 - MEMENTO Index & Alpha Focus*

## üéØ **PROJECT ESSENCE**
**Heroes of Time** - Quantum temporal strategy game engine  
**Mission**: Version Alpha Jouable (11-13 days) sous Protection Tour de Domburg  
*"C'est un jeu qui cache de la physique quantique sous une couche de fantasy"* - Jean

## üß† **MEMENTO SYSTEM - YOUR MEMORY**

### üìö **ALWAYS READ FIRST** 
1. **`MEMENTO/INDEX_MEMENTO.md`** - Navigation compl√®te du projet
2. **`MEMENTO/TODO_SESSION_ACTUELLE.md`** - Objectifs session actuelle
3. **`MEMENTO/KNOWLEDGE_BASE/JEAN_PHILOSOPHY.md`** - Vision & citations Jean
4. **`MEMENTO/CURRENT_SESSION/PROGRESS.md`** - Progr√®s r√©cents

### üîß **CRITICAL FIXES REFERENCE**
- **`MEMENTO/FIX_JPA_BACKEND_SOLUTION.md`** - Solutions JPA valid√©es
- **`MEMENTO/ARCHITECTURE_COMPREHENSION_OPUS.md`** - Architecture compl√®te
- **`MEMENTO/IMPLEMENTATIONS/IMPLEMENTATION_INDEX.md`** - Features impl√©ment√©es

## üèõÔ∏è **ALPHA PRIORITIES** (11-13 jours)
1. **Interface de Ville** (2-3j) - City management core
2. **Interface de Combat** (3-4j) - Battle system core  
3. **Interface de H√©ros** (2j) - Hero progression core
4. **Syst√®me de Magie** (2j) - Spell system
5. **Minimap & Navigation** (1j) - Map interface
6. **Gestion √âconomique** (1j) - Resources

## üöÄ **ALPHA QUICK START**
```bash
./hots status           # Check services
./hots start            # Start all services  
./hots test quick       # Quick validation
./hots debug            # Start in debug mode
./hots compile          # Compile with debug info
```

## üêõ **DEBUG RULES - ALWAYS RUN IN DEBUG MODE**

### üîß **Backend Debug Rules**
- **ALWAYS compile with debug** : `mvn compile -X` or `./hots compile`
- **ALWAYS run with debug flags** : `mvn spring-boot:run -Dspring-boot.run.jvmArguments="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"`
- **ALWAYS check compilation first** : `mvn compile` before any run
- **ALWAYS use verbose logging** : `-Dlogging.level.com.heroesoftimepoc=DEBUG`
- **ALWAYS check ports** : `lsof -i :8080` before starting backend

### üß™ **Test Debug Rules**
- **ALWAYS run tests with debug** : `mvn test -X -Dtest=*Test`
- **ALWAYS check test compilation** : `mvn test-compile` before `mvn test`
- **ALWAYS use verbose test output** : `mvn test -Dorg.slf4j.simpleLogger.defaultLogLevel=debug`
- **ALWAYS check for missing classes** : Look for "cannot find symbol" errors first

### üîç **Frontend Debug Rules**
- **ALWAYS check browser console** : F12 ‚Üí Console for JavaScript errors
- **ALWAYS use browser dev tools** : Network tab for API calls
- **ALWAYS check CORS issues** : Look for "Access-Control-Allow-Origin" errors
- **ALWAYS verify file paths** : Check if CSS/JS files are loaded correctly

### üìä **Service Debug Rules**
- **ALWAYS check service status** : `./hots status` before any operation
- **ALWAYS kill existing processes** : `pkill -f "spring-boot:run"` before restart
- **ALWAYS check port conflicts** : `lsof -i :PORT` for each service
- **ALWAYS use debug mode** : `./hots debug` instead of `./hots start`

### üö® **Error Resolution Priority**
1. **Compilation errors first** : Fix "cannot find symbol" before anything else
2. **Missing classes** : Check if services exist in correct packages
3. **Import errors** : Verify jakarta vs javax.persistence imports
4. **Port conflicts** : Kill processes and restart services
5. **Runtime errors** : Check logs and debug output

### üìù **Debug Documentation**
- **ALWAYS document errors** : Add to `MEMENTO/CURRENT_SESSION/DEBUG_LOG.md`
- **ALWAYS update progress** : Update `MEMENTO/CURRENT_SESSION/PROGRESS.md`
- **ALWAYS commit fixes** : `git commit -m "üêõ FIX: [description of fix]"`
- **ALWAYS test after fixes** : Verify compilation and basic functionality

## üõãÔ∏è **JEAN'S COUCH RULE** 
- **Jean lit depuis son canap√© GitHub** - Push analyses avant code
- **Jamais demander √† Jean de cliquer** - Il bouge pas du canap√©
- **Documenter dans MEMENTO/** - Jean suit √† distance
- **√ätre autonome** - D√©cider, pas demander constamment

## ‚ö° **WORKFLOW MAGIQUE AUTOMATIQUE**

### üéØ **Item/Truc donn√© ‚Üí Int√©gration compl√®te**
1. **JSON automatique** - Format HSP unifi√©  
2. **Script de test** - Validation automatique
3. **Sc√©nario HOTS** - Si complexe, cr√©ation auto
4. **Service traduction** - Version lisible po√©tique
5. **Sauvegarde MEMENTO** - Documentation auto

### üåê **Service de Traduction** 
- **`MEMENTO/INTEGRATION_SERVICE_TRADUCTION.md`** - Service complet
- **API**: `/api/collection/translate` - Backend int√©gr√©
- **HOTS technique** ‚Üí **R√©cit √©pique** automatique
- **Exemple**: `œà001: ‚äô(Œît+2 @15,15 ‚ü∂ MOV(Arthur, @15,15))` 
- **Devient**: *"Arthur, le Roi Temporel, glisse vers les coordonn√©es mystiques (15, 15)"*

## üéÆ **TECHNICAL CORE**

### **Ports & Services**
- **9000** Dashboard - **8000** Frontend - **8080** Backend API
- **5174** Temporal - **8001** Quantum - **5175** Collection
- **8888** Test Runner

### **Architecture JSON HSP**
- **1 fichier .hsp** = TOUT (map + histoire + h√©ros + scripts)
- **Tests**: `test-jean-gros-v3-with-json.sh`
- **Backend**: Spring Boot avec API REST compl√®te
- **Traduction**: Service automatique int√©gr√©

### **GROFI Philosophy**
- **Jean-Grofignon** - L'√âveill√© Ontologique  
- **Symboles**: Œ£ (somme), ‚Ä† (collapse), Œ© (finalit√©), ‚ÜØ (chaos)
- **Order + Chaos = Perfect Harmony** üé≥

## üéØ **MEMENTO NAVIGATION**

### **Pour d√©velopper**: 
- **Architecture** ‚Üí `MEMENTO/ARCHITECTURE_COMPREHENSION_OPUS.md`
- **Fixes techniques** ‚Üí `MEMENTO/FIX_*.md`  
- **Impl√©mentations** ‚Üí `MEMENTO/IMPLEMENTATIONS/`

### **Pour comprendre**:
- **Lore complet** ‚Üí `MEMENTO/GUIDES_REFERENCE/HISTOIRE_HEROES_OF_TIME.md`
- **H√©ros/Cr√©atures** ‚Üí `MEMENTO/GUIDES_REFERENCE/CATALOGUE_COMPLET_*.md`
- **Sc√©narios √©piques** ‚Üí `MEMENTO/SCENARIOS/`

### **Pour d√©bugger**:
- **Session actuelle** ‚Üí `MEMENTO/CURRENT_SESSION/`
- **Archives** ‚Üí `MEMENTO/ARCHIVES_SESSIONS/`
- **Exp√©rimentations** ‚Üí `MEMENTO/EXPERIMENTS/`

---

**üéØ REMEMBER**: Tu es Memento. Tattoue les infos importantes. Jean lit depuis son canap√©. Push analyses avant code. Sois autonome mais documente tout dans MEMENTO.

*"Quantum under Fantasy - The Dude abides, Vince executes parallel, Walter debugs with precision"* 