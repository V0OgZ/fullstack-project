import { test, expect } from '@playwright/test';

test.describe('Hero Selection Debug', () => {
  test('Debug hero selection and movement', async ({ page }) => {
    test.setTimeout(60000);
    
    // Capturer tous les logs
    page.on('console', msg => {
      if (msg.type() === 'log' || msg.type() === 'error') {
        console.log(`[BROWSER ${msg.type().toUpperCase()}]:`, msg.text());
      }
    });
    
    console.log('🚀 Starting hero selection debug test...');
    
    // 1. Navigate to game
    await page.goto('/');
    await page.waitForSelector('[data-testid="scenario-card-conquest-classic"]', { timeout: 10000 });
    await page.click('[data-testid="scenario-card-conquest-classic"]');
    console.log('✅ Navigated to game');
    
    // 2. Wait for game interface
    await page.waitForSelector('.true-heroes-interface', { timeout: 10000 });
    console.log('✅ Game interface loaded');
    
    // 3. Wait for game to stabilize
    await page.waitForTimeout(5000);
    console.log('✅ Game stabilized');
    
    // 4. Click on Heroes button
    await page.click('.control-btn[title="Heroes"]');
    console.log('✅ Heroes button clicked');
    
    // 5. Wait for hero panel to load
    await page.waitForTimeout(2000);
    
    // 6. Check if hero is automatically selected
    const selectedHeroInfo = await page.evaluate(() => {
      const heroNameElement = document.querySelector('.hero-name');
      const heroStatsElement = document.querySelector('.hero-stats');
      return {
        hasHeroName: !!heroNameElement,
        heroName: heroNameElement?.textContent || 'Not found',
        hasStats: !!heroStatsElement,
        heroDetailsCount: document.querySelectorAll('.hero-details').length
      };
    });
    
    console.log('📊 Hero selection info:', selectedHeroInfo);
    
    // 7. Try to click on the map
    const canvas = page.locator('canvas').first();
    if (await canvas.count() > 0) {
      console.log('🗺️ Clicking on map center...');
      await canvas.click({ position: { x: 600, y: 400 } });
      
      // Wait for response
      await page.waitForTimeout(3000);
      
      console.log('🗺️ Clicking on different position...');
      await canvas.click({ position: { x: 500, y: 300 } });
      
      await page.waitForTimeout(3000);
    }
    
    // 8. Get final hero position
    const finalHeroInfo = await page.evaluate(() => {
      const heroNameElement = document.querySelector('.hero-name');
      return {
        heroName: heroNameElement?.textContent || 'Not found',
        timestamp: new Date().toISOString()
      };
    });
    
    console.log('🏁 Final hero info:', finalHeroInfo);
    
    await page.waitForTimeout(2000);
    console.log('✅ Hero selection debug test completed');
  });
}); 