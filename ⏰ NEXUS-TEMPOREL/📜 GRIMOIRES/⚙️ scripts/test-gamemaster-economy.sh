#!/bin/bash

# üè∞ TEST GAMEMASTER ECONOMY - Syst√®me √âconomique Heroes of Time
# ===============================================================
# Test complet du GameMaster : ressources, construction, production, commerce

echo "üè∞ TEST GAMEMASTER ECONOMY - Syst√®me H3 Complet"
echo "================================================"
echo "Testeur : Memento - La M√©moire Vivante"
echo "Version : 1.0 - Impl√©mentation autonome"
echo ""

# Variables
BACKEND_URL="http://localhost:8080"
GAMEMASTER_URL="$BACKEND_URL/api/gamemaster"
TEST_RESULTS_DIR="logs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="$TEST_RESULTS_DIR/test-gamemaster-$TIMESTAMP.log"

# Cr√©er le dossier de logs
mkdir -p "$TEST_RESULTS_DIR"

# Fonction pour logger
log() {
    echo "$(date '+%H:%M:%S') $1" | tee -a "$LOG_FILE"
}

# Fonction pour tester un endpoint
test_endpoint() {
    local method="$1"
    local url="$2"
    local data="$3"
    local description="$4"
    
    log "üß™ Test: $description"
    log "   URL: $method $url"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s "$url")
    else
        response=$(curl -s -X "$method" "$url" \
            -H "Content-Type: application/json" \
            -d "$data")
    fi
    
    echo "$response" | jq . 2>/dev/null || echo "$response"
    echo ""
    
    # V√©rifier le succ√®s
    success=$(echo "$response" | jq -r '.success // false' 2>/dev/null)
    if [ "$success" = "true" ]; then
        log "   ‚úÖ SUCCESS"
    else
        log "   ‚ùå FAILED"
    fi
    echo ""
}

# V√©rifier que le backend est actif
log "üîç V√©rification du backend..."
backend_status=$(curl -s "$BACKEND_URL/api/game/status" | jq -r '.status // "unknown"' 2>/dev/null)

if [ "$backend_status" != "running" ]; then
    log "‚ùå Backend non disponible sur $BACKEND_URL"
    log "   Veuillez d√©marrer le backend : cd backend && mvn spring-boot:run"
    exit 1
fi

log "‚úÖ Backend actif"
echo ""

# ============================
# PHASE 1 : STATUS ET INFORMATIONS
# ============================

log "üìä PHASE 1 : STATUS ET INFORMATIONS"
log "===================================="

test_endpoint "GET" "$GAMEMASTER_URL/status" "" "Status du GameMaster"

test_endpoint "GET" "$GAMEMASTER_URL/resource-types" "" "Types de ressources disponibles"

# ============================
# PHASE 2 : CR√âATION D'UNE PARTIE TEST
# ============================

log "üéÆ PHASE 2 : CR√âATION D'UNE PARTIE TEST"
log "======================================="

# Cr√©er une partie de test
log "üéØ Cr√©ation d'une partie de test..."
game_response=$(curl -s -X POST "$BACKEND_URL/api/temporal/games" \
    -H "Content-Type: application/json" \
    -d '{"playerId": "gamemaster-test", "gameMode": "economy_test", "gameName": "GameMaster Economy Test"}')

echo "$game_response" | jq . 2>/dev/null || echo "$game_response"

# Extraire l'ID du jeu
GAME_ID=$(echo "$game_response" | jq -r '.gameId // empty' 2>/dev/null)

if [ -z "$GAME_ID" ]; then
    log "‚ùå Impossible de cr√©er une partie de test"
    exit 1
fi

log "‚úÖ Partie cr√©√©e avec ID: $GAME_ID"
PLAYER_ID="gamemaster-test"
echo ""

# ============================
# PHASE 3 : GESTION DES RESSOURCES
# ============================

log "üí∞ PHASE 3 : GESTION DES RESSOURCES"
log "==================================="

test_endpoint "GET" "$GAMEMASTER_URL/resources/$GAME_ID/$PLAYER_ID" "" "Ressources initiales du joueur"

# Test de v√©rification des co√ªts
cost_data='{
    "cost": {
        "GOLD": 2500,
        "WOOD": 20,
        "STONE": 20
    }
}'

test_endpoint "POST" "$GAMEMASTER_URL/can-afford/$GAME_ID/$PLAYER_ID" "$cost_data" "V√©rifier si peut construire un ch√¢teau"

# ============================
# PHASE 4 : CONSTRUCTION DE B√ÇTIMENTS
# ============================

log "üèóÔ∏è PHASE 4 : CONSTRUCTION DE B√ÇTIMENTS"
log "======================================="

# Construire un ch√¢teau
castle_data='{
    "playerId": "'$PLAYER_ID'",
    "buildingType": "CASTLE",
    "x": 10,
    "y": 10
}'

test_endpoint "POST" "$GAMEMASTER_URL/build/$GAME_ID" "$castle_data" "Construire un ch√¢teau en (10,10)"

# Construire une tour de guet
watchtower_data='{
    "playerId": "'$PLAYER_ID'",
    "buildingType": "WATCHTOWER",
    "x": 12,
    "y": 10
}'

test_endpoint "POST" "$GAMEMASTER_URL/build/$GAME_ID" "$watchtower_data" "Construire une tour de guet en (12,10)"

# Essayer de construire une forteresse (devrait √©chouer - pr√©requis ch√¢teau)
fortress_data='{
    "playerId": "'$PLAYER_ID'",
    "buildingType": "FORTRESS",
    "x": 14,
    "y": 10
}'

test_endpoint "POST" "$GAMEMASTER_URL/build/$GAME_ID" "$fortress_data" "Construire une forteresse (test pr√©requis)"

# ============================
# PHASE 5 : PRODUCTION DE RESSOURCES
# ============================

log "‚ö° PHASE 5 : PRODUCTION DE RESSOURCES"
log "===================================="

test_endpoint "POST" "$GAMEMASTER_URL/production/$GAME_ID/$PLAYER_ID" "" "Traiter la production d'un tour"

# V√©rifier les ressources apr√®s production
test_endpoint "GET" "$GAMEMASTER_URL/resources/$GAME_ID/$PLAYER_ID" "" "Ressources apr√®s production"

# ============================
# PHASE 6 : COMMERCE ET √âCHANGES
# ============================

log "ü§ù PHASE 6 : COMMERCE ET √âCHANGES"
log "================================="

# √âchanger de l'or contre du bois
trade_data='{
    "playerId": "'$PLAYER_ID'",
    "fromResource": "GOLD",
    "fromAmount": 1000,
    "toResource": "WOOD",
    "toAmount": 10
}'

test_endpoint "POST" "$GAMEMASTER_URL/trade/$GAME_ID" "$trade_data" "√âchanger 1000 or contre 10 bois"

# V√©rifier les ressources apr√®s √©change
test_endpoint "GET" "$GAMEMASTER_URL/resources/$GAME_ID/$PLAYER_ID" "" "Ressources apr√®s √©change"

# ============================
# PHASE 7 : TESTS AVANC√âS
# ============================

log "üéØ PHASE 7 : TESTS AVANC√âS"
log "=========================="

# Construire un temple
temple_data='{
    "playerId": "'$PLAYER_ID'",
    "buildingType": "TEMPLE",
    "x": 8,
    "y": 10
}'

test_endpoint "POST" "$GAMEMASTER_URL/build/$GAME_ID" "$temple_data" "Construire un temple en (8,10)"

# Maintenant essayer de construire une guilde de magie (pr√©requis : temple)
magic_guild_data='{
    "playerId": "'$PLAYER_ID'",
    "buildingType": "MAGIC_GUILD",
    "x": 8,
    "y": 12
}'

test_endpoint "POST" "$GAMEMASTER_URL/build/$GAME_ID" "$magic_guild_data" "Construire une guilde de magie (apr√®s temple)"

# Test de b√¢timent temporel
temporal_anchor_data='{
    "playerId": "'$PLAYER_ID'",
    "buildingType": "TEMPORAL_ANCHOR",
    "x": 15,
    "y": 15
}'

test_endpoint "POST" "$GAMEMASTER_URL/build/$GAME_ID" "$temporal_anchor_data" "Construire une ancre temporelle"

# ============================
# PHASE 8 : RAPPORT FINAL
# ============================

log "üìä PHASE 8 : RAPPORT FINAL"
log "=========================="

# √âtat final des ressources
test_endpoint "GET" "$GAMEMASTER_URL/resources/$GAME_ID/$PLAYER_ID" "" "√âtat final des ressources"

# Nouvelle production apr√®s tous les b√¢timents
test_endpoint "POST" "$GAMEMASTER_URL/production/$GAME_ID/$PLAYER_ID" "" "Production finale avec tous les b√¢timents"

test_endpoint "GET" "$GAMEMASTER_URL/resources/$GAME_ID/$PLAYER_ID" "" "Ressources apr√®s production finale"

# ============================
# R√âSUM√â DU TEST
# ============================

echo ""
log "üéâ TEST GAMEMASTER TERMIN√â !"
log "============================"
log "Partie test√©e : $GAME_ID"
log "Joueur : $PLAYER_ID"
log "Log complet : $LOG_FILE"
echo ""
log "üè∞ Fonctionnalit√©s test√©es :"
log "   ‚úÖ Status et informations syst√®me"
log "   ‚úÖ Gestion des ressources (9 types)"
log "   ‚úÖ Construction de b√¢timents avec pr√©requis"
log "   ‚úÖ Production automatique de ressources"
log "   ‚úÖ Commerce et √©changes √©quitables"
log "   ‚úÖ Validation des co√ªts et disponibilit√©"
log "   ‚úÖ B√¢timents temporels sp√©ciaux"
echo ""
log "üí° Le GameMaster est maintenant op√©rationnel !"
log "   Jean peut maintenant g√©rer une vraie √©conomie H3 !"

echo ""
echo "üìà STATISTIQUES FINALES :"
echo "========================"
echo "Tests ex√©cut√©s : $(grep -c "üß™ Test:" "$LOG_FILE")"
echo "Succ√®s : $(grep -c "‚úÖ SUCCESS" "$LOG_FILE")"
echo "√âchecs : $(grep -c "‚ùå FAILED" "$LOG_FILE")"
echo "Log d√©taill√© : $LOG_FILE" 