#!/bin/bash
# üß™ TESTS FONCTIONNELS DU MOTEUR
# Tester ce qui marche vraiment et identifier les bugs

API_URL="http://localhost:8080/api/magic-formulas/execute"

echo "üß™ TESTS FONCTIONNELS DU MOTEUR QUANTIQUE"
echo "========================================="
echo ""

# Variables globales pour tracking
TESTS_TOTAL=0
TESTS_PASS=0
TESTS_FAIL=0

# Fonction de test am√©lior√©e
test_formula() {
    local test_name=$1
    local payload=$2
    local expected_contains=$3
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -n "[$TESTS_TOTAL] $test_name: "
    
    # Faire la requ√™te
    response=$(curl -s -X POST $API_URL \
        -H "Content-Type: application/json" \
        -d "$payload" 2>/dev/null)
    
    # V√©rifier si la r√©ponse contient ce qu'on attend
    if echo "$response" | grep -q "$expected_contains"; then
        echo "‚úÖ PASS"
        echo "   ‚Üí R√©ponse: $(echo "$response" | jq -r '.normalInterpretation // .message' 2>/dev/null | head -c 80)"
        TESTS_PASS=$((TESTS_PASS + 1))
    else
        echo "‚ùå FAIL"
        echo "   ‚Üí Expected: '$expected_contains'"
        echo "   ‚Üí Got: $(echo "$response" | head -c 150)"
        TESTS_FAIL=$((TESTS_FAIL + 1))
    fi
    echo ""
}

echo "üîß 1. TESTS BASIQUES"
echo "==================="

test_formula \
    "Teleport simple" \
    '{"formula": "TELEPORT_HERO"}' \
    "t√©l√©port√© avec succ√®s"

test_formula \
    "Heal hero" \
    '{"formula": "HEAL_HERO"}' \
    "success"

test_formula \
    "Create item" \
    '{"formula": "CREATE_ITEM"}' \
    "success"

echo "üåÄ 2. TESTS QUANTIQUES"
echo "====================="

test_formula \
    "Cr√©er univers (œà001)" \
    '{"formula": "œà001: ‚äô(CREATE_UNIVERSE())"}' \
    "œà001"

test_formula \
    "Cr√©er monde de poche (œà100)" \
    '{"formula": "œà100: ‚äô(CREATE_POCKET_WORLD(worldName:\"TEST\"))"}' \
    "œà100"

test_formula \
    "Intrication quantique (œà200)" \
    '{"formula": "œà200: ‚äô(ENTANGLE(hero1:\"Alice\", hero2:\"Bob\"))"}' \
    "œà200"

echo "üìä 3. TESTS PARADOXES"
echo "===================="

test_formula \
    "Paradoxe faible (0.1)" \
    '{"formula": "paradoxRisk: 0.1"}' \
    "paradox"

test_formula \
    "Paradoxe moyen (0.5)" \
    '{"formula": "paradoxRisk: 0.5"}' \
    "paradox"

test_formula \
    "Paradoxe critique (0.85)" \
    '{"formula": "paradoxRisk: 0.85"}' \
    "paradox"

echo "üéÆ 4. TESTS AVEC CONTEXTE"
echo "========================"

test_formula \
    "Teleport avec position" \
    '{"formula": "TELEPORT_HERO", "context": {"x": 10, "y": 20}}' \
    "success"

test_formula \
    "Cr√©er h√©ros avec nom" \
    '{"formula": "CREATE_HERO", "context": {"name": "TestHero", "class": "Mage"}}' \
    "success"

test_formula \
    "Artifact avec effet" \
    '{"formula": "CREATE_ARTIFACT", "context": {"name": "Quantum Sword", "effect": "DAMAGE_BOOST"}}' \
    "success"

echo "üö´ 5. TESTS D'ERREURS"
echo "===================="

test_formula \
    "Formule vide devrait √©chouer" \
    '{"formula": ""}' \
    "Erreur"

test_formula \
    "Formule inconnue" \
    '{"formula": "NEXISTE_PAS_DU_TOUT"}' \
    "inconnue"

test_formula \
    "JSON malform√©" \
    '{"formula": "œà: ‚äô((((("}' \
    "Erreur"

echo "üîÆ 6. TESTS AVANC√âS"
echo "==================="

test_formula \
    "Formule complexe imbriqu√©e" \
    '{"formula": "œà300: ‚äô(COLLAPSE(SUPERPOSE(A, B, C)))"}' \
    "œà300"

test_formula \
    "ER=EPR Wormhole" \
    '{"formula": "œà201: ‚äô(OPEN_WORMHOLE(from:\"A\", to:\"B\"))"}' \
    "œà201"

test_formula \
    "Temporal loop" \
    '{"formula": "œà400: ‚äô(CREATE_TEMPORAL_LOOP(duration:5))"}' \
    "œà400"

echo ""
echo "üìà R√âSUM√â DES TESTS"
echo "==================="
echo "Total: $TESTS_TOTAL"
echo "‚úÖ Pass: $TESTS_PASS"
echo "‚ùå Fail: $TESTS_FAIL"
echo "Taux de r√©ussite: $(( TESTS_PASS * 100 / TESTS_TOTAL ))%"
echo ""

if [ $TESTS_FAIL -gt 0 ]; then
    echo "‚ö†Ô∏è  IL Y A DES BUGS √Ä CORRIGER !"
    echo "Relancer avec curl -v pour plus de d√©tails"
else
    echo "üéâ TOUS LES TESTS PASSENT !"
fi 