#!/bin/bash

# Heroes of Time - Script de contrôle principal
# Usage: ./hots [start|stop|status|restart|test|help]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SERVICES_SCRIPT="$SCRIPT_DIR/scripts/actifs/start-services-background.sh"
STOP_SCRIPT="$SCRIPT_DIR/scripts/actifs/stop-all-services.sh"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${CYAN}🎮 Heroes of Time - Contrôle des services${NC}"
    echo -e "${CYAN}=========================================${NC}"
    echo ""
    echo -e "${GREEN}Usage:${NC} ./hots [commande] [options]"
    echo ""
    echo -e "${YELLOW}Commandes disponibles:${NC}"
    echo -e "  ${GREEN}start${NC}       Démarre tous les services en arrière-plan"
    echo -e "  ${GREEN}stop${NC}        Arrête tous les services"
    echo -e "  ${GREEN}restart${NC}     Redémarre tous les services"
    echo -e "  ${GREEN}status${NC}      Affiche le statut des services"
    echo -e "  ${GREEN}test${NC}        Lance les tests (voir options ci-dessous)"
    echo -e "  ${GREEN}help${NC}        Affiche cette aide"
    echo ""
    echo -e "${YELLOW}Options de test:${NC}"
    echo -e "  ${GREEN}./hots test${NC}              Tests complets (défaut)"
    echo -e "  ${GREEN}./hots test quick${NC}        Tests rapides (1-2 min)"
    echo -e "  ${GREEN}./hots test ui${NC}           Tests interfaces utilisateur"
    echo -e "  ${GREEN}./hots test backend${NC}      Tests backend uniquement"
    echo -e "  ${GREEN}./hots test maven${NC}        Tests Maven compilation/build"
    echo -e "  ${GREEN}./hots test demo${NC}         Démonstrations interactives"
    echo -e "  ${GREEN}./hots test bataille${NC}     Tests bataille temporelle"
    echo -e "  ${GREEN}./hots test quantum${NC}      Tests quantum/visualiseurs"
    echo -e "  ${GREEN}./hots test scenarios${NC}    Tests scénarios HOTS complets"
    echo -e "  ${GREEN}./hots test performance${NC}  Tests de performance"
    echo -e "  ${GREEN}./hots test integration${NC}  Tests d'intégration complète"
    echo -e "  ${GREEN}./hots test report${NC}       Rapport complet des tests"
    echo -e "  ${GREEN}./hots test final${NC}        🏆 TOUS LES TESTS (complet)"
    echo -e "  ${GREEN}./hots test list${NC}         Liste tous les tests disponibles"
    echo ""
    echo -e "${YELLOW}Exemples:${NC}"
    echo -e "  ${CYAN}./hots start${NC}             # Démarre tout"
    echo -e "  ${CYAN}./hots status${NC}            # Vérifie l'état"
    echo -e "  ${CYAN}./hots test quick${NC}        # Tests rapides"
    echo -e "  ${CYAN}./hots test maven${NC}        # Test compilation backend"
    echo -e "  ${CYAN}./hots test final${NC}        # 🏆 TEST COMPLET FINAL"
    echo -e "  ${CYAN}./hots test report${NC}       # Rapport détaillé"
}

check_services() {
    local services_found=0
    
    # Vérifier chaque port
    if lsof -i :9000 >/dev/null 2>&1; then
        echo -e "  ✅ Dashboard (9000) - ACTIF"
        ((services_found++))
    else
        echo -e "  ❌ Dashboard (9000) - ARRÊTÉ"
    fi
    
    if lsof -i :8000 >/dev/null 2>&1; then
        echo -e "  ✅ Frontend (8000) - ACTIF"
        ((services_found++))
    else
        echo -e "  ❌ Frontend (8000) - ARRÊTÉ"
    fi
    
    if lsof -i :8080 >/dev/null 2>&1; then
        echo -e "  ✅ Backend API (8080) - ACTIF"
        ((services_found++))
    else
        echo -e "  ❌ Backend API (8080) - ARRÊTÉ"
    fi
    
    if lsof -i :5174 >/dev/null 2>&1; then
        echo -e "  ✅ Temporal (5174) - ACTIF"
        ((services_found++))
    else
        echo -e "  ❌ Temporal (5174) - ARRÊTÉ"
    fi
    
    if lsof -i :8001 >/dev/null 2>&1; then
        echo -e "  ✅ Quantum (8001) - ACTIF"
        ((services_found++))
    else
        echo -e "  ❌ Quantum (8001) - ARRÊTÉ"
    fi
    
    if lsof -i :5175 >/dev/null 2>&1; then
        echo -e "  ✅ Visualizer (5175) - ACTIF"
        ((services_found++))
    else
        echo -e "  ❌ Visualizer (5175) - ARRÊTÉ"
    fi
    
    if lsof -i :8888 >/dev/null 2>&1; then
        echo -e "  ✅ Test Runner (8888) - ACTIF"
        ((services_found++))
    else
        echo -e "  ❌ Test Runner (8888) - ARRÊTÉ"
    fi
    
    return $services_found
}

show_status() {
    echo -e "${BLUE}🔍 Statut des services Heroes of Time${NC}"
    echo "===================================="
    check_services
    local active_services=$?
    
    echo ""
    echo "URLs d'accès:"
    echo -e "  🎯 Dashboard: ${CYAN}http://localhost:9000/dashboard.html${NC}"
    echo -e "  📊 Frontend: ${CYAN}http://localhost:8000${NC}"
    echo -e "  ⚙️ Backend API: ${CYAN}http://localhost:8080/api/health${NC}"
    echo -e "  ⚔️ Temporal: ${CYAN}http://localhost:5174${NC}"
    echo -e "  🌌 Quantum: ${CYAN}http://localhost:8001${NC}"
    echo -e "  🔮 Visualizer: ${CYAN}http://localhost:5175${NC}"
    echo -e "  🧪 Test Runner: ${CYAN}http://localhost:8888${NC}"
    
    echo ""
    if [ $active_services -eq 6 ]; then
        echo -e "${GREEN}✅ Tous les services sont actifs !${NC}"
    elif [ $active_services -gt 3 ]; then
        echo -e "${YELLOW}⚠️  $active_services/6 services actifs${NC}"
    else
        echo -e "${RED}❌ Seulement $active_services/6 services actifs${NC}"
    fi
}

start_services() {
    echo -e "${BLUE}🚀 Démarrage des services Heroes of Time${NC}"
    echo "========================================"
    
    if [ -f "$SERVICES_SCRIPT" ]; then
        bash "$SERVICES_SCRIPT"
        echo ""
        echo -e "${GREEN}✅ Services lancés en arrière-plan${NC}"
        echo -e "${YELLOW}💡 Utilisez './hots status' pour vérifier l'état${NC}"
    else
        echo -e "${RED}❌ Script de démarrage non trouvé: $SERVICES_SCRIPT${NC}"
        return 1
    fi
}

stop_services() {
    echo -e "${BLUE}🛑 Arrêt des services Heroes of Time${NC}"
    echo "====================================="
    
    if [ -f "$STOP_SCRIPT" ]; then
        bash "$STOP_SCRIPT"
        echo ""
        echo -e "${GREEN}✅ Services arrêtés${NC}"
    else
        echo -e "${RED}❌ Script d'arrêt non trouvé: $STOP_SCRIPT${NC}"
        return 1
    fi
}

restart_services() {
    echo -e "${BLUE}🔄 Redémarrage des services Heroes of Time${NC}"
    echo "=========================================="
    stop_services
    sleep 2
    start_services
}

# Nouvelles fonctions de test
list_available_tests() {
    echo -e "${CYAN}📋 Tests disponibles dans Heroes of Time${NC}"
    echo -e "${CYAN}=======================================${NC}"
    echo ""
    echo -e "${YELLOW}🔧 Tests de base:${NC}"
    echo -e "  ${GREEN}quick${NC}         - Tests rapides (1-2 min)"
    echo -e "  ${GREEN}ui${NC}            - Tests interfaces utilisateur"
    echo -e "  ${GREEN}backend${NC}       - Tests backend uniquement"
    echo -e "  ${GREEN}maven${NC}         - Tests Maven compilation/build"
    echo ""
    echo -e "${YELLOW}🎮 Tests spécialisés:${NC}"
    echo -e "  ${GREEN}demo${NC}          - Démonstrations interactives"
    echo -e "  ${GREEN}bataille${NC}      - Tests bataille temporelle"
    echo -e "  ${GREEN}quantum${NC}       - Tests quantum/visualiseurs"
    echo -e "  ${GREEN}scenarios${NC}     - Tests scénarios HOTS complets"
    echo -e "  ${GREEN}performance${NC}   - Tests de performance et optimisation"
    echo -e "  ${GREEN}integration${NC}   - Tests d'intégration complète"
    echo ""
    echo -e "${YELLOW}📊 Rapports et analyse:${NC}"
    echo -e "  ${GREEN}report${NC}        - Rapport complet des tests"
    echo -e "  ${GREEN}final${NC}         - Test final complet (tous les tests)"
    echo -e "  ${GREEN}list${NC}          - Cette liste"
    echo ""
    echo -e "${YELLOW}📁 Scripts de test disponibles:${NC}"
    
    # Lister les scripts de test disponibles
    if [ -d "scripts/test" ]; then
        find scripts/test -name "*.sh" | sort | while read script; do
            echo -e "  📄 ${BLUE}$script${NC}"
        done
    fi
    
    if [ -d "scripts/demo" ]; then
        echo ""
        echo -e "${YELLOW}🎬 Scripts de démo disponibles:${NC}"
        find scripts/demo -name "*.sh" | sort | while read script; do
            echo -e "  🎭 ${PURPLE}$script${NC}"
        done
    fi
}

run_test_suite() {
    local test_type="${1:-complete}"
    
    echo -e "${CYAN}🧪 Lancement des tests Heroes of Time${NC}"
    echo -e "${CYAN}====================================${NC}"
    echo -e "${YELLOW}Type de test: ${test_type}${NC}"
    echo ""
    
    case "$test_type" in
        "quick")
            echo -e "${GREEN}🚀 Tests rapides en cours...${NC}"
            if [ -f "scripts/test/test-ui-quick.sh" ]; then
                bash scripts/test/test-ui-quick.sh
            elif [ -f "scripts/actifs/test-ui-quick.sh" ]; then
                bash scripts/actifs/test-ui-quick.sh
            else
                echo -e "${RED}❌ Script de test rapide non trouvé${NC}"
                return 1
            fi
            ;;
        "ui")
            echo -e "${GREEN}🖥️  Tests d'interface utilisateur...${NC}"
            if [ -f "scripts/test/test-scenarios-ui.sh" ]; then
                bash scripts/test/test-scenarios-ui.sh
            else
                echo -e "${RED}❌ Script de test UI non trouvé${NC}"
                return 1
            fi
            ;;
        "backend")
            echo -e "${GREEN}⚙️  Tests backend...${NC}"
            if [ -f "scripts/test/test-backend-conformity.sh" ]; then
                bash scripts/test/test-backend-conformity.sh
            else
                echo -e "${RED}❌ Script de test backend non trouvé${NC}"
                return 1
            fi
            ;;
        "maven")
            echo -e "${GREEN}☕ Tests Maven compilation...${NC}"
            echo -e "${YELLOW}🔧 Test compilation backend Maven...${NC}"
            if [ -d "backend" ]; then
                cd backend
                echo "📋 Tentative de compilation Maven..."
                if mvn clean compile -q; then
                    echo -e "${GREEN}✅ Compilation Maven réussie${NC}"
                else
                    echo -e "${RED}❌ Erreur de compilation Maven${NC}"
                    echo -e "${YELLOW}💡 Problèmes connus: executeFormula manquante, JPA entities${NC}"
                fi
                cd ..
            else
                echo -e "${RED}❌ Dossier backend non trouvé${NC}"
                return 1
            fi
            ;;
        "demo")
            echo -e "${GREEN}🎬 Démonstrations interactives...${NC}"
            if [ -f "scripts/demo/demo-quantum-final.sh" ]; then
                bash scripts/demo/demo-quantum-final.sh
            else
                echo -e "${RED}❌ Script de démo non trouvé${NC}"
                return 1
            fi
            ;;
        "bataille")
            echo -e "${GREEN}⚔️  Tests bataille temporelle...${NC}"
            if [ -f "scripts/test/test-complete-bataille-temporelle.sh" ]; then
                bash scripts/test/test-complete-bataille-temporelle.sh
            else
                echo -e "${RED}❌ Script de test bataille non trouvé${NC}"
                return 1
            fi
            ;;
        "quantum")
            echo -e "${GREEN}🌀 Tests quantum et visualiseurs...${NC}"
            if [ -f "tester-quantum-ui.sh" ]; then
                bash tester-quantum-ui.sh
            else
                echo -e "${RED}❌ Script de test quantum non trouvé${NC}"
                return 1
            fi
            ;;
        "scenarios")
            echo -e "${GREEN}🎭 Tests scénarios HOTS...${NC}"
            if [ -f "scripts/test/run-all-hots-scenarios.sh" ]; then
                bash scripts/test/run-all-hots-scenarios.sh
            else
                echo -e "${RED}❌ Script de test scénarios non trouvé${NC}"
                return 1
            fi
            ;;
        "performance")
            echo -e "${GREEN}⚡ Tests de performance...${NC}"
            if [ -f "scripts/test/test-optimizations-performance.sh" ]; then
                bash scripts/test/test-optimizations-performance.sh
            elif [ -f "scripts/test/benchmark-native-vs-script.sh" ]; then
                bash scripts/test/benchmark-native-vs-script.sh
            else
                echo -e "${RED}❌ Script de test performance non trouvé${NC}"
                return 1
            fi
            ;;
        "integration")
            echo -e "${GREEN}🔗 Tests d'intégration...${NC}"
            if [ -f "scripts/test/test-integration-complete.sh" ]; then
                bash scripts/test/test-integration-complete.sh
            else
                echo -e "${RED}❌ Script de test intégration non trouvé${NC}"
                return 1
            fi
            ;;
        "report")
            generate_test_report
            ;;
        "final")
            echo -e "${GREEN}🏆 TEST FINAL COMPLET - TOUS LES TESTS${NC}"
            echo -e "${CYAN}=====================================${NC}"
            
            # Lancer tous les tests dans l'ordre
            echo -e "${YELLOW}🚀 Phase 1: Tests rapides${NC}"
            run_test_suite "quick"
            
            echo -e "${YELLOW}🖥️  Phase 2: Tests UI${NC}"
            run_test_suite "ui"
            
            echo -e "${YELLOW}⚙️  Phase 3: Tests backend${NC}"
            run_test_suite "backend"
            
            echo -e "${YELLOW}☕ Phase 4: Tests Maven${NC}"
            run_test_suite "maven"
            
            echo -e "${YELLOW}🎬 Phase 5: Démonstrations${NC}"
            run_test_suite "demo"
            
            echo -e "${YELLOW}⚔️  Phase 6: Tests bataille${NC}"
            run_test_suite "bataille"
            
            echo -e "${YELLOW}🌀 Phase 7: Tests quantum${NC}"
            run_test_suite "quantum"
            
            echo -e "${YELLOW}🎭 Phase 8: Tests scénarios${NC}"
            run_test_suite "scenarios"
            
            echo -e "${YELLOW}⚡ Phase 9: Tests performance${NC}"
            run_test_suite "performance"
            
            echo -e "${YELLOW}🔗 Phase 10: Tests intégration${NC}"
            run_test_suite "integration"
            
            echo ""
            echo -e "${CYAN}🏆 TEST FINAL COMPLET TERMINÉ${NC}"
            echo -e "${GREEN}✅ Toutes les phases de test exécutées${NC}"
            
            # Rapport final
            generate_test_report
            ;;
        "list")
            list_available_tests
            ;;
        "complete"|*)
            echo -e "${GREEN}🔬 Tests complets en cours...${NC}"
            if [ -f "scripts/test/test-complet-final.sh" ]; then
                bash scripts/test/test-complet-final.sh
            elif [ -f "test-complet-final.sh" ]; then
                bash test-complet-final.sh
            else
                echo -e "${RED}❌ Script de test complet non trouvé${NC}"
                return 1
            fi
            ;;
    esac
}

generate_test_report() {
    echo -e "${CYAN}📊 Rapport complet des tests Heroes of Time${NC}"
    echo -e "${CYAN}===========================================${NC}"
    echo ""
    
    # Vérifier l'état des services
    echo -e "${YELLOW}🔍 État des services:${NC}"
    check_services
    local active_services=$?
    echo ""
    
    # Vérifier le Test Runner
    echo -e "${YELLOW}🧪 Test Runner Analysis:${NC}"
    if lsof -i :8888 >/dev/null 2>&1; then
        echo -e "  ✅ Test Runner actif sur port 8888"
        echo -e "  🌐 Interface: ${CYAN}http://localhost:8888${NC}"
        
        # Analyser les tests disponibles dans le Test Runner
        if [ -f "test-runner-interface.html" ]; then
            echo -e "  📋 Interface HTML: ${GREEN}Disponible${NC}"
            
            # Extraire les tests configurés
            echo -e "  🎯 Tests configurés dans l'interface:"
            grep -o "script: '[^']*'" test-runner-interface.html 2>/dev/null | sed "s/script: '/    📄 /" | sed "s/'$//"
        fi
        
        if [ -f "test-runner-server.py" ]; then
            echo -e "  🐍 Serveur Python: ${GREEN}Disponible${NC}"
        fi
    else
        echo -e "  ❌ Test Runner non actif"
    fi
    echo ""
    
    # Analyser les scripts de test disponibles
    echo -e "${YELLOW}📁 Scripts de test disponibles:${NC}"
    local test_count=0
    
    if [ -d "scripts/test" ]; then
        while IFS= read -r script; do
            if [ -f "$script" ]; then
                local size=$(du -h "$script" 2>/dev/null | cut -f1)
                local name=$(basename "$script")
                echo -e "  📄 ${GREEN}$name${NC} (${size})"
                ((test_count++))
            fi
        done < <(find scripts/test -name "*.sh" | sort)
    fi
    
    if [ -d "scripts/demo" ]; then
        echo ""
        echo -e "${YELLOW}🎬 Scripts de démo disponibles:${NC}"
        while IFS= read -r script; do
            if [ -f "$script" ]; then
                local size=$(du -h "$script" 2>/dev/null | cut -f1)
                local name=$(basename "$script")
                echo -e "  🎭 ${PURPLE}$name${NC} (${size})"
                ((test_count++))
            fi
        done < <(find scripts/demo -name "*.sh" | sort)
    fi
    
    echo ""
    echo -e "${YELLOW}🔍 Tests racine disponibles:${NC}"
    for script in test-*.sh tester-*.sh; do
        if [ -f "$script" ]; then
            local size=$(du -h "$script" 2>/dev/null | cut -f1)
            echo -e "  🧪 ${BLUE}$script${NC} (${size})"
            ((test_count++))
        fi
    done
    
    # Analyser le backend Maven
    echo ""
    echo -e "${YELLOW}☕ Analyse Backend Maven:${NC}"
    if [ -f "backend/pom.xml" ]; then
        echo -e "  📄 pom.xml: ${GREEN}Disponible${NC}"
        if [ -d "backend/src/main/java" ]; then
            local java_files=$(find backend/src/main/java -name "*.java" | wc -l)
            echo -e "  ☕ Fichiers Java: ${GREEN}$java_files fichiers${NC}"
        fi
        if [ -d "backend/target" ]; then
            echo -e "  🎯 Target Maven: ${GREEN}Présent${NC}"
        else
            echo -e "  🎯 Target Maven: ${YELLOW}Absent (pas compilé)${NC}"
        fi
        
        # Test de compilation rapide
        echo -e "  🔧 Test compilation rapide..."
        if (cd backend && mvn compile -q >/dev/null 2>&1); then
            echo -e "  ✅ Compilation: ${GREEN}Réussie${NC}"
        else
            echo -e "  ❌ Compilation: ${RED}Échoue${NC}"
            echo -e "    💡 Problèmes connus: executeFormula manquante, JPA entities"
        fi
    else
        echo -e "  ❌ Backend Maven non trouvé"
    fi
    
    # Analyser les frontends
    echo ""
    echo -e "${YELLOW}🖥️  Analyse Frontends:${NC}"
    local frontend_count=0
    for frontend_dir in frontend frontend-temporal frontend-legendary-ui quantum-visualizer; do
        if [ -d "$frontend_dir" ] && [ -f "$frontend_dir/index.html" ]; then
            local size=$(du -sh "$frontend_dir" 2>/dev/null | cut -f1)
            echo -e "  📁 ${GREEN}$frontend_dir${NC} (${size})"
            ((frontend_count++))
        fi
    done
    echo -e "  📊 Total frontends: ${GREEN}$frontend_count${NC}"
    
    # Analyser les scénarios et assets
    echo ""
    echo -e "${YELLOW}🎭 Analyse Scénarios et Assets:${NC}"
    if [ -d "game_assets/scenarios" ]; then
        local hots_files=$(find game_assets/scenarios -name "*.hots" | wc -l)
        local json_files=$(find game_assets/scenarios -name "*.json" | wc -l)
        echo -e "  📄 Fichiers HOTS: ${GREEN}$hots_files${NC}"
        echo -e "  📄 Fichiers JSON: ${GREEN}$json_files${NC}"
    else
        echo -e "  ❌ Dossier game_assets/scenarios non trouvé"
    fi
    
    echo ""
    echo -e "${YELLOW}📊 Résumé du rapport:${NC}"
    echo -e "  🎮 Services actifs: ${GREEN}$active_services/6${NC}"
    echo -e "  🧪 Scripts de test: ${GREEN}$test_count${NC}"
    echo -e "  🖥️  Frontends: ${GREEN}$frontend_count${NC}"
    echo -e "  🌐 Test Runner: $(if lsof -i :8888 >/dev/null 2>&1; then echo -e "${GREEN}Actif${NC}"; else echo -e "${RED}Inactif${NC}"; fi)"
    echo -e "  ☕ Backend Maven: $(if [ -f "backend/pom.xml" ]; then echo -e "${GREEN}Disponible${NC}"; else echo -e "${RED}Manquant${NC}"; fi)"
    
    # État de santé global
    echo ""
    echo -e "${YELLOW}🏥 État de santé global:${NC}"
    local health_score=0
    
    if [ $active_services -ge 4 ]; then ((health_score += 25)); fi
    if [ $test_count -ge 20 ]; then ((health_score += 25)); fi
    if lsof -i :8888 >/dev/null 2>&1; then ((health_score += 25)); fi
    if [ -f "backend/pom.xml" ]; then ((health_score += 25)); fi
    
    if [ $health_score -ge 90 ]; then
        echo -e "  🟢 ${GREEN}Excellent${NC} ($health_score/100)"
    elif [ $health_score -ge 70 ]; then
        echo -e "  🟡 ${YELLOW}Bon${NC} ($health_score/100)"
    elif [ $health_score -ge 50 ]; then
        echo -e "  🟠 ${YELLOW}Moyen${NC} ($health_score/100)"
    else
        echo -e "  🔴 ${RED}Nécessite attention${NC} ($health_score/100)"
    fi
    
    # Recommandations
    echo ""
    echo -e "${YELLOW}💡 Recommandations:${NC}"
    
    if [ $active_services -lt 6 ]; then
        echo -e "  ⚠️  Démarrer tous les services: ${CYAN}./hots start${NC}"
    fi
    
    if ! lsof -i :8888 >/dev/null 2>&1; then
        echo -e "  🧪 Lancer le Test Runner: ${CYAN}python3 test-runner-server.py 8888 &${NC}"
    fi
    
    if [ -f "backend/pom.xml" ] && ! (cd backend && mvn compile -q >/dev/null 2>&1); then
        echo -e "  🔧 Réparer backend Maven: ${CYAN}./hots test maven${NC}"
    fi
    
    echo -e "  🚀 Tests rapides: ${CYAN}./hots test quick${NC}"
    echo -e "  🎬 Démonstration: ${CYAN}./hots test demo${NC}"
    echo -e "  🏆 Test final complet: ${CYAN}./hots test final${NC}"
    echo -e "  📋 Liste complète: ${CYAN}./hots test list${NC}"
    
    echo ""
    echo -e "${CYAN}📈 Pour un diagnostic complet, utilisez: ${GREEN}./hots test final${NC}"
}

# Fonction principale
case "${1:-help}" in
    "start")
        start_services
        ;;
    "stop")
        stop_services
        ;;
    "restart")
        restart_services
        ;;
    "status")
        show_status
        ;;
    "test")
        run_test_suite "$2"
        ;;
    "help"|*)
        show_help
        ;;
esac 