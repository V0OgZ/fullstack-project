#!/bin/bash

# ‚öîÔ∏è Heroes of Time - Bataille Temporelle Integration Test
# =========================================================
# Script d'ex√©cution du test d'int√©gration complet
# Utilise le sc√©nario "Bataille Temporelle" avec scripts .hots et objets JSON

echo "‚öîÔ∏è Heroes of Time - Bataille Temporelle Integration Test"
echo "========================================================"
echo ""

# Configuration des couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
log() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fonction pour v√©rifier si un processus est en cours
check_process() {
    local port=$1
    local name=$2
    if lsof -ti:$port > /dev/null 2>&1; then
        log $GREEN "‚úÖ $name est en cours d'ex√©cution sur le port $port"
        return 0
    else
        log $RED "‚ùå $name n'est pas en cours d'ex√©cution sur le port $port"
        return 1
    fi
}

# Fonction pour nettoyer les processus
cleanup() {
    log $BLUE "üßπ Nettoyage des processus..."
    
    # Nettoyer les processus Spring Boot
    pkill -f "spring-boot" 2>/dev/null
    pkill -f "mvn" 2>/dev/null
    
    # Nettoyer les ports sp√©cifiques
    lsof -ti:8080 | xargs kill -9 2>/dev/null
    lsof -ti:5174 | xargs kill -9 2>/dev/null
    
    sleep 2
    log $GREEN "‚úÖ Nettoyage termin√©"
}

# Fonction pour d√©marrer le backend
start_backend() {
    log $BLUE "üöÄ D√©marrage du backend..."
    
    cd backend
    
    # V√©rifier si Maven est disponible
    if ! command -v mvn &> /dev/null; then
        log $RED "‚ùå Maven n'est pas install√©"
        exit 1
    fi
    
    # D√©marrer le backend en arri√®re-plan
    nohup mvn spring-boot:run -Dspring-boot.run.arguments="--heroes.parser.use.antlr=false" > ../test-backend.log 2>&1 &
    BACKEND_PID=$!
    
    cd ..
    
    # Attendre que le backend soit pr√™t
    log $YELLOW "‚è≥ Attente du d√©marrage du backend..."
    for i in {1..60}; do
        if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1 || curl -s http://localhost:8080/api/game/status > /dev/null 2>&1; then
            log $GREEN "‚úÖ Backend pr√™t!"
            return 0
        fi
        echo -n "."
        sleep 1
    done
    
    log $RED "‚ùå Timeout: Backend non pr√™t apr√®s 60 secondes"
    return 1
}

# V√©rifier les pr√©requis
log $BLUE "üîç V√©rification des pr√©requis..."

# V√©rifier Java
if ! command -v java &> /dev/null; then
    log $RED "‚ùå Java n'est pas install√©"
    exit 1
fi

# V√©rifier Maven
if ! command -v mvn &> /dev/null; then
    log $RED "‚ùå Maven n'est pas install√©"
    exit 1
fi

log $GREEN "‚úÖ Pr√©requis v√©rifi√©s"

# V√©rifier la structure des fichiers de test
echo "üìÅ V√©rification des fichiers de test..."
MISSING_FILES=()
# Mise √† jour des chemins vers les fichiers de test
if [ ! -f "game_assets/scenarios/visualizer/bataille_temporelle.json" ]; then
    MISSING_FILES+=("game_assets/scenarios/visualizer/bataille_temporelle.json")
fi
if [ ! -f "game_assets/tests/hots/bataille_temporelle_setup.hots" ]; then
    MISSING_FILES+=("game_assets/tests/hots/bataille_temporelle_setup.hots")
fi
if [ ! -f "game_assets/tests/hots/bataille_temporelle_combat.hots" ]; then
    MISSING_FILES+=("game_assets/tests/hots/bataille_temporelle_combat.hots")
fi
if [ ! -f "game_assets/tests/hots/bataille_temporelle_finale.hots" ]; then
    MISSING_FILES+=("game_assets/tests/hots/bataille_temporelle_finale.hots")
fi

if [ ${#MISSING_FILES[@]} -gt 0 ]; then
    log $RED "‚ùå Fichiers manquants:"
    for file in "${MISSING_FILES[@]}"; do
        log $RED "   - $file"
    done
    exit 1
else
    log $GREEN "‚úÖ Tous les fichiers de test sont pr√©sents"
fi

# Afficher les statistiques des fichiers
log $BLUE "üìä Statistiques des fichiers de test:"
echo "   - Sc√©nario JSON: $(wc -l < game_assets/scenarios/visualizer/bataille_temporelle.json) lignes"
echo "   - Setup .hots: $(grep -v '^#' game_assets/tests/hots/bataille_temporelle_setup.hots | grep -v '^$' | wc -l) commandes"
echo "   - Combat .hots: $(grep -v '^#' game_assets/tests/hots/bataille_temporelle_combat.hots | grep -v '^$' | wc -l) commandes"
echo "   - Finale .hots: $(grep -v '^#' game_assets/tests/hots/bataille_temporelle_finale.hots | grep -v '^$' | wc -l) commandes"
echo "   - Test Java: $(wc -l < backend/src/test/java/com/heroesoftimepoc/temporalengine/integration/BatailleTemporelleIntegrationTest.java) lignes"
echo ""

# Nettoyage initial
cleanup

# D√©marrer le backend
if ! start_backend; then
    log $RED "‚ùå Impossible de d√©marrer le backend"
    exit 1
fi

# Ex√©cuter le test d'int√©gration
log $BLUE "üß™ Ex√©cution du test d'int√©gration..."
echo ""

cd backend

# Lancer les tests avec Maven
if mvn test -Dtest=BatailleTemporelleIntegrationTest -DfailIfNoTests=false; then
    log $GREEN "üéâ Test d'int√©gration termin√© avec succ√®s!"
    exit_code=0
else
    log $RED "‚ùå Le test d'int√©gration a √©chou√©"
    exit_code=1
fi

cd ..

# Afficher les logs si n√©cessaire
if [ $exit_code -ne 0 ]; then
    log $YELLOW "üìã Logs du backend (derni√®res 50 lignes):"
    tail -50 test-backend.log
fi

# Nettoyage final
cleanup

# Afficher le r√©sum√©
log $BLUE "üìä R√âSUM√â DU TEST D'INT√âGRATION:"
echo "=================================="
if [ $exit_code -eq 0 ]; then
    log $GREEN "‚úÖ Statut: SUCC√àS"
    log $GREEN "‚úÖ Sc√©nario \"Bataille Temporelle\" valid√©"
    log $GREEN "‚úÖ Scripts .hots fonctionnels"
    log $GREEN "‚úÖ Artefacts temporels op√©rationnels"
    log $GREEN "‚úÖ Syst√®me quantique stable"
else
    log $RED "‚ùå Statut: √âCHEC"
    log $RED "‚ùå Voir les logs pour plus de d√©tails"
fi
echo ""
log $BLUE "üìÅ Fichiers de logs disponibles:"
echo "   - Backend: test-backend.log"
echo "   - Tests: backend/target/surefire-reports/"
echo ""

exit $exit_code 