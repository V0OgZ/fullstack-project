#!/bin/bash

# üöÄ TEST SYST√àME HYBRIDE ARTEFACTS - HARDCOD√â + DYNAMIQUE
# 
# D√©montre que les deux syst√®mes marchent :
# - Option A : Artefacts hardcod√©s (quantum_mirror, temporal_sword, etc.)
# - Option B : Artefacts dynamiques avec formules JSON (custom_mirror, teleport_crystal, etc.)

echo "üöÄ D√âMARRAGE TEST SYST√àME HYBRIDE ARTEFACTS"
echo "=============================================="

# Configuration
BACKEND_URL="http://localhost:8080"
GAME_ID="666"
TEST_PASSED=0
TEST_FAILED=0

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m' 
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction de test
test_artifact() {
    local artifact_id="$1"
    local hero_name="$2"
    local test_name="$3"
    local expected_type="$4"  # "hardcoded" ou "dynamic"
    
    echo -e "\n${BLUE}üß™ TEST: $test_name${NC}"
    echo "   Artefact: $artifact_id | H√©ros: $hero_name | Type attendu: $expected_type"
    
    # Ex√©cuter l'artefact
    response=$(curl -s -X POST "$BACKEND_URL/api/games/$GAME_ID/script" \
        -H "Content-Type: application/json" \
        -d "{\"script\": \"USE(ARTIFACT, $artifact_id, HERO:$hero_name)\"}")
    
    echo "   R√©ponse: $(echo "$response" | jq -r '.message // .error // "Erreur parsing JSON"')"
    
    # V√©rifier le succ√®s
    success=$(echo "$response" | jq -r '.success // false')
    
    if [ "$success" = "true" ]; then
        echo -e "   ${GREEN}‚úÖ SUCC√àS${NC}"
        ((TEST_PASSED++))
        
        # V√©rifier le type d'artefact utilis√©
        if echo "$response" | grep -q "formule dynamique\|PARSING FORMULE DYNAMIQUE\|Formula:"; then
            echo -e "   ${PURPLE}üî• TYPE: DYNAMIQUE (parsing de formule)${NC}"
        else
            echo -e "   ${YELLOW}‚ö° TYPE: HARDCOD√â (switch-case Java)${NC}"
        fi
        
    else
        echo -e "   ${RED}‚ùå √âCHEC${NC}"
        ((TEST_FAILED++))
    fi
}

# V√©rifier que le backend est d√©marr√©
echo -e "\n${BLUE}üîç V√âRIFICATION BACKEND${NC}"
if curl -s "$BACKEND_URL/health" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend accessible${NC}"
else 
    echo -e "${RED}‚ùå Backend inaccessible. D√©marrez avec: cd backend && mvn spring-boot:run${NC}"
    exit 1
fi

# Cr√©er le jeu et les h√©ros
echo -e "\n${BLUE}üéÆ CR√âATION JEU ET H√âROS${NC}"
curl -s -X POST "$BACKEND_URL/api/games" -H "Content-Type: application/json" -d "{\"id\": $GAME_ID}" >/dev/null
curl -s -X POST "$BACKEND_URL/api/games/$GAME_ID/script" -H "Content-Type: application/json" -d '{"script": "HERO(Tesla, 5, 5)"}' >/dev/null
curl -s -X POST "$BACKEND_URL/api/games/$GAME_ID/script" -H "Content-Type: application/json" -d '{"script": "HERO(Einstein, 7, 7)"}' >/dev/null
curl -s -X POST "$BACKEND_URL/api/games/$GAME_ID/script" -H "Content-Type: application/json" -d '{"script": "HERO(Curie, 3, 8)"}' >/dev/null

# Cr√©er quelques œà-states pour les tests quantiques
curl -s -X POST "$BACKEND_URL/api/games/$GAME_ID/script" -H "Content-Type: application/json" -d '{"script": "œà001: (0.8+0.6i) ‚äô(Œît+1 @4,5 ‚ü∂ MOV)"}' >/dev/null
curl -s -X POST "$BACKEND_URL/api/games/$GAME_ID/script" -H "Content-Type: application/json" -d '{"script": "œà002: (0.6+0.8i) ‚äô(Œît+1 @6,6 ‚ü∂ MOV)"}' >/dev/null
curl -s -X POST "$BACKEND_URL/api/games/$GAME_ID/script" -H "Content-Type: application/json" -d '{"script": "œà003: (0.7+0.7i) ‚äô(Œît+1 @8,3 ‚ü∂ MOV)"}' >/dev/null

echo -e "${GREEN}‚úÖ Jeu cr√©√© avec h√©ros et œà-states${NC}"

# ============================================================================
# üü° TESTS ARTEFACTS HARDCOD√âS (Option A)
# ============================================================================

echo -e "\n${YELLOW}üü° === TESTS ARTEFACTS HARDCOD√âS (Option A) ===${NC}"

test_artifact "quantum_mirror" "Tesla" "Miroir Quantique (hardcod√©)" "hardcoded"
test_artifact "temporal_sword" "Einstein" "√âp√©e Temporelle (hardcod√©)" "hardcoded"  
test_artifact "avant_world_blade" "Curie" "Lame du Monde Ant√©rieur (hardcod√©)" "hardcoded"
test_artifact "phase_shifter" "Tesla" "D√©phaseur (hardcod√©)" "hardcoded"
test_artifact "wigner_eye" "Einstein" "≈íil de Wigner (hardcod√©)" "hardcoded"

# ============================================================================
# üü¢ TESTS ARTEFACTS DYNAMIQUES (Option B)
# ============================================================================

echo -e "\n${PURPLE}üü¢ === TESTS ARTEFACTS DYNAMIQUES (Option B) ===${NC}"

test_artifact "custom_mirror" "Tesla" "Miroir Personnalis√© (formule: CONSTRUCTIVE + AMPLIFY)" "dynamic"
test_artifact "teleport_crystal" "Einstein" "Cristal de T√©l√©portation (formule: TELEPORT_HERO + MODIFY_ENERGY)" "dynamic"
test_artifact "energy_amplifier" "Curie" "Amplificateur d'√ânergie (formule: MODIFY_ENERGY + AMPLIFY)" "dynamic"
test_artifact "quantum_destroyer" "Tesla" "Destructeur Quantique (formule: DESTRUCTIVE + AMPLIFY)" "dynamic"
test_artifact "healing_orb" "Einstein" "Orbe de Gu√©rison (formule: MODIFY_ENERGY)" "dynamic"

# ============================================================================
# üîµ TESTS FALLBACK G√âN√âRIQUE
# ============================================================================

echo -e "\n${BLUE}üîµ === TESTS FALLBACK G√âN√âRIQUE ===${NC}"

test_artifact "unknown_artifact" "Tesla" "Artefact Inconnu (fallback g√©n√©rique)" "generic"
test_artifact "mystery_item" "Curie" "Objet Myst√©rieux (fallback g√©n√©rique)" "generic"

# ============================================================================
# üìä R√âSULTATS FINAUX
# ============================================================================

echo -e "\n${BLUE}üìä === R√âSULTATS FINAUX ===${NC}"
echo "=============================================="
echo -e "‚úÖ Tests r√©ussis: ${GREEN}$TEST_PASSED${NC}"
echo -e "‚ùå Tests √©chou√©s: ${RED}$TEST_FAILED${NC}"
echo -e "üìä Total: $((TEST_PASSED + TEST_FAILED))"

if [ $TEST_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}üéâ TOUS LES TESTS SONT PASS√âS !${NC}"
    echo -e "${GREEN}üöÄ LE SYST√àME HYBRIDE FONCTIONNE PARFAITEMENT !${NC}"
    
    echo -e "\n${YELLOW}üéØ R√âCAPITULATIF DU SYST√àME HYBRIDE:${NC}"
    echo -e "${YELLOW}‚Ä¢ Option A (Hardcod√©s):${NC} Artefacts classiques impl√©ment√©s en Java"
    echo -e "${PURPLE}‚Ä¢ Option B (Dynamiques):${NC} Artefacts avec formules JSON pars√©es √† la vol√©e"
    echo -e "${BLUE}‚Ä¢ Fallback:${NC} Effet g√©n√©rique pour les artefacts non d√©finis"
    
    echo -e "\n${GREEN}‚ú® LES UTILISATEURS PEUVENT MAINTENANT CR√âER LEURS PROPRES ARTEFACTS SANS MODIFIER LE CODE JAVA ! ‚ú®${NC}"
    
else
    echo -e "\n${RED}‚ö†Ô∏è  QUELQUES TESTS ONT √âCHOU√â${NC}"
    echo -e "${YELLOW}V√©rifiez les logs ci-dessus pour plus de d√©tails.${NC}"
fi

echo -e "\nüèÅ FIN DU TEST SYST√àME HYBRIDE ARTEFACTS" 